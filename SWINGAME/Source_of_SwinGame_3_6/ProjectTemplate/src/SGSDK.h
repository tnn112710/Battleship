/*
* Generated by SGWrapperGen - DO NOT EDIT!
*
* SwinGame wrapper for C - SGSDK
*
* Wrapping SGSDK.pas
*/

#ifndef SGSDK
#define SGSDK

#include <stdint.h>

#ifndef __cplusplus
  #include <stdbool.h>
#endif

#include "Types.h"
#ifdef __cplusplus
extern "C" {
#endif


int32_t sg_Animations_AnimationCurrentCell(animation anim);
vector sg_Animations_AnimationCurrentVector(animation anim);
bool sg_Animations_AnimationEnded(animation anim);
bool sg_Animations_AnimationEnteredFrame(animation anim);
float sg_Animations_AnimationFrameTime(animation anim);
int32_t sg_Animations_AnimationIndex(animation_script temp, const char *name);
void sg_Animations_AnimationName(animation temp, char *result);
void sg_Animations_AnimationScriptAnimationName(animation_script temp, int32_t idx, char *result);
void sg_Animations_AnimationScriptName(animation_script script, char *result);
animation_script sg_Animations_AnimationScriptNamed(const char *name);
void sg_Animations_AssignAnimation(animation anim, int32_t idx, animation_script script);
void sg_Animations_AssignAnimationNamed(animation anim, const char *name, animation_script script);
void sg_Animations_AssignAnimationNamedWithSound(animation anim, const char *name, animation_script script, bool withSound);
void sg_Animations_AssignAnimationWithSound(animation anim, int32_t idx, animation_script script, bool withSound);
animation sg_Animations_CreateAnimation(int32_t identifier, animation_script script, bool withSound);
animation sg_Animations_CreateAnimationNamed(const char *identifier, animation_script script);
animation sg_Animations_CreateAnimationNamedWithSound(const char *identifier, animation_script script, bool withSound);
animation sg_Animations_CreateAnimationWithSound(int32_t identifier, animation_script script);
void sg_Animations_DrawAnimation(animation ani, bitmap bmp, int32_t x, int32_t y);
void sg_Animations_DrawAnimationAtPoint(animation ani, bitmap bmp, const point2d *pt);
void sg_Animations_DrawAnimationOnScreen(animation ani, bitmap bmp, int32_t x, int32_t y);
void sg_Animations_DrawAnimationOnScreenAtPt(animation ani, bitmap bmp, const point2d *pt);
void sg_Animations_DrawAnimationOntoDest(bitmap dest, animation ani, bitmap bmp, int32_t x, int32_t y);
void sg_Animations_DrawAnimationOntoDestAtPt(bitmap dest, animation ani, bitmap bmp, const point2d *pt);
void sg_Animations_FreeAnimation(animation *ani);
void sg_Animations_FreeAnimationScript(animation_script *scriptToFree);
bool sg_Animations_HasAnimationScript(const char *name);
animation_script sg_Animations_LoadAnimationScript(const char *filename);
animation_script sg_Animations_LoadAnimationScriptNamed(const char *name, const char *filename);
void sg_Animations_ReleaseAllAnimationScripts();
void sg_Animations_ReleaseAnimationScript(const char *name);
void sg_Animations_ResetAnimationWithSound(animation anim, bool withSound);
void sg_Animations_RestartAnimation(animation anim);
void sg_Animations_UpdateAnimation(animation anim);
void sg_Animations_UpdateAnimationPct(animation anim, float pct);
void sg_Animations_UpdateAnimationPctAndSound(animation anim, float pct, bool withSound);
arduino_device sg_Arduino_ArduinoDeviceNamed(const char *name);
bool sg_Arduino_ArduinoHasData(arduino_device dev);
unsigned char sg_Arduino_ArduinoReadByte(arduino_device dev);
unsigned char sg_Arduino_ArduinoReadByteTimeout(arduino_device dev, int32_t timeout);
void sg_Arduino_ArduinoReadLine(arduino_device dev, char *result);
void sg_Arduino_ArduinoReadLineTimeout(arduino_device dev, int32_t timeout, char *result);
void sg_Arduino_ArduinoSendByte(arduino_device dev, unsigned char value);
void sg_Arduino_ArduinoSendString(arduino_device dev, const char *value);
void sg_Arduino_ArduinoSendStringLine(arduino_device dev, const char *value);
arduino_device sg_Arduino_CreateArduinoDevice(const char *port, int32_t baud);
arduino_device sg_Arduino_CreateArduinoNamed(const char *name, const char *port, int32_t baud);
void sg_Arduino_FreeArduinoDevice(arduino_device *dev);
bool sg_Arduino_HasArduinoDevice(const char *name);
void sg_Arduino_ReleaseAllArduinoDevices();
void sg_Arduino_ReleaseArduinoDevice(const char *name);
bool sg_Audio_AudioReady();
void sg_Audio_CloseAudio();
void sg_Audio_FadeMusicIn(music mus, int32_t ms);
void sg_Audio_FadeMusicInWithLoops(music mus, int32_t loops, int32_t ms);
void sg_Audio_FadeMusicNamedIn(const char *name, int32_t ms);
void sg_Audio_FadeMusicNamedInWithLoops(const char *name, int32_t loops, int32_t ms);
void sg_Audio_FadeMusicOut(int32_t ms);
void sg_Audio_FreeMusic(music *mus);
void sg_Audio_FreeSoundEffect(sound_effect *effect);
bool sg_Audio_HasMusic(const char *name);
bool sg_Audio_HasSoundEffect(const char *name);
music sg_Audio_LoadMusic(const char *filename);
music sg_Audio_LoadMusicNamed(const char *name, const char *filename);
sound_effect sg_Audio_LoadSoundEffect(const char *filename);
sound_effect sg_Audio_LoadSoundEffectNamed(const char *name, const char *filename);
void sg_Audio_MusicFilename(music mus, char *result);
void sg_Audio_MusicName(music mus, char *result);
music sg_Audio_MusicNamed(const char *name);
bool sg_Audio_MusicPlaying();
float sg_Audio_MusicVolume();
void sg_Audio_OpenAudio();
void sg_Audio_PauseMusic();
void sg_Audio_PlayMusicNamedWithLoops(const char *name, int32_t loops);
void sg_Audio_PlayMusicWithLoops(music mus, int32_t loops);
void sg_Audio_PlaySoundEffectNamedWithLoopAndVolume(const char *name, int32_t loops, float vol);
void sg_Audio_PlaySoundEffectWithLoopAndVolume(sound_effect effect, int32_t loops, float vol);
void sg_Audio_ReleaseAllMusic();
void sg_Audio_ReleaseAllSoundEffects();
void sg_Audio_ReleaseMusic(const char *name);
void sg_Audio_ReleaseSoundEffect(const char *name);
void sg_Audio_ResumeMusic();
void sg_Audio_SetMusicVolume(float value);
void sg_Audio_SoundEffectFilename(sound_effect effect, char *result);
void sg_Audio_SoundEffectName(sound_effect effect, char *result);
sound_effect sg_Audio_SoundEffectNamed(const char *name);
bool sg_Audio_SoundEffectNamedPlaying(const char *name);
bool sg_Audio_SoundEffectPlaying(sound_effect effect);
void sg_Audio_StopMusic();
void sg_Audio_StopSoundEffect(sound_effect effect);
void sg_Audio_StopSoundEffectNamed(const char *name);
bool sg_Audio_TryOpenAudio();
point2d sg_Camera_CameraPos();
rectangle sg_Camera_CameraScreenRect();
float sg_Camera_CameraX();
float sg_Camera_CameraY();
void sg_Camera_CenterCameraOn(sprite s, const vector *offset);
void sg_Camera_CenterCameraOnCharacter(character c, const vector *offset);
void sg_Camera_CenterCameraOnWithXYOffset(sprite s, int32_t offsetX, int32_t offsetY);
void sg_Camera_MoveCameraBy(const vector *offset);
void sg_Camera_MoveCameraByXY(float dx, float dy);
void sg_Camera_MoveCameraTo(const point2d *pt);
void sg_Camera_MoveCameraToXY(float x, float y);
bool sg_Camera_PointOnScreen(const point2d *pt);
bool sg_Camera_RectOnScreen(const rectangle *rect);
void sg_Camera_SetCameraPos(const point2d *pt);
void sg_Camera_SetCameraX(float x);
void sg_Camera_SetCameraY(float y);
point2d sg_Camera_ToScreen(const point2d *worldPoint);
rectangle sg_Camera_ToScreenRect(const rectangle *rect);
int32_t sg_Camera_ToScreenX(float worldX);
int32_t sg_Camera_ToScreenY(float worldY);
point2d sg_Camera_ToWorld(const point2d *screenPoint);
float sg_Camera_ToWorldX(int32_t screenX);
float sg_Camera_ToWorldY(int32_t screenY);
direction_angles sg_Characters_CharacterAngleAt(character c, int32_t index);
int32_t sg_Characters_CharacterAngleMaxAt(character c, int32_t index);
int32_t sg_Characters_CharacterAngleMinAt(character c, int32_t index);
int32_t sg_Characters_CharacterAnglesLength(character c);
void sg_Characters_CharacterCharacterName(character c, char *result);
int32_t sg_Characters_CharacterCurrentDirection(character c);
int32_t sg_Characters_CharacterCurrentState(character c);
int32_t sg_Characters_CharacterDirectionCount(character c);
void sg_Characters_CharacterDirections(character c, string_array result, int32_t result_len);
void sg_Characters_CharacterFilename(character c, char *result);
void sg_Characters_CharacterName(character c, char *result);
character sg_Characters_CharacterNamed(const char *name);
void sg_Characters_CharacterSetCurrentDirection(character c, int32_t direction);
void sg_Characters_CharacterSetCurrentState(character c, int32_t state);
void sg_Characters_CharacterSetName(character c, const char *name);
void sg_Characters_CharacterSetType(character c, const char *name);
void sg_Characters_CharacterSetValue(character c, int32_t idx, float val);
void sg_Characters_CharacterSetValueByName(character c, const char *name, float val);
bool sg_Characters_CharacterShownLayersAt(character c, int32_t index);
sprite sg_Characters_CharacterSprite(character c);
int32_t sg_Characters_CharacterStateCount(character c);
void sg_Characters_CharacterStates(character c, string_array result, int32_t result_len);
void sg_Characters_CharacterType(character c, char *result);
float sg_Characters_CharacterValueAt(character c, int32_t index);
int32_t sg_Characters_CharacterValueCount(character c);
void sg_Characters_CharacterValueNames(character c, string_array result, int32_t result_len);
void sg_Characters_DrawCharacter(character c);
void sg_Characters_DrawCharacterSprite(character c);
void sg_Characters_DrawCharacterWithStationary(character c, int32_t stationaryState, int32_t state);
void sg_Characters_FreeCharacter(character *c);
bool sg_Characters_HasCharacter(const char *name);
character sg_Characters_LoadCharacter(const char *filename);
character sg_Characters_LoadCharacterNamed(const char *name, const char *filename);
void sg_Characters_ReleaseAllCharacters();
void sg_Characters_ReleaseCharacter(const char *name);
void sg_Characters_SetActiveLayer(character c);
void sg_Characters_ToggleLayerVisibility(character c, int32_t index);
bool sg_Characters_UpdateDirectionAnimation(character c);
bool sg_Characters_UpdateDirectionAnimationWithStationary(character c, int32_t state, int32_t newState);
vector sg_Geometry_AddVectors(const vector *v1, const vector *v2);
void sg_Geometry_ApplyMatrix(const matrix2d  *m, triangle  *tri);
void sg_Geometry_ApplyMatrixToPoints(const matrix2d  *m, point2d *pts, int32_t pts_len);
float sg_Geometry_CalculateAngle(float x1, float y1, float x2, float y2);
float sg_Geometry_CalculateAngleBetween(const point2d *pt1, const point2d *pt2);
float sg_Geometry_CalculateAngleBetweenSprites(sprite s1, sprite s2);
float sg_Geometry_CalculateAngleBetweenVectors(const vector *v1, const vector *v2);
circle sg_Geometry_CircleAt(const point2d *pt, int32_t radius);
point2d sg_Geometry_CircleCenterPoint(const circle *c);
circle sg_Geometry_CircleFromXY(float x, float y, int32_t radius);
int32_t sg_Geometry_CircleRadius(const circle *c);
bool sg_Geometry_CircleWithinRect(const circle *c, const rectangle *rect);
float sg_Geometry_CircleX(const circle *c);
float sg_Geometry_CircleY(const circle *c);
point2d sg_Geometry_ClosestPointOnCircle(const point2d *fromPt, const circle *c);
point2d sg_Geometry_ClosestPointOnLine(const point2d *fromPt, const line_segment *line);
point2d sg_Geometry_ClosestPointOnLineFromCircle(const circle *c, const line_segment *line);
point2d sg_Geometry_ClosestPointOnLineXY(float x, float y, const line_segment *line);
point2d sg_Geometry_ClosestPointOnLinesFromCircle(const circle *c, const lines_array lines, int32_t lines_len);
point2d sg_Geometry_ClosestPointOnRectFromCircle(const circle *c, const rectangle *rect);
float sg_Geometry_Cosine(float angle);
circle sg_Geometry_CreateCircle(const point2d *pt, int32_t radius);
circle sg_Geometry_CreateCircleFromXY(float x, float y, int32_t radius);
line_segment sg_Geometry_CreateLine(float x1, float y1, float x2, float y2);
vector sg_Geometry_CreateLineAsVector(const line_segment *line);
line_segment sg_Geometry_CreateLineFromVector(const vector *mv);
line_segment sg_Geometry_CreateLinePointToPoint(const point2d *pt1, const point2d *pt2);
line_segment sg_Geometry_CreateLineVectorWithStartPoint(const point2d *pt, const vector *mv);
line_segment sg_Geometry_CreateLineVectorWithStartXY(float x, float y, const vector *mv);
rectangle sg_Geometry_CreateRectangle(float x, float y, int32_t w, int32_t h);
rectangle sg_Geometry_CreateRectangleAtPoint(const point2d *pt, int32_t width, int32_t height);
rectangle sg_Geometry_CreateRectangleCircle(const circle *c);
rectangle sg_Geometry_CreateRectangleForPoints(const point2d *pt1, const point2d *pt2);
rectangle sg_Geometry_CreateRectangleLine(const line_segment *line);
rectangle sg_Geometry_CreateRectangleLines(const lines_array lines, int32_t lines_len);
rectangle sg_Geometry_CreateRectangleTriangle(const triangle  *tri);
triangle  sg_Geometry_CreateTriangle(float ax, float ay, float bx, float by, float cx, float cy);
triangle  sg_Geometry_CreateTrianglePoints(const point2d *a, const point2d *b, const point2d *c);
vector sg_Geometry_CreateVectorFromAngle(float angle, float magnitude);
vector sg_Geometry_CreateVectorFromPointPtToRectangle(const point2d *pt, const rectangle *rect);
vector sg_Geometry_CreateVectorFromPointToRect(float x, float y, float rectX, float rectY, int32_t rectWidth, int32_t rectHeight);
vector sg_Geometry_CreateVectorFromPointToRectangle(float x, float y, const rectangle *rect);
vector sg_Geometry_CreateVectorFromPoints(const point2d *p1, const point2d *p2);
vector sg_Geometry_CreateVectorToPoint(const point2d *p1);
point2d sg_Geometry_DistantPointOnCircle(const point2d *pt, const circle *c);
bool sg_Geometry_DistantPointOnCircleHeading(const point2d *pt, const circle *c, const vector *heading, point2d *oppositePt);
float sg_Geometry_DotProduct(const vector *v1, const vector *v2);
void sg_Geometry_FixRect(float *x, float *y, int32_t *width, int32_t *height);
void sg_Geometry_FixRectangle(rectangle *rect);
matrix2d  sg_Geometry_IdentityMatrix();
rectangle sg_Geometry_InsetRectangle(const rectangle *rect, int32_t insetAmount);
rectangle sg_Geometry_Intersection(const rectangle *rect1, const rectangle *rect2);
vector sg_Geometry_InvertVector(const vector *v);
vector sg_Geometry_LimitVector(const vector *v, float limit);
vector sg_Geometry_LineAsVector(const line_segment *line);
bool sg_Geometry_LineCircleHit(const circle *c, const vector *velocity, const lines_array lines, line_segment *found, int32_t lines_len);
line_segment sg_Geometry_LineFrom(float x1, float y1, float x2, float y2);
line_segment sg_Geometry_LineFromPointToPoint(const point2d *pt1, const point2d *pt2);
line_segment sg_Geometry_LineFromVector(const vector *mv);
line_segment sg_Geometry_LineFromVectorWithStartPoint(const point2d *pt, const vector *mv);
line_segment sg_Geometry_LineFromVectorWithStartXY(float x, float y, const vector *mv);
bool sg_Geometry_LineIntersectionPoint(const line_segment *line1, const line_segment *line2, point2d *pt);
bool sg_Geometry_LineIntersectsCircle(const line_segment *l, const circle *c);
bool sg_Geometry_LineIntersectsLines(const line_segment *line, const lines_array lines, int32_t lines_len);
bool sg_Geometry_LineIntersectsRect(const line_segment *line, const rectangle *rect);
float sg_Geometry_LineMagnitudeSq(float x1, float y1, float x2, float y2);
float sg_Geometry_LineMagnitudeSqFromLine(const line_segment *line);
point2d sg_Geometry_LineMidPoint(const line_segment *line);
vector sg_Geometry_LineNormal(const line_segment *line);
bool sg_Geometry_LineSegmentsIntersect(const line_segment *line1, const line_segment *line2);
void sg_Geometry_LineToString(const line_segment *ln, char *result);
void sg_Geometry_LinesFromRect(const rectangle *rect, lines_array result, int32_t result_len);
void sg_Geometry_LinesFromTriangle(const triangle  *tri, lines_array result, int32_t result_len);
bool sg_Geometry_LinesRectIntersect(const lines_array lines, const rectangle *r, int32_t lines_len);
matrix2d  sg_Geometry_MatrixMultiply(const matrix2d  *m1, const matrix2d  *m2);
vector sg_Geometry_MatrixMultiplyVector(const matrix2d  *m, const vector *v);
void sg_Geometry_MatrixToString(const matrix2d  *m, char *result);
point2d sg_Geometry_PointAdd(const point2d *pt1, const point2d *pt2);
point2d sg_Geometry_PointAt(float x, float y);
point2d sg_Geometry_PointAtStartWithOffset(const point2d *startPoint, const vector *offset);
bool sg_Geometry_PointInCircle(const point2d *pt, const circle *c);
bool sg_Geometry_PointInCirclePt(const point2d *pt, float x, float y, float radius);
bool sg_Geometry_PointInRect(const point2d *pt, const rectangle *rect);
bool sg_Geometry_PointInRectXY(const point2d *pt, float x, float y, float w, float h);
bool sg_Geometry_PointInTriangle(const point2d *pt, const triangle  *tri);
float sg_Geometry_PointLineDistance(const point2d *pt, const line_segment *line);
bool sg_Geometry_PointOnLine(const point2d *pt, const line_segment *line);
bool sg_Geometry_PointOnLineXYXY(const point2d *pt, float x, float y, float endX, float endY);
bool sg_Geometry_PointOnPoint(const point2d *pt1, const point2d *pt2);
float sg_Geometry_PointPointDistance(const point2d *pt1, const point2d *pt2);
void sg_Geometry_PointToString(const point2d *pt, char *result);
bool sg_Geometry_PointXYInCircle(float ptX, float ptY, float cX, float cY, float radius);
bool sg_Geometry_PointXYInRect(float x, float y, const rectangle *rect);
bool sg_Geometry_PointXYInRectXY(float ptX, float ptY, float x, float y, float w, float h);
float sg_Geometry_PointXYLineDistance(float x, float y, const line_segment *line);
void sg_Geometry_PointsFromLine(const line_segment *line, point2d *result, int32_t result_len);
void sg_Geometry_PointsFromRect(const rectangle *rect, point2d *result, int32_t result_len);
point2d sg_Geometry_RandomScreenPoint();
float sg_Geometry_RayCircleIntersectDistance(const point2d *ray_origin, const vector *ray_heading, const circle *c);
bool sg_Geometry_RayIntersectionPoint(const point2d *fromPt, const vector *heading, const line_segment *line, point2d *pt);
rectangle sg_Geometry_RectangleAfterMove(const rectangle *rect, const vector *mv);
rectangle sg_Geometry_RectangleAtPoint(const point2d *pt, int32_t width, int32_t height);
float sg_Geometry_RectangleBottom(const rectangle *rect);
point2d sg_Geometry_RectangleBottomLeft(const rectangle *rect);
point2d sg_Geometry_RectangleBottomRight(const rectangle *rect);
point2d sg_Geometry_RectangleCenter(const rectangle *rect);
point2d sg_Geometry_RectangleCenterBottom(const rectangle *rect);
point2d sg_Geometry_RectangleCenterLeft(const rectangle *rect);
point2d sg_Geometry_RectangleCenterRight(const rectangle *rect);
point2d sg_Geometry_RectangleCenterTop(const rectangle *rect);
rectangle sg_Geometry_RectangleForPoints(const point2d *pt1, const point2d *pt2);
rectangle sg_Geometry_RectangleFrom(float x, float y, int32_t w, int32_t h);
rectangle sg_Geometry_RectangleFromCircle(const circle *c);
rectangle sg_Geometry_RectangleFromLine(const line_segment *line);
rectangle sg_Geometry_RectangleFromLines(const lines_array lines, int32_t lines_len);
rectangle sg_Geometry_RectangleFromTriangle(const triangle  *tri);
float sg_Geometry_RectangleLeft(const rectangle *rect);
rectangle sg_Geometry_RectangleOffset(const rectangle *rect, const vector *vec);
float sg_Geometry_RectangleRight(const rectangle *rect);
void sg_Geometry_RectangleToString(const rectangle *rect, char *result);
float sg_Geometry_RectangleTop(const rectangle *rect);
point2d sg_Geometry_RectangleTopLeft(const rectangle *rect);
point2d sg_Geometry_RectangleTopRight(const rectangle *rect);
bool sg_Geometry_RectanglesIntersect(const rectangle *rect1, const rectangle *rect2);
matrix2d  sg_Geometry_RotationMatrix(float deg);
matrix2d  sg_Geometry_ScaleMatrix(float scale);
matrix2d  sg_Geometry_ScaleMatrixByPoint(const point2d *scale);
matrix2d  sg_Geometry_ScaleRotateTranslateMatrix(const point2d *scale, float deg, const point2d *translate);
float sg_Geometry_Sine(float angle);
vector sg_Geometry_SubtractVectors(const vector *v1, const vector *v2);
float sg_Geometry_Tangent(float angle);
bool sg_Geometry_TangentPoints(const point2d *fromPt, const circle *c, point2d *p1, point2d *p2);
matrix2d  sg_Geometry_TranslationMatrix(float dx, float dy);
matrix2d  sg_Geometry_TranslationMatrixPt(const point2d *pt);
point2d sg_Geometry_TriangleBarycenter(const triangle  *tri);
triangle  sg_Geometry_TriangleFrom(float ax, float ay, float bx, float by, float cx, float cy);
triangle  sg_Geometry_TriangleFromPoints(const point2d *a, const point2d *b, const point2d *c);
bool sg_Geometry_TriangleRectangleIntersect(const triangle  *tri, const rectangle *rect);
void sg_Geometry_TriangleToString(const triangle  *tri, char *result);
bool sg_Geometry_TrianglesRectangleIntersect(const triangle_array tri, const rectangle *rect, int32_t tri_len);
vector sg_Geometry_UnitVector(const vector *v);
float sg_Geometry_VectorAngle(const vector *v);
vector sg_Geometry_VectorFromAngle(float angle, float magnitude);
vector sg_Geometry_VectorFromPointPtToRectangle(const point2d *pt, const rectangle *rect);
vector sg_Geometry_VectorFromPointToRect(float x, float y, float rectX, float rectY, int32_t rectWidth, int32_t rectHeight);
vector sg_Geometry_VectorFromPointToRectangle(float x, float y, const rectangle *rect);
vector sg_Geometry_VectorFromPoints(const point2d *p1, const point2d *p2);
bool sg_Geometry_VectorInRect(const vector *v, const rectangle *rect);
bool sg_Geometry_VectorInRectXY(const vector *v, float x, float y, float w, float h);
bool sg_Geometry_VectorIsZero(const vector *v);
float sg_Geometry_VectorMagnitude(const vector *v);
float sg_Geometry_VectorMagnitudeSq(const vector *v);
vector sg_Geometry_VectorMultiply(const vector *v, float s);
vector sg_Geometry_VectorNormal(const vector *v);
vector sg_Geometry_VectorOutOfCircleFromCircle(const circle *src, const circle *bounds, const vector *velocity);
vector sg_Geometry_VectorOutOfCircleFromPoint(const point2d *pt, const circle *c, const vector *velocity);
vector sg_Geometry_VectorOutOfRectFromCircle(const circle *c, const rectangle *rect, const vector *velocity);
vector sg_Geometry_VectorOutOfRectFromPoint(const point2d *pt, const rectangle *rect, const vector *velocity);
vector sg_Geometry_VectorOutOfRectFromRect(const rectangle *src, const rectangle *bounds, const vector *velocity);
vector sg_Geometry_VectorOverLinesFromCircle(const circle *c, const lines_array lines, const vector *velocity, int32_t *maxIdx, int32_t lines_len);
vector sg_Geometry_VectorOverLinesFromLines(const lines_array srcLines, const lines_array boundLines, const vector *velocity, int32_t *maxIdx, int32_t srcLines_len, int32_t boundLines_len);
vector sg_Geometry_VectorTo(float x, float y, bool invertY);
vector sg_Geometry_VectorToPoint(const point2d *p1);
bool sg_Geometry_VectorsEqual(const vector *v1, const vector *v2);
bool sg_Geometry_VectorsNotEqual(const vector *v1, const vector *v2);
void sg_Geometry_WidestPoints(const circle *c, const vector *along, point2d *pt1, point2d *pt2);
unsigned char sg_Graphics_BlueOf(color c);
float sg_Graphics_BrightnessOf(color c);
void sg_Graphics_ChangeScreenSize(int32_t width, int32_t height);
void sg_Graphics_ClearScreen();
void sg_Graphics_ClearScreenTo(color toColor);
color sg_Graphics_ColorAliceBlue();
color sg_Graphics_ColorAntiqueWhite();
color sg_Graphics_ColorAqua();
color sg_Graphics_ColorAquamarine();
color sg_Graphics_ColorAzure();
color sg_Graphics_ColorBeige();
color sg_Graphics_ColorBisque();
color sg_Graphics_ColorBlack();
color sg_Graphics_ColorBlanchedAlmond();
color sg_Graphics_ColorBlue();
color sg_Graphics_ColorBlueViolet();
color sg_Graphics_ColorBrightGreen();
color sg_Graphics_ColorBrown();
color sg_Graphics_ColorBurlyWood();
color sg_Graphics_ColorCadetBlue();
color sg_Graphics_ColorChartreuse();
color sg_Graphics_ColorChocolate();
void sg_Graphics_ColorComponents(color c, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
color sg_Graphics_ColorCoral();
color sg_Graphics_ColorCornflowerBlue();
color sg_Graphics_ColorCornsilk();
color sg_Graphics_ColorCrimson();
color sg_Graphics_ColorCyan();
color sg_Graphics_ColorDarkBlue();
color sg_Graphics_ColorDarkCyan();
color sg_Graphics_ColorDarkGoldenrod();
color sg_Graphics_ColorDarkGray();
color sg_Graphics_ColorDarkGreen();
color sg_Graphics_ColorDarkKhaki();
color sg_Graphics_ColorDarkMagenta();
color sg_Graphics_ColorDarkOliveGreen();
color sg_Graphics_ColorDarkOrange();
color sg_Graphics_ColorDarkOrchid();
color sg_Graphics_ColorDarkRed();
color sg_Graphics_ColorDarkSalmon();
color sg_Graphics_ColorDarkSeaGreen();
color sg_Graphics_ColorDarkSlateBlue();
color sg_Graphics_ColorDarkSlateGray();
color sg_Graphics_ColorDarkTurquoise();
color sg_Graphics_ColorDarkViolet();
color sg_Graphics_ColorDeepPink();
color sg_Graphics_ColorDeepSkyBlue();
color sg_Graphics_ColorDimGray();
color sg_Graphics_ColorDodgerBlue();
color sg_Graphics_ColorFirebrick();
color sg_Graphics_ColorFloralWhite();
color sg_Graphics_ColorForestGreen();
color sg_Graphics_ColorFromBitmap(bitmap bmp, color apiColor);
color sg_Graphics_ColorFuchsia();
color sg_Graphics_ColorGainsboro();
color sg_Graphics_ColorGhostWhite();
color sg_Graphics_ColorGold();
color sg_Graphics_ColorGoldenrod();
color sg_Graphics_ColorGray();
color sg_Graphics_ColorGreen();
color sg_Graphics_ColorGreenYellow();
color sg_Graphics_ColorGrey();
color sg_Graphics_ColorHoneydew();
color sg_Graphics_ColorHotPink();
color sg_Graphics_ColorIndianRed();
color sg_Graphics_ColorIndigo();
color sg_Graphics_ColorIvory();
color sg_Graphics_ColorKhaki();
color sg_Graphics_ColorLavender();
color sg_Graphics_ColorLavenderBlush();
color sg_Graphics_ColorLawnGreen();
color sg_Graphics_ColorLemonChiffon();
color sg_Graphics_ColorLightBlue();
color sg_Graphics_ColorLightCoral();
color sg_Graphics_ColorLightCyan();
color sg_Graphics_ColorLightGoldenrodYellow();
color sg_Graphics_ColorLightGray();
color sg_Graphics_ColorLightGreen();
color sg_Graphics_ColorLightGrey();
color sg_Graphics_ColorLightPink();
color sg_Graphics_ColorLightSalmon();
color sg_Graphics_ColorLightSeaGreen();
color sg_Graphics_ColorLightSkyBlue();
color sg_Graphics_ColorLightSlateGray();
color sg_Graphics_ColorLightSteelBlue();
color sg_Graphics_ColorLightYellow();
color sg_Graphics_ColorLime();
color sg_Graphics_ColorLimeGreen();
color sg_Graphics_ColorLinen();
color sg_Graphics_ColorMagenta();
color sg_Graphics_ColorMaroon();
color sg_Graphics_ColorMediumAquamarine();
color sg_Graphics_ColorMediumBlue();
color sg_Graphics_ColorMediumOrchid();
color sg_Graphics_ColorMediumPurple();
color sg_Graphics_ColorMediumSeaGreen();
color sg_Graphics_ColorMediumSlateBlue();
color sg_Graphics_ColorMediumSpringGreen();
color sg_Graphics_ColorMediumTurquoise();
color sg_Graphics_ColorMediumVioletRed();
color sg_Graphics_ColorMidnightBlue();
color sg_Graphics_ColorMintCream();
color sg_Graphics_ColorMistyRose();
color sg_Graphics_ColorMoccasin();
color sg_Graphics_ColorNavajoWhite();
color sg_Graphics_ColorNavy();
color sg_Graphics_ColorOldLace();
color sg_Graphics_ColorOlive();
color sg_Graphics_ColorOliveDrab();
color sg_Graphics_ColorOrange();
color sg_Graphics_ColorOrangeRed();
color sg_Graphics_ColorOrchid();
color sg_Graphics_ColorPaleGoldenrod();
color sg_Graphics_ColorPaleGreen();
color sg_Graphics_ColorPaleTurquoise();
color sg_Graphics_ColorPaleVioletRed();
color sg_Graphics_ColorPapayaWhip();
color sg_Graphics_ColorPeachPuff();
color sg_Graphics_ColorPeru();
color sg_Graphics_ColorPink();
color sg_Graphics_ColorPlum();
color sg_Graphics_ColorPowderBlue();
color sg_Graphics_ColorPurple();
color sg_Graphics_ColorRed();
color sg_Graphics_ColorRosyBrown();
color sg_Graphics_ColorRoyalBlue();
color sg_Graphics_ColorSaddleBrown();
color sg_Graphics_ColorSalmon();
color sg_Graphics_ColorSandyBrown();
color sg_Graphics_ColorSeaGreen();
color sg_Graphics_ColorSeaShell();
color sg_Graphics_ColorSienna();
color sg_Graphics_ColorSilver();
color sg_Graphics_ColorSkyBlue();
color sg_Graphics_ColorSlateBlue();
color sg_Graphics_ColorSlateGray();
color sg_Graphics_ColorSnow();
color sg_Graphics_ColorSpringGreen();
color sg_Graphics_ColorSteelBlue();
color sg_Graphics_ColorSwinburneRed();
color sg_Graphics_ColorTan();
color sg_Graphics_ColorTeal();
color sg_Graphics_ColorThistle();
void sg_Graphics_ColorToString(color c, char *result);
color sg_Graphics_ColorTomato();
color sg_Graphics_ColorTransparent();
color sg_Graphics_ColorTurquoise();
color sg_Graphics_ColorViolet();
color sg_Graphics_ColorWheat();
color sg_Graphics_ColorWhite();
color sg_Graphics_ColorWhiteSmoke();
color sg_Graphics_ColorYellow();
color sg_Graphics_ColorYellowGreen();
rectangle sg_Graphics_CurrentBmpClip(bitmap bmp);
rectangle sg_Graphics_CurrentScreenClip();
void sg_Graphics_DrawHorizontalLine(color clr, float y, float x1, float x2);
void sg_Graphics_DrawHorizontalLineOnScreen(color clr, int32_t y, int32_t x1, int32_t x2);
void sg_Graphics_DrawHorizontalLineOnto(bitmap dest, color clr, int32_t y, int32_t x1, int32_t x2);
void sg_Graphics_DrawLine(color clr, float xPosStart, float yPosStart, float xPosEnd, float yPosEnd);
void sg_Graphics_DrawLineOnScreen(color clr, int32_t xPosStart, int32_t yPosStart, int32_t xPosEnd, int32_t yPosEnd);
void sg_Graphics_DrawLineOnto(bitmap dest, color clr, int32_t xPosStart, int32_t yPosStart, int32_t xPosEnd, int32_t yPosEnd);
void sg_Graphics_DrawLinePts(color clr, const point2d *startPt, const point2d *endPt);
void sg_Graphics_DrawLinePtsOnScreen(color clr, const point2d *startPt, const point2d *endPt);
void sg_Graphics_DrawLinePtsOnto(bitmap dest, color clr, const point2d *startPt, const point2d *endPt);
void sg_Graphics_DrawLineSegment(color clr, const line_segment *line);
void sg_Graphics_DrawLineSegmentOnScreen(color clr, const line_segment *line);
void sg_Graphics_DrawLineSegmentOnto(bitmap dest, color clr, const line_segment *line);
void sg_Graphics_DrawLineSegments(color clr, const lines_array lines, int32_t lines_len);
void sg_Graphics_DrawOrFillCircle(color clr, bool filled, float xc, float yc, int32_t radius);
void sg_Graphics_DrawOrFillCircleAtPoint(color clr, bool filled, const point2d *position, int32_t radius);
void sg_Graphics_DrawOrFillCircleAtPointOnScreen(color clr, bool filled, const point2d *position, int32_t radius);
void sg_Graphics_DrawOrFillCircleAtPointOnto(bitmap dest, color clr, bool filled, const point2d *point, int32_t radius);
void sg_Graphics_DrawOrFillCircleOnScreen(color clr, bool filled, float xc, float yc, int32_t radius);
void sg_Graphics_DrawOrFillCircleOnto(bitmap dest, color clr, bool filled, float xc, float yc, int32_t radius);
void sg_Graphics_DrawOrFillCircleStruct(color clr, bool filled, const circle *c);
void sg_Graphics_DrawOrFillCircleStructOnScreen(color clr, bool filled, const circle *c);
void sg_Graphics_DrawOrFillCircleStructOnto(bitmap dest, color clr, bool filled, const circle *c);
void sg_Graphics_DrawOrFillEllipse(color clr, bool filled, float xPos, float yPos, int32_t width, int32_t height);
void sg_Graphics_DrawOrFillEllipseInRect(color clr, bool filled, const rectangle *source);
void sg_Graphics_DrawOrFillEllipseInRectOnScreen(color clr, bool filled, const rectangle *source);
void sg_Graphics_DrawOrFillEllipseInRectOnto(bitmap dest, color clr, bool filled, const rectangle *source);
void sg_Graphics_DrawOrFillEllipseOnScreen(color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height);
void sg_Graphics_DrawOrFillEllipseOnto(bitmap dest, color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height);
void sg_Graphics_DrawOrFillRectangle(color clr, bool filled, float xPos, float yPos, int32_t width, int32_t height);
void sg_Graphics_DrawOrFillRectangleOnScreen(color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height);
void sg_Graphics_DrawOrFillRectangleOnto(bitmap dest, color clr, bool filled, int32_t xPos, int32_t yPos, int32_t width, int32_t height);
void sg_Graphics_DrawOrFillRectangleStruct(color clr, bool filled, const rectangle *source);
void sg_Graphics_DrawOrFillRectangleStructOnScreen(color clr, bool filled, const rectangle *source);
void sg_Graphics_DrawOrFillRectangleStructOnto(bitmap dest, color clr, bool filled, const rectangle *source);
void sg_Graphics_DrawOrFillTriangleStruct(color clr, bool filled, const triangle  *tri);
void sg_Graphics_DrawOrFillTriangleStructOnScreen(color clr, bool filled, const triangle  *tri);
void sg_Graphics_DrawOrFillTriangleStructOnto(bitmap dest, color clr, bool filled, const triangle  *tri);
void sg_Graphics_DrawPixel(color clr, float x, float y);
void sg_Graphics_DrawPixelAtPoint(color clr, const point2d *position);
void sg_Graphics_DrawPixelAtPointOnScreen(color clr, const point2d *position);
void sg_Graphics_DrawPixelAtPointOnto(bitmap dest, color clr, const point2d *position);
void sg_Graphics_DrawPixelOnScreen(color clr, int32_t x, int32_t y);
void sg_Graphics_DrawPixelOnto(bitmap dest, color clr, int32_t x, int32_t y);
void sg_Graphics_DrawThickLine(color clr, float xPosStart, float yPosStart, float xPosEnd, float yPosEnd, float width);
void sg_Graphics_DrawTriangle(color clr, float x1, float y1, float x2, float y2, float x3, float y3);
void sg_Graphics_DrawTriangleOnScreen(color clr, float x1, float y1, float x2, float y2, float x3, float y3);
void sg_Graphics_DrawTriangleOnto(bitmap dest, color clr, float x1, float y1, float x2, float y2, float x3, float y3);
void sg_Graphics_DrawVerticalLine(color clr, float x, float y1, float y2);
void sg_Graphics_DrawVerticalLineOnScreen(color clr, int32_t x, int32_t y1, int32_t y2);
void sg_Graphics_DrawVerticalLineOnto(bitmap dest, color clr, int32_t x, int32_t y1, int32_t y2);
void sg_Graphics_FillTriangle(color clr, float x1, float y1, float x2, float y2, float x3, float y3);
void sg_Graphics_FillTriangleOnScreen(color clr, float x1, float y1, float x2, float y2, float x3, float y3);
void sg_Graphics_FillTriangleOnto(bitmap dest, color clr, float x1, float y1, float x2, float y2, float x3, float y3);
color sg_Graphics_GetPixel(bitmap bmp, int32_t x, int32_t y);
color sg_Graphics_GetPixelFromScreen(int32_t x, int32_t y);
unsigned char sg_Graphics_GreenOf(color c);
color sg_Graphics_HSBColor(float hue, float saturation, float brightness);
void sg_Graphics_HSBValuesOf(color c, float *h, float *s, float *b);
float sg_Graphics_HueOf(color c);
void sg_Graphics_OpenGraphicsWindow(const char *caption, int32_t width, int32_t height);
void sg_Graphics_PopClipBmp(bitmap bmp);
void sg_Graphics_PopClipScreen();
void sg_Graphics_PushClipRect(const rectangle *r);
void sg_Graphics_PushClipRectForBitmap(bitmap bmp, const rectangle *r);
void sg_Graphics_PushClipXY(int32_t x, int32_t y, int32_t w, int32_t h);
void sg_Graphics_PutPixel(bitmap bmp, color value, int32_t x, int32_t y);
color sg_Graphics_RGBAColor(unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha);
color sg_Graphics_RGBAFloatColor(float r, float g, float b, float a);
color sg_Graphics_RGBFloatColor(float r, float g, float b);
color sg_Graphics_RandomColor();
color sg_Graphics_RandomRGBColor(unsigned char alpha);
unsigned char sg_Graphics_RedOf(color c);
void sg_Graphics_RefreshScreen();
void sg_Graphics_RefreshScreenRestrictFPS(uint32_t TargetFPS);
void sg_Graphics_ResetClip();
void sg_Graphics_ResetClipForBitmap(bitmap bmp);
float sg_Graphics_SaturationOf(color c);
int32_t sg_Graphics_ScreenHeight();
int32_t sg_Graphics_ScreenWidth();
void sg_Graphics_SetBmpClip(bitmap bmp, const rectangle *r);
void sg_Graphics_SetBmpClipXY(bitmap bmp, int32_t x, int32_t y, int32_t w, int32_t h);
void sg_Graphics_SetClip(const rectangle *r);
void sg_Graphics_SetClipXY(int32_t x, int32_t y, int32_t w, int32_t h);
void sg_Graphics_SetIcon(const char *filename);
void sg_Graphics_ShowSwinGameSplashScreen();
void sg_Graphics_TakeScreenshot(const char *basename);
void sg_Graphics_ToggleFullScreen();
void sg_Graphics_ToggleWindowBorder();
unsigned char sg_Graphics_TransparencyOf(color c);
circle sg_Images_BitmapCellCircle(bitmap bmp, const point2d *pt);
circle sg_Images_BitmapCellCircleXY(bitmap bmp, int32_t x, int32_t y);
int32_t sg_Images_BitmapCellColumns(bitmap bmp);
int32_t sg_Images_BitmapCellCount(bitmap bmp);
int32_t sg_Images_BitmapCellHeight(bitmap bmp);
bitmap_cell sg_Images_BitmapCellOf(bitmap bmp, int32_t cell);
rectangle sg_Images_BitmapCellRectangle(const point2d *pt, bitmap bmp);
rectangle sg_Images_BitmapCellRectangleAtOrigin(bitmap bmp);
rectangle sg_Images_BitmapCellRectangleXY(float x, float y, bitmap bmp);
int32_t sg_Images_BitmapCellRows(bitmap bmp);
int32_t sg_Images_BitmapCellWidth(bitmap bmp);
circle sg_Images_BitmapCircle(bitmap bmp, const point2d *pt);
circle sg_Images_BitmapCircleXY(bitmap bmp, int32_t x, int32_t y);
void sg_Images_BitmapFilename(bitmap bmp, char *result);
int32_t sg_Images_BitmapHeight(bitmap bmp);
int32_t sg_Images_BitmapHeightForCell(const bitmap_cell *bmp);
void sg_Images_BitmapName(bitmap bmp, char *result);
bitmap sg_Images_BitmapNamed(const char *name);
rectangle sg_Images_BitmapRectAtOrigin(bitmap bmp);
rectangle sg_Images_BitmapRectXY(float x, float y, bitmap bmp);
rectangle sg_Images_BitmapRectangleOfCell(bitmap src, int32_t cell);
void sg_Images_BitmapSetCellDetails(bitmap bmp, int32_t width, int32_t height, int32_t columns, int32_t rows, int32_t count);
int32_t sg_Images_BitmapWidth(bitmap bmp);
int32_t sg_Images_BitmapWidthForCell(const bitmap_cell *bmp);
bool sg_Images_BitmapsInterchangable(bitmap bmp1, bitmap bmp2);
void sg_Images_ClearSurface(bitmap dest, color toColor);
void sg_Images_ClearSurfaceToBlack(bitmap dest);
bitmap sg_Images_CombineIntoGrid(const bitmap *bitmaps, int32_t cols, int32_t bitmaps_len);
bitmap sg_Images_CreateBitmap(int32_t width, int32_t height);
bitmap sg_Images_CreateBitmapNamed(const char *name, int32_t width, int32_t height);
void sg_Images_DrawBitmap(bitmap src, float x, float y);
void sg_Images_DrawBitmapAtPoint(bitmap src, const point2d *position);
void sg_Images_DrawBitmapAtPointOnScreen(bitmap src, const point2d *position);
void sg_Images_DrawBitmapAtPointOnto(bitmap dest, bitmap src, const point2d *position);
void sg_Images_DrawBitmapCell(const bitmap_cell *src, float x, float y);
void sg_Images_DrawBitmapCellAtPoint(const bitmap_cell *src, const point2d *position);
void sg_Images_DrawBitmapCellAtPointOnScreen(const bitmap_cell *src, const point2d *position);
void sg_Images_DrawBitmapCellAtPointOnto(bitmap dest, const bitmap_cell *src, const point2d *position);
void sg_Images_DrawBitmapCellOnScreen(const bitmap_cell *src, int32_t x, int32_t y);
void sg_Images_DrawBitmapCellOnto(bitmap dest, const bitmap_cell *src, int32_t x, int32_t y);
void sg_Images_DrawBitmapNamed(const char *name, float x, float y);
void sg_Images_DrawBitmapNamedAtPoint(const char *name, const point2d *position);
void sg_Images_DrawBitmapOnScreen(bitmap src, int32_t x, int32_t y);
void sg_Images_DrawBitmapOnto(bitmap dest, bitmap src, int32_t x, int32_t y);
void sg_Images_DrawBitmapPart(bitmap src, int32_t srcX, int32_t srcY, int32_t srcW, int32_t srcH, float x, float y);
void sg_Images_DrawBitmapPartFromRect(bitmap src, const rectangle *source, float x, float y);
void sg_Images_DrawBitmapPartFromRectAtPoint(bitmap src, const rectangle *source, const point2d *position);
void sg_Images_DrawBitmapPartFromRectAtPointOnScreen(bitmap src, const rectangle *source, const point2d *position);
void sg_Images_DrawBitmapPartFromRectAtPointOnto(bitmap dest, bitmap src, const rectangle *source, const point2d *position);
void sg_Images_DrawBitmapPartFromRectOnScreen(bitmap src, const rectangle *source, int32_t x, int32_t y);
void sg_Images_DrawBitmapPartFromRectOnto(bitmap dest, bitmap src, const rectangle *source, int32_t x, int32_t y);
void sg_Images_DrawBitmapPartOnScreen(bitmap src, int32_t srcX, int32_t srcY, int32_t srcW, int32_t srcH, int32_t x, int32_t y);
void sg_Images_DrawBitmapPartOnto(bitmap dest, bitmap src, int32_t srcX, int32_t srcY, int32_t srcW, int32_t srcH, int32_t x, int32_t y);
void sg_Images_DrawCell(bitmap src, int32_t cell, const point2d *position);
void sg_Images_DrawCellOnScreen(bitmap src, int32_t cell, const point2d *position);
void sg_Images_DrawCellOnScreenXY(bitmap src, int32_t cell, float x, float y);
void sg_Images_DrawCellOnto(bitmap dest, bitmap src, int32_t cell, const point2d *position);
void sg_Images_DrawCellOntoXY(bitmap dest, bitmap src, int32_t cell, float x, float y);
void sg_Images_DrawCellXY(bitmap src, int32_t cell, float x, float y);
void sg_Images_FreeBitmap(bitmap *bitmapToFree);
bool sg_Images_HasBitmap(const char *name);
bitmap sg_Images_LoadBitmap(const char *filename);
bitmap sg_Images_LoadBitmapNamed(const char *name, const char *filename);
bitmap sg_Images_LoadBitmapWithTransparentColor(const char *filename, bool transparent, color transparentColor);
bitmap sg_Images_LoadTransparentBitmapNamed(const char *name, const char *filename, color transparentColor);
void sg_Images_MakeOpaque(bitmap bmp);
void sg_Images_MakeTransparent(bitmap bmp);
void sg_Images_OptimiseBitmap(bitmap surface);
bool sg_Images_PixelDrawnAtPoint(bitmap bmp, int32_t x, int32_t y);
void sg_Images_ReleaseAllBitmaps();
void sg_Images_ReleaseBitmap(const char *name);
bitmap sg_Images_RotateScaleBitmap(bitmap src, float degRot, float scale);
bool sg_Images_SameBitmapCell(const bitmap_cell *bmp1, const bitmap_cell *bmp2);
void sg_Images_SaveBitmap(bitmap src, const char *filepath);
void sg_Images_SaveToPNG(bitmap bmp, const char *filename);
void sg_Images_SetOpacity(bitmap bmp, float pct);
void sg_Images_SetTransparentColor(bitmap src, color clr);
void sg_Images_SetupBitmapForCollisions(bitmap src);
bool sg_Input_AnyKeyPressed();
float sg_Input_DeviceMovedInXAxis();
float sg_Input_DeviceMovedInYAxis();
float sg_Input_DeviceMovedInZAxis();
void sg_Input_EndReadingText(char *result);
void sg_Input_FingersOnScreen(finger_array result, int32_t result_len);
float sg_Input_GetAccelerometerThreshold();
void sg_Input_HideKeyboard();
void sg_Input_HideMouse();
bool sg_Input_KeyDown(key_code key);
void sg_Input_KeyName(key_code key, char *result);
bool sg_Input_KeyReleased(key_code key);
bool sg_Input_KeyTyped(key_code key);
bool sg_Input_KeyUp(key_code key);
bool sg_Input_KeyboardShown();
bool sg_Input_MouseClicked(mouse_button button);
bool sg_Input_MouseDown(mouse_button button);
vector sg_Input_MouseMovement();
point2d sg_Input_MousePosition();
vector sg_Input_MousePositionAsVector();
bool sg_Input_MouseShown();
bool sg_Input_MouseUp(mouse_button button);
float sg_Input_MouseX();
float sg_Input_MouseY();
void sg_Input_MoveMouse(unsigned char x, unsigned char y);
void sg_Input_MoveMouseToPoint(const point2d *point);
int32_t sg_Input_NumberOfFingersOnScreen();
void sg_Input_ProcessEvents();
bool sg_Input_ReadingText();
bool sg_Input_ScreenTouched();
void sg_Input_SetAccelerometerThreshold(float value);
void sg_Input_SetMouseVisible(bool show);
void sg_Input_ShowKeyboard();
void sg_Input_ShowMouse();
void sg_Input_StartReadingText(color textColor, int32_t maxLength, font theFont, int32_t x, int32_t y);
void sg_Input_StartReadingTextWithText(const char *text, color textColor, int32_t maxLength, font theFont, int32_t x, int32_t y);
void sg_Input_StartReadingTextWithTextAndColorInArea(const char *text, color textColor, color backGroundColor, int32_t maxLength, font theFont, const rectangle *area);
void sg_Input_StartReadingTextWithTextAtPt(const char *text, color textColor, int32_t maxLength, font theFont, const point2d *pt);
void sg_Input_StartReadingTextWithTextInArea(const char *text, color textColor, int32_t maxLength, font theFont, const rectangle *area);
void sg_Input_StartReadingTextWithinArea(color textColor, int32_t maxLength, font theFont, const rectangle *area);
bool sg_Input_TextEntryCancelled();
void sg_Input_TextReadAsASCII(char *result);
void sg_Input_ToggleKeyboard();
bool sg_Input_WindowCloseRequested();
int32_t sg_Networking_AcceptTCPConnection();
void sg_Networking_BroadcastTCPMessage(const char *aMsg);
void sg_Networking_BroadcastUDPMessage(const char *aMsg);
void sg_Networking_ClearMessageQueue(connection aConnection);
void sg_Networking_CloseAllConnections();
void sg_Networking_CloseAllSockets();
void sg_Networking_CloseAllTCPHostSockets();
void sg_Networking_CloseAllUDPSockets();
bool sg_Networking_CloseConnection(connection *aConnection);
bool sg_Networking_CloseTCPHostSocket(int32_t aPort);
bool sg_Networking_CloseUDPSocket(int32_t aPort);
int32_t sg_Networking_ConnectionCount();
uint32_t sg_Networking_ConnectionIP(connection aConnection);
int32_t sg_Networking_ConnectionPort(connection aConnection);
int32_t sg_Networking_ConnectionQueueSize();
connection sg_Networking_CreateTCPConnection(const char *aIP, int32_t aPort);
bool sg_Networking_CreateTCPHost(int32_t aPort);
connection sg_Networking_CreateUDPConnection(const char *aDestIP, int32_t aDestPort, int32_t aInPort);
int32_t sg_Networking_CreateUDPHost(int32_t aPort);
void sg_Networking_DecToHex(uint32_t aDec, char *result);
void sg_Networking_EnqueueMessage(const char *aMsg, connection aConnection);
void sg_Networking_EnqueueNewConnection(connection aConnection);
connection sg_Networking_FetchConnection();
void sg_Networking_FreeConnection(connection *aConnection);
void sg_Networking_HexStrToIPv4(const char *aHex, char *result);
void sg_Networking_HexToDecString(const char *aHex, char *result);
uint32_t sg_Networking_IPv4ToDec(const char *aIP);
int32_t sg_Networking_MessageCount(connection aConnection);
void sg_Networking_MyIP(char *result);
void sg_Networking_ReadLastMessage(connection aConnection, char *result);
void sg_Networking_ReadMessage(connection aConnection, char *result);
void sg_Networking_ReleaseAllConnections();
connection sg_Networking_RetreiveConnection(int32_t aConnectionAt);
connection sg_Networking_SendTCPMessage(const char *aMsg, connection aConnection);
bool sg_Networking_SendUDPMessage(const char *aMsg, connection aConnection);
bool sg_Networking_TCPMessageReceived();
bool sg_Networking_UDPMessageReceived();
bool sg_Physics_BitmapAtPointsCollision(bitmap bmp1, const point2d *pt1, bitmap bmp2, const point2d *pt2);
bool sg_Physics_BitmapCollision(bitmap bmp1, int32_t x1, int32_t y1, bitmap bmp2, int32_t x2, int32_t y2);
bool sg_Physics_BitmapPartAtPtRectCollision(bitmap bmp, const point2d *pt, const rectangle *part, const rectangle *rect);
bool sg_Physics_BitmapPartPointCollision(bitmap bmp, int32_t x, int32_t y, const rectangle *part, float ptX, float ptY);
bool sg_Physics_BitmapPartPointXYCollision(bitmap bmp, int32_t x, int32_t y, const rectangle *part, const point2d *pt);
bool sg_Physics_BitmapPartRectCollision(bitmap bmp, int32_t x, int32_t y, const rectangle *part, const rectangle *rect);
bool sg_Physics_BitmapPointCollision(bitmap bmp, int32_t x, int32_t y, float ptX, float ptY);
bool sg_Physics_BitmapPointPtCollision(bitmap bmp, int32_t x, int32_t y, const point2d *pt);
bool sg_Physics_BitmapRectCollision(bitmap bmp, int32_t x, int32_t y, int32_t rectX, int32_t rectY, int32_t rectWidth, int32_t rectHeight);
bool sg_Physics_BitmapRectangleCollision(bitmap bmp, int32_t x, int32_t y, const rectangle *rect);
bool sg_Physics_BitmapsPartsCollision(bitmap bmp1, const point2d *pt1, const rectangle *part1, bitmap bmp2, const point2d *pt2, const rectangle *part2);
bool sg_Physics_CellBitmapCollision(bitmap bmp1, int32_t cell, int32_t x1, int32_t y1, bitmap bmp2, int32_t x2, int32_t y2);
bool sg_Physics_CellBitmapCollisionAtPt(bitmap bmp1, int32_t cell, const point2d *pt1, bitmap bmp2, const point2d *pt2);
bool sg_Physics_CellBitmapPartCollision(bitmap bmp1, int32_t cell, int32_t x1, int32_t y1, bitmap bmp2, int32_t x2, int32_t y2, const rectangle *part);
bool sg_Physics_CellBitmapPartCollisionAtPt(bitmap bmp1, int32_t cell, const point2d *pt1, bitmap bmp2, const point2d *pt2, const rectangle *part);
bool sg_Physics_CellCollision(bitmap bmp1, int32_t cell1, int32_t x1, int32_t y1, bitmap bmp2, int32_t cell2, int32_t x2, int32_t y2);
bool sg_Physics_CellCollisionAtPt(bitmap bmp1, int32_t cell1, const point2d *pt1, bitmap bmp2, int32_t cell2, const point2d *pt2);
bool sg_Physics_CellRectCollision(bitmap bmp, int32_t cell, int32_t x, int32_t y, const rectangle *rect);
bool sg_Physics_CellRectCollisionAtPt(bitmap bmp, int32_t cell, const point2d *pt, const rectangle *rect);
bool sg_Physics_CircleCircleCollision(const circle *c1, const circle *c2);
bool sg_Physics_CircleLinesCollision(const circle *c, const lines_array lines, int32_t lines_len);
bool sg_Physics_CircleRectCollision(const circle *c, const rectangle *rect);
bool sg_Physics_CircleTriangleCollision(const circle *c, const triangle  *tri);
void sg_Physics_CollideCircleCircle(sprite s, const circle *c);
void sg_Physics_CollideCircleLine(sprite s, const line_segment *line);
void sg_Physics_CollideCircleLines(sprite s, const lines_array lines, int32_t lines_len);
void sg_Physics_CollideCircleRectangle(sprite s, const rectangle *rect);
void sg_Physics_CollideCircles(sprite s1, sprite s2);
bool sg_Physics_RectLineCollision(const rectangle *rect, const line_segment *line);
collision_side sg_Physics_SideForCollisionTest(const vector *velocity);
bool sg_Physics_SpriteBitmapAtPointCollision(sprite s, bitmap bmp, const point2d *pt);
bool sg_Physics_SpriteBitmapCollision(sprite s, bitmap bmp, float x, float y);
bool sg_Physics_SpriteCircleLineCollision(sprite s, const line_segment *line);
bool sg_Physics_SpriteCollision(sprite s1, sprite s2);
bool sg_Physics_SpriteRectCollision(sprite s, float x, float y, int32_t width, int32_t height);
bool sg_Physics_SpriteRectLineCollision(sprite s, const line_segment *line);
bool sg_Physics_SpriteRectangleCollision(sprite s, const rectangle *r);
bool sg_Physics_TriangleLineCollision(const triangle  *tri, const line_segment *ln);
void sg_Resources_AppPath(char *result);
void sg_Resources_FilenameToResource(const char *name, resource_kind kind, char *result);
bool sg_Resources_HasResourceBundle(const char *name);
void sg_Resources_LoadResourceBundle(const char *name, bool showProgress);
void sg_Resources_LoadResourceBundleNamed(const char *name, const char *filename, bool showProgress);
void sg_Resources_PathToOtherResource(const char *filename, char *result);
void sg_Resources_PathToOtherResourceWithBase(const char *path, const char *filename, char *result);
void sg_Resources_PathToResource(const char *filename, resource_kind kind, char *result);
void sg_Resources_PathToResourceWithBase(const char *path, const char *filename, resource_kind kind, char *result);
void sg_Resources_PathToResourceWithSubPaths(const char *filename, resource_kind kind, const string_array subPaths, char *result, int32_t subPaths_len);
void sg_Resources_PathToResourseInSubdir(const char *filename, const char *subdir, char *result);
void sg_Resources_PathToResourseKindInSubdir(const char *filename, resource_kind kind, const char *subdir, char *result);
void sg_Resources_RegisterFreeNotifier(free_notifier fn);
void sg_Resources_ReleaseAllResources();
void sg_Resources_ReleaseResourceBundle(const char *name);
void sg_Resources_SetAppPath(const char *path);
void sg_Resources_SetAppPathWithExe(const char *path, bool withExe);
void sg_Sprites_CallForAllSprites(sprite_function fn);
void sg_Sprites_CallOnSpriteEvent(sprite_event_handler handler);
point2d sg_Sprites_CenterPoint(sprite s);
sprite sg_Sprites_CreateBasicSprite(bitmap layer);
sprite sg_Sprites_CreateBasicSpriteNamed(const char *name, bitmap layer);
sprite sg_Sprites_CreateBasicSpritePt(bitmap layer, point2d pt);
sprite sg_Sprites_CreateBasicSpriteXY(bitmap layer, float x, float y);
sprite sg_Sprites_CreateLayeredSprite(const bitmap *layers, int32_t layers_len);
sprite sg_Sprites_CreateLayeredSpriteNamed(const char *name, const bitmap *layers, int32_t layers_len);
sprite sg_Sprites_CreateLayeredSpriteWithAnimationScript(const bitmap *layers, animation_script ani, int32_t layers_len);
sprite sg_Sprites_CreateLayeredSpriteWithAnimationScriptNamed(const char *name, const bitmap *layers, animation_script ani, int32_t layers_len);
sprite sg_Sprites_CreateLayeredSpriteWithLayerNames(const bitmap *layers, const string_array layerNames, int32_t layers_len, int32_t layerNames_len);
sprite sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScript(const bitmap *layers, const string_array layerNames, animation_script ani, int32_t layers_len, int32_t layerNames_len);
sprite sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScriptNamed(const char *name, const bitmap *layers, const string_array layerNames, animation_script ani, int32_t layers_len, int32_t layerNames_len);
sprite sg_Sprites_CreateLayeredSpriteWithLayerNamesNamed(const char *name, const bitmap *layers, const string_array layerNames, int32_t layers_len, int32_t layerNames_len);
void sg_Sprites_CreateSpritePack(const char *name);
sprite sg_Sprites_CreateSpriteWithAnimation(bitmap layer, animation_script ani);
sprite sg_Sprites_CreateSpriteWithAnimationNamed(const char *name, bitmap layer, animation_script ani);
sprite sg_Sprites_CreateSpriteWithAnimationPt(bitmap layer, animation_script ani, point2d pt);
sprite sg_Sprites_CreateSpriteWithAnimationXY(bitmap layer, animation_script ani, float x, float y);
sprite sg_Sprites_CreateSpriteWithBitmapAndAnimationName(const char *bitmapName, const char *animationName);
sprite sg_Sprites_CreateSpriteWithLayer(bitmap layer, const char *layerName);
sprite sg_Sprites_CreateSpriteWithLayerAndAnimation(bitmap layer, const char *layerName, animation_script ani);
sprite sg_Sprites_CreateSpriteWithLayerAndAnimationNamed(const char *name, bitmap layer, const char *layerName, animation_script ani);
sprite sg_Sprites_CreateSpriteWithLayerNamed(const char *name, bitmap layer, const char *layerName);
void sg_Sprites_CurrentSpritePack(char *result);
void sg_Sprites_DrawAllSprites();
void sg_Sprites_DrawSpriteOffsetPoint(sprite s, const point2d *position);
void sg_Sprites_DrawSpriteOffsetXY(sprite s, int32_t xOffset, int32_t yOffset);
void sg_Sprites_FreeSprite(sprite *s);
bool sg_Sprites_HasSprite(const char *name);
bool sg_Sprites_HasSpritePack(const char *name);
void sg_Sprites_MoveSpritePct(sprite s, float pct);
void sg_Sprites_MoveSpriteTo(sprite s, int32_t x, int32_t y);
void sg_Sprites_MoveSpriteVecPct(sprite s, const vector *distance, float pct);
void sg_Sprites_ReleaseAllSprites();
void sg_Sprites_ReleaseSprite(const char *name);
void sg_Sprites_ReplayAnimationWithSound(sprite s, bool withSound);
void sg_Sprites_SelectSpritePack(const char *name);
int32_t sg_Sprites_SpriteAddLayer(sprite s, bitmap newLayer, const char *layerName);
void sg_Sprites_SpriteAddToVelocity(sprite s, const vector *value);
void sg_Sprites_SpriteAddValue(sprite s, const char *name);
void sg_Sprites_SpriteAddValueWithInitialValue(sprite s, const char *name, float initVal);
bool sg_Sprites_SpriteAnimationHasEnded(sprite s);
void sg_Sprites_SpriteAnimationName(sprite s, char *result);
void sg_Sprites_SpriteBringLayerForward(sprite s, int32_t visibleLayer);
void sg_Sprites_SpriteBringLayerToFront(sprite s, int32_t visibleLayer);
void sg_Sprites_SpriteCallOnEvent(sprite s, sprite_event_handler handler);
circle sg_Sprites_SpriteCircle(sprite s);
bitmap sg_Sprites_SpriteCollisionBitmap(sprite s);
circle sg_Sprites_SpriteCollisionCircle(sprite s);
collision_test_kind sg_Sprites_SpriteCollisionKind(sprite s);
rectangle sg_Sprites_SpriteCollisionRectangle(sprite s);
int32_t sg_Sprites_SpriteCurrentCell(sprite s);
rectangle sg_Sprites_SpriteCurrentCellRectangle(sprite s);
float sg_Sprites_SpriteDX(sprite s);
float sg_Sprites_SpriteDY(sprite s);
float sg_Sprites_SpriteHeading(sprite s);
int32_t sg_Sprites_SpriteHeight(sprite s);
void sg_Sprites_SpriteHideLayer(sprite s, int32_t id);
void sg_Sprites_SpriteHideLayerNamed(sprite s, const char *name);
bitmap sg_Sprites_SpriteLayerAtIdx(sprite s, int32_t idx);
circle sg_Sprites_SpriteLayerCircle(sprite s, int32_t idx);
int32_t sg_Sprites_SpriteLayerCount(sprite s);
int32_t sg_Sprites_SpriteLayerHeight(sprite s, int32_t idx);
int32_t sg_Sprites_SpriteLayerIndex(sprite s, const char *name);
void sg_Sprites_SpriteLayerName(sprite s, int32_t idx, char *result);
bitmap sg_Sprites_SpriteLayerNamed(sprite s, const char *name);
circle sg_Sprites_SpriteLayerNamedCircle(sprite s, const char *name);
int32_t sg_Sprites_SpriteLayerNamedHeight(sprite s, const char *name);
rectangle sg_Sprites_SpriteLayerNamedRectangle(sprite s, const char *name);
int32_t sg_Sprites_SpriteLayerNamedWidth(sprite s, const char *name);
point2d sg_Sprites_SpriteLayerOffset(sprite s, int32_t idx);
point2d sg_Sprites_SpriteLayerOffsetNamed(sprite s, const char *name);
void sg_Sprites_SpriteLayerOffsets(sprite s, point2d *result, int32_t result_len);
rectangle sg_Sprites_SpriteLayerRectangle(sprite s, int32_t idx);
int32_t sg_Sprites_SpriteLayerWidth(sprite s, int32_t idx);
void sg_Sprites_SpriteLayers(sprite s, bitmap *result, int32_t result_len);
float sg_Sprites_SpriteMass(sprite s);
void sg_Sprites_SpriteMoveTo(sprite s, const point2d *pt, int32_t takingSeconds);
void sg_Sprites_SpriteName(sprite sprt, char *result);
sprite sg_Sprites_SpriteNamed(const char *name);
bool sg_Sprites_SpriteOffscreen(sprite s);
bool sg_Sprites_SpriteOnScreenAt(sprite s, int32_t x, int32_t y);
bool sg_Sprites_SpriteOnScreenAtPoint(sprite s, const point2d *pt);
point2d sg_Sprites_SpritePosition(sprite s);
void sg_Sprites_SpriteReplayAnimation(sprite s);
float sg_Sprites_SpriteRotation(sprite s);
float sg_Sprites_SpriteScale(sprite s);
rectangle sg_Sprites_SpriteScreenRectangle(sprite s);
void sg_Sprites_SpriteSendLayerBackward(sprite s, int32_t visibleLayer);
void sg_Sprites_SpriteSendLayerToBack(sprite s, int32_t visibleLayer);
void sg_Sprites_SpriteSetCollisionBitmap(sprite s, bitmap bmp);
void sg_Sprites_SpriteSetCollisionKind(sprite s, collision_test_kind value);
void sg_Sprites_SpriteSetDX(sprite s, float value);
void sg_Sprites_SpriteSetDY(sprite s, float value);
void sg_Sprites_SpriteSetHeading(sprite s, float value);
void sg_Sprites_SpriteSetLayerOffset(sprite s, int32_t idx, const point2d *value);
void sg_Sprites_SpriteSetLayerOffsetNamed(sprite s, const char *name, const point2d *value);
void sg_Sprites_SpriteSetLayerOffsets(sprite s, const point2d *values, int32_t values_len);
void sg_Sprites_SpriteSetMass(sprite s, float value);
void sg_Sprites_SpriteSetPosition(sprite s, const point2d *value);
void sg_Sprites_SpriteSetRotation(sprite s, float value);
void sg_Sprites_SpriteSetScale(sprite s, float value);
void sg_Sprites_SpriteSetSpeed(sprite s, float value);
void sg_Sprites_SpriteSetValue(sprite s, int32_t idx, float val);
void sg_Sprites_SpriteSetValueNamed(sprite s, const char *name, float val);
void sg_Sprites_SpriteSetVelocity(sprite s, const vector *value);
void sg_Sprites_SpriteSetX(sprite s, float value);
void sg_Sprites_SpriteSetY(sprite s, float value);
int32_t sg_Sprites_SpriteShowLayer(sprite s, int32_t id);
int32_t sg_Sprites_SpriteShowLayerNamed(sprite s, const char *name);
float sg_Sprites_SpriteSpeed(sprite s);
void sg_Sprites_SpriteStartAnimation(sprite s, int32_t idx);
void sg_Sprites_SpriteStartAnimationNamed(sprite s, const char *named);
void sg_Sprites_SpriteStartAnimationNamedWithSound(sprite s, const char *named, bool withSound);
void sg_Sprites_SpriteStartAnimationWithSound(sprite s, int32_t idx, bool withSound);
void sg_Sprites_SpriteStopCallingOnEvent(sprite s, sprite_event_handler handler);
void sg_Sprites_SpriteToggleLayerNamedVisible(sprite s, const char *name);
void sg_Sprites_SpriteToggleLayerVisible(sprite s, int32_t id);
float sg_Sprites_SpriteValue(sprite s, int32_t index);
int32_t sg_Sprites_SpriteValueCount(sprite s);
float sg_Sprites_SpriteValueNamed(sprite s, const char *name);
void sg_Sprites_SpriteValueNames(sprite s, string_array result, int32_t result_len);
vector sg_Sprites_SpriteVelocity(sprite s);
int32_t sg_Sprites_SpriteVisibleIndexOfLayer(sprite s, int32_t id);
int32_t sg_Sprites_SpriteVisibleIndexOfLayerNamed(sprite s, const char *name);
int32_t sg_Sprites_SpriteVisibleLayer(sprite s, int32_t idx);
int32_t sg_Sprites_SpriteVisibleLayerCount(sprite s);
void sg_Sprites_SpriteVisibleLayerIds(sprite s, int32_t *result, int32_t result_len);
int32_t sg_Sprites_SpriteWidth(sprite s);
float sg_Sprites_SpriteX(sprite s);
float sg_Sprites_SpriteY(sprite s);
void sg_Sprites_StopCallingOnSpriteEvent(sprite_event_handler handler);
void sg_Sprites_UpdateAllSprites();
void sg_Sprites_UpdateAllSpritesPct(float pct);
void sg_Sprites_UpdateSpriteAnimationPctWithSound(sprite s, float pct, bool withSound);
void sg_Sprites_UpdateSpritePctWithSound(sprite s, float pct, bool withSound);
vector sg_Sprites_VectorFromCenterSpriteToPoint(sprite s, const point2d *pt);
vector sg_Sprites_VectorFromTo(sprite s1, sprite s2);
void sg_Text_DrawFramerate(int32_t x, int32_t y, font font);
void sg_Text_DrawFramerateFontNamed(int32_t x, int32_t y, const char *name);
void sg_Text_DrawFramerateFontNamedSize(int32_t x, int32_t y, const char *name, int32_t size);
void sg_Text_DrawFramerateWithSimpleFont(int32_t x, int32_t y);
void sg_Text_DrawSimpleText(const char *theText, color textColor, float x, float y);
void sg_Text_DrawSimpleTextOnBitmap(bitmap dest, const char *theText, color textColor, float x, float y);
void sg_Text_DrawSimpleTextOnScreen(const char *theText, color textColor, float x, float y);
void sg_Text_DrawSimpleTextPt(const char *theText, color textColor, const point2d *pt);
void sg_Text_DrawText(const char *theText, color textColor, font theFont, float x, float y);
void sg_Text_DrawTextAtPoint(const char *theText, color textColor, font theFont, const point2d *pt);
void sg_Text_DrawTextAtPointWithFontNamed(const char *theText, color textColor, const char *name, const point2d *pt);
void sg_Text_DrawTextAtPointWithFontNamedAndSize(const char *theText, color textColor, const char *name, int32_t size, const point2d *pt);
void sg_Text_DrawTextLines(const char *theText, color textColor, color backColor, font theFont, font_alignment align, float x, float y, int32_t w, int32_t h);
void sg_Text_DrawTextLinesInRect(const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle *withinRect);
void sg_Text_DrawTextLinesInRectOnBitmap(bitmap dest, const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle *withinRect);
void sg_Text_DrawTextLinesInRectOnBitmapWithFontNamed(bitmap dest, const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle *withinRect);
void sg_Text_DrawTextLinesInRectOnBitmapWithFontNamedAndSize(bitmap dest, const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle *withinRect);
void sg_Text_DrawTextLinesInRectOnScreen(const char *theText, color textColor, color backColor, font theFont, font_alignment align, const rectangle *withinRect);
void sg_Text_DrawTextLinesInRectOnScreenWithFontNamed(const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle *withinRect);
void sg_Text_DrawTextLinesInRectOnScreenWithFontNamedAndSize(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle *withinRect);
void sg_Text_DrawTextLinesInRectWithFontNamed(const char *theText, color textColor, color backColor, const char *name, font_alignment align, const rectangle *withinRect);
void sg_Text_DrawTextLinesInRectWithFontNamedAndSize(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, const rectangle *withinRect);
void sg_Text_DrawTextLinesOnBitmap(bitmap dest, const char *theText, color textColor, color backColor, font theFont, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h);
void sg_Text_DrawTextLinesOnBitmapWithFontNamed(bitmap dest, const char *theText, color textColor, color backColor, const char *name, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h);
void sg_Text_DrawTextLinesOnBitmapWithFontNamedAndSize(bitmap dest, const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h);
void sg_Text_DrawTextLinesOnScreen(const char *theText, color textColor, color backColor, font theFont, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h);
void sg_Text_DrawTextLinesOnScreenWithFontNamed(const char *theText, color textColor, color backColor, const char *name, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h);
void sg_Text_DrawTextLinesOnScreenWithFontNamedWithSize(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, int32_t x, int32_t y, int32_t w, int32_t h);
void sg_Text_DrawTextLinesWithFontNamed(const char *theText, color textColor, color backColor, const char *name, font_alignment align, float x, float y, int32_t w, int32_t h);
void sg_Text_DrawTextLinesWithFontNamedAndSize(const char *theText, color textColor, color backColor, const char *name, int32_t size, font_alignment align, float x, float y, int32_t w, int32_t h);
void sg_Text_DrawTextOnBitmap(bitmap dest, const char *theText, color textColor, font theFont, int32_t x, int32_t y);
void sg_Text_DrawTextOnBitmapAtPoint(bitmap dest, const char *theText, color textColor, font theFont, const point2d *pt);
void sg_Text_DrawTextOnBitmapAtPointWithFontNamed(bitmap dest, const char *theText, color textColor, const char *name, const point2d *pt);
void sg_Text_DrawTextOnBitmapAtPointWithFontNamedAndSize(bitmap dest, const char *theText, color textColor, const char *name, int32_t size, const point2d *pt);
void sg_Text_DrawTextOnBitmapWithFontNamed(bitmap dest, const char *theText, color textColor, const char *name, int32_t x, int32_t y);
void sg_Text_DrawTextOnBitmapWithFontNamedAndSize(bitmap dest, const char *theText, color textColor, const char *name, int32_t size, int32_t x, int32_t y);
void sg_Text_DrawTextOnScreen(const char *theText, color textColor, font theFont, int32_t x, int32_t y);
void sg_Text_DrawTextOnScreenAtPoint(const char *theText, color textColor, font theFont, const point2d *pt);
void sg_Text_DrawTextOnScreenAtPointWithFontNamed(const char *theText, color textColor, const char *name, const point2d *pt);
void sg_Text_DrawTextOnScreenAtPointWithFontNamedAndSize(const char *theText, color textColor, const char *name, int32_t size, const point2d *pt);
void sg_Text_DrawTextOnScreenWithFontNamed(const char *theText, color textColor, const char *name, int32_t x, int32_t y);
void sg_Text_DrawTextOnScreenWithFontNamedAndSize(const char *theText, color textColor, const char *name, int32_t size, int32_t x, int32_t y);
bitmap sg_Text_DrawTextToBitmapAtPointWithFontNamedAndSize(font font, const char *str, color clrFg, color backgroundColor);
void sg_Text_DrawTextWithFontNamed(const char *theText, color textColor, const char *name, float x, float y);
void sg_Text_DrawTextWithFontNamedSize(const char *theText, color textColor, const char *name, int32_t size, float x, float y);
font_style sg_Text_FontFontStyle(font font);
void sg_Text_FontNameFor(const char *fontName, int32_t size, char *result);
font sg_Text_FontNamed(const char *name);
font sg_Text_FontNamedWithSize(const char *name, int32_t size);
void sg_Text_FontSetStyle(font font, font_style value);
void sg_Text_FreeFont(font *fontToFree);
bool sg_Text_HasFont(const char *name);
font sg_Text_LoadFont(const char *fontName, int32_t size);
font sg_Text_LoadFontNamed(const char *name, const char *filename, int32_t size);
void sg_Text_ReleaseAllFonts();
void sg_Text_ReleaseFont(const char *name);
font_alignment sg_Text_TextAlignmentFrom(const char *str);
int32_t sg_Text_TextHeight(font theFont, const char *theText);
int32_t sg_Text_TextWidth(font theFont, const char *theText);
timer sg_Timers_CreateTimer();
timer sg_Timers_CreateTimerNamed(const char *name);
void sg_Timers_FreeTimer(timer *toFree);
void sg_Timers_PauseTimer(timer toPause);
void sg_Timers_PauseTimerNamed(const char *name);
void sg_Timers_ReleaseAllTimers();
void sg_Timers_ReleaseTimer(const char *name);
void sg_Timers_ResetTimer(timer tmr);
void sg_Timers_ResetTimerNamed(const char *name);
void sg_Timers_ResumeTimer(timer toUnpause);
void sg_Timers_ResumeTimerNamed(const char *name);
void sg_Timers_StartTimer(timer toStart);
void sg_Timers_StartTimerNamed(const char *name);
void sg_Timers_StopTimer(timer toStop);
void sg_Timers_StopTimerNamed(const char *name);
timer sg_Timers_TimerNamed(const char *name);
uint32_t sg_Timers_TimerTicks(timer toGet);
uint32_t sg_Timers_TimerTicksNamed(const char *name);
void sg_UserInterface_ActivatePanel(panel p);
region sg_UserInterface_ActiveRadioButton(guiradio_group grp);
int32_t sg_UserInterface_ActiveRadioButtonIndex(guiradio_group RadioGroup);
int32_t sg_UserInterface_ActiveRadioButtonIndexFromID(const char *id);
int32_t sg_UserInterface_ActiveRadioButtonIndexOnPanel(panel pnl, const char *id);
region sg_UserInterface_ActiveRadioButtonOnPanelWithId(panel pnl, const char *id);
region sg_UserInterface_ActiveRadioButtonWithID(const char *id);
panel sg_UserInterface_ActiveTextBoxParent();
int32_t sg_UserInterface_ActiveTextIndex();
void sg_UserInterface_AddItemByBitmap(guilist lst, bitmap img);
void sg_UserInterface_AddItemByText(guilist lst, const char *text);
void sg_UserInterface_AddItemOnPanelWithIdByText(panel pnl, const char *id, const char *text);
void sg_UserInterface_AddItemWithIdByBitmap(const char *id, bitmap img);
void sg_UserInterface_AddItemWithIdByText(const char *id, const char *text);
bool sg_UserInterface_ButtonClicked(region r);
bool sg_UserInterface_ButtonNamedClicked(const char *name);
void sg_UserInterface_CheckBoxSetStateWithId(const char *id, bool val);
guicheckbox sg_UserInterface_CheckboxFromRegion(region r);
void sg_UserInterface_CheckboxSetState(guicheckbox chk, bool val);
void sg_UserInterface_CheckboxSetStateFromRegion(region r, bool val);
void sg_UserInterface_CheckboxSetStateOnPanel(panel pnl, const char *id, bool val);
bool sg_UserInterface_CheckboxState(const char *s);
bool sg_UserInterface_CheckboxStateFromCheckbox(guicheckbox chk);
bool sg_UserInterface_CheckboxStateFromRegion(region r);
bool sg_UserInterface_CheckboxStateOnPanel(panel p, const char *s);
void sg_UserInterface_DeactivatePanel(panel p);
void sg_UserInterface_DeactivateTextBox();
bool sg_UserInterface_DialogCancelled();
bool sg_UserInterface_DialogComplete();
void sg_UserInterface_DialogPath(char *result);
void sg_UserInterface_DialogSetPath(const char *fullname);
void sg_UserInterface_DrawGUIAsVectors(bool b);
void sg_UserInterface_DrawInterface();
void sg_UserInterface_FinishReadingText();
void sg_UserInterface_FreePanel(panel *pnl);
bool sg_UserInterface_GUIClicked();
void sg_UserInterface_GUISetActiveTextbox(guitextbox t);
void sg_UserInterface_GUISetActiveTextboxFromRegion(region r);
void sg_UserInterface_GUISetActiveTextboxNamed(const char *name);
void sg_UserInterface_GUISetBackgroundColor(color c);
void sg_UserInterface_GUISetBackgroundColorInactive(color c);
void sg_UserInterface_GUISetForegroundColor(color c);
void sg_UserInterface_GUISetForegroundColorInactive(color c);
guitextbox sg_UserInterface_GUITextBoxOfTextEntered();
bool sg_UserInterface_GUITextEntryComplete();
region sg_UserInterface_GlobalRegionWithID(const char *ID);
bool sg_UserInterface_HasPanel(const char *name);
void sg_UserInterface_HidePanel(panel p);
void sg_UserInterface_HidePanelNamed(const char *name);
int32_t sg_UserInterface_IndexOfLastUpdatedTextBox();
bool sg_UserInterface_IsDragging();
font_alignment sg_UserInterface_LabelAlignementFromRegion(region r);
font_alignment sg_UserInterface_LabelAlignment(guilabel lbl);
font sg_UserInterface_LabelFont(guilabel l);
guilabel sg_UserInterface_LabelFromRegion(region r);
font sg_UserInterface_LabelFromRegionGetFont(region r);
void sg_UserInterface_LabelFromRegionSetText(region r, const char *newString);
void sg_UserInterface_LabelOnPanelWithIdSetText(panel pnl, const char *id, const char *newString);
void sg_UserInterface_LabelSetFont(guilabel l, const char *s);
void sg_UserInterface_LabelSetText(guilabel lb, const char *newString);
void sg_UserInterface_LabelText(guilabel lb, char *result);
void sg_UserInterface_LabelTextFromRegion(region r, char *result);
void sg_UserInterface_LabelTextOnPanelWithId(panel pnl, const char *id, char *result);
void sg_UserInterface_LabelTextWithId(const char *id, char *result);
void sg_UserInterface_LabelWithIdSetText(const char *id, const char *newString);
int32_t sg_UserInterface_ListActiveItemIndex(guilist lst);
int32_t sg_UserInterface_ListActiveItemIndexFromRegion(region r);
int32_t sg_UserInterface_ListActiveItemIndexOnPanelWithId(panel pnl, const char *id);
int32_t sg_UserInterface_ListActiveItemIndexWithId(const char *id);
void sg_UserInterface_ListActiveItemText(guilist list, char *result);
void sg_UserInterface_ListActiveItemTextFromRegion(region r, char *result);
void sg_UserInterface_ListActiveItemTextOnPanelWithId(panel pnl, const char *ID, char *result);
void sg_UserInterface_ListAddBitmapAndTextItem(guilist lst, bitmap img, const char *text);
void sg_UserInterface_ListAddBitmapAndTextItemFromRegion(region r, bitmap img, const char *text);
void sg_UserInterface_ListAddItemBitmap(panel pnl, const char *id, bitmap img);
void sg_UserInterface_ListAddItemByBitmapFromRegion(region r, bitmap img);
void sg_UserInterface_ListAddItemByTextFromRegion(region r, const char *text);
void sg_UserInterface_ListAddItemWithCell(guilist lst, const bitmap_cell *img);
void sg_UserInterface_ListAddItemWithCellAndText(guilist lst, const bitmap_cell *img, const char *text);
void sg_UserInterface_ListAddItemWithCellAndTextFromRegion(region r, const bitmap_cell *img, const char *text);
void sg_UserInterface_ListAddItemWithCellFromRegion(region r, const bitmap_cell *img);
int32_t sg_UserInterface_ListBitmapCellIndex(guilist lst, const bitmap_cell *img);
int32_t sg_UserInterface_ListBitmapIndex(guilist lst, bitmap img);
void sg_UserInterface_ListClearItems(guilist lst);
void sg_UserInterface_ListClearItemsFromRegion(region r);
void sg_UserInterface_ListClearItemsGivenPanelWithId(panel pnl, const char *id);
font sg_UserInterface_ListFont(guilist lst);
font_alignment sg_UserInterface_ListFontAlignment(guilist lst);
font_alignment sg_UserInterface_ListFontAlignmentFromRegion(region r);
font sg_UserInterface_ListFontFromRegion(region r);
guilist sg_UserInterface_ListFromRegion(region r);
int32_t sg_UserInterface_ListItemCount(guilist lst);
int32_t sg_UserInterface_ListItemCountFromRegion(region r);
int32_t sg_UserInterface_ListItemCountOnPanelWithId(panel pnl, const char *id);
int32_t sg_UserInterface_ListItemCountWithId(const char *id);
void sg_UserInterface_ListItemText(guilist lst, int32_t idx, char *result);
void sg_UserInterface_ListItemTextFromId(const char *id, int32_t idx, char *result);
void sg_UserInterface_ListItemTextFromRegion(region r, int32_t idx, char *result);
void sg_UserInterface_ListItemTextOnPanelWithId(panel pnl, const char *id, int32_t idx, char *result);
int32_t sg_UserInterface_ListLargestStartIndex(guilist lst);
void sg_UserInterface_ListOnPanelWithIdAddBitmapWithTextItem(panel pnl, const char *id, bitmap img, const char *text);
void sg_UserInterface_ListOnPanelWithIdAddItemWithCell(panel pnl, const char *id, const bitmap_cell *img);
void sg_UserInterface_ListOnPanelWithIdAddItemWithCellAndText(panel pnl, const char *id, const bitmap_cell *img, const char *text);
void sg_UserInterface_ListRemoveActiveItemFromId(const char *id);
void sg_UserInterface_ListRemoveActiveItemFromRegion(region r);
void sg_UserInterface_ListRemoveActiveItemOnPanelWithId(panel pnl, const char *id);
void sg_UserInterface_ListRemoveItem(guilist lst, int32_t idx);
void sg_UserInterface_ListRemoveItemFromWithId(const char *id, int32_t idx);
void sg_UserInterface_ListRemoveItemOnPanelWithId(panel pnl, const char *id, int32_t idx);
int32_t sg_UserInterface_ListScrollIncrement(guilist lst);
void sg_UserInterface_ListSet(panel pnl, const char *id, int32_t idx);
void sg_UserInterface_ListSetActiveItemIndex(guilist lst, int32_t idx);
void sg_UserInterface_ListSetActiveItemIndexWithId(const char *id, int32_t idx);
void sg_UserInterface_ListSetFont(guilist lst, font f);
void sg_UserInterface_ListSetFontAlignment(guilist lst, font_alignment align);
void sg_UserInterface_ListSetFontAlignmentFromRegion(region r, font_alignment align);
void sg_UserInterface_ListSetStartingAt(guilist lst, int32_t idx);
void sg_UserInterface_ListSetStartingAtFromRegion(region r, int32_t idx);
int32_t sg_UserInterface_ListStartAt(guilist lst);
int32_t sg_UserInterface_ListStartingAtFromRegion(region r);
int32_t sg_UserInterface_ListTextIndex(guilist lst, const char *value);
void sg_UserInterface_ListWithIDAddBitmapWithTextItem(const char *id, bitmap img, const char *text);
void sg_UserInterface_ListWithIdActiveItemText(const char *ID, char *result);
void sg_UserInterface_ListWithIdAddItemWithCell(const char *id, const bitmap_cell *img);
void sg_UserInterface_ListWithIdAddItemWithCellAndText(const char *id, const bitmap_cell *img, const char *text);
void sg_UserInterface_ListclearItemsWithId(const char *id);
panel sg_UserInterface_LoadPanel(const char *filename);
panel sg_UserInterface_LoadPanelNamed(const char *name, const char *filename);
void sg_UserInterface_MovePanel(panel p, const vector *mvmt);
panel sg_UserInterface_NewPanel(const char *pnlName);
bool sg_UserInterface_PanelActive(panel pnl);
panel sg_UserInterface_PanelAtPoint(const point2d *pt);
panel sg_UserInterface_PanelClicked();
bool sg_UserInterface_PanelDraggable(panel p);
void sg_UserInterface_PanelFilename(panel pnl, char *result);
int32_t sg_UserInterface_PanelHeight(panel p);
bool sg_UserInterface_PanelIsDragging(panel pnl);
void sg_UserInterface_PanelName(panel pnl, char *result);
panel sg_UserInterface_PanelNamed(const char *name);
int32_t sg_UserInterface_PanelNamedHeight(const char *name);
int32_t sg_UserInterface_PanelNamedWidth(const char *name);
void sg_UserInterface_PanelSetDraggable(panel p, bool b);
bool sg_UserInterface_PanelVisible(panel p);
bool sg_UserInterface_PanelWasClicked(panel pnl);
int32_t sg_UserInterface_PanelWidth(panel p);
float sg_UserInterface_PanelX(panel p);
float sg_UserInterface_PanelY(panel p);
bool sg_UserInterface_PointInRegion(const point2d *pt, panel p);
bool sg_UserInterface_PointInRegionWithKind(const point2d *pt, panel p, guielement_kind kind);
guiradio_group sg_UserInterface_RadioGroupFromId(const char *id);
guiradio_group sg_UserInterface_RadioGroupFromRegion(region r);
guiradio_group sg_UserInterface_RadioGroupOnPanelWidthId(panel pnl, const char *id);
bool sg_UserInterface_RegionActive(region forRegion);
region sg_UserInterface_RegionAtPoint(panel p, const point2d *pt);
region sg_UserInterface_RegionClicked();
void sg_UserInterface_RegionClickedID(char *result);
int32_t sg_UserInterface_RegionHeight(region r);
void sg_UserInterface_RegionID(region r, char *result);
region sg_UserInterface_RegionOfLastUpdatedTextBox();
panel sg_UserInterface_RegionPanel(region r);
int32_t sg_UserInterface_RegionWidth(region r);
region sg_UserInterface_RegionWithID(panel pnl, const char *ID);
float sg_UserInterface_RegionX(region r);
float sg_UserInterface_RegionY(region r);
void sg_UserInterface_RegisterEventCallback(region r, guievent_callback callback);
void sg_UserInterface_ReleaseAllPanels();
void sg_UserInterface_ReleasePanel(const char *name);
void sg_UserInterface_SelectRadioButton(region r);
void sg_UserInterface_SelectRadioButtonFromRadioGroupAndIndex(guiradio_group rGroup, int32_t idx);
void sg_UserInterface_SelectRadioButtonFromRadioGroupAndRegion(guiradio_group rGroup, region r);
void sg_UserInterface_SelectRadioButtonOnPanelWithId(panel pnl, const char *id);
void sg_UserInterface_SelectRadioButtonWithID(const char *id);
void sg_UserInterface_SetLabelAlignment(guilabel tb, font_alignment align);
void sg_UserInterface_SetLabelAlignmentFromRegion(region r, font_alignment align);
void sg_UserInterface_SetRegionActive(region forRegion, bool b);
void sg_UserInterface_ShowOpenDialog();
void sg_UserInterface_ShowOpenDialogWithType(file_dialog_select_type select);
void sg_UserInterface_ShowPanel(panel p);
void sg_UserInterface_ShowPanelDialog(panel p);
void sg_UserInterface_ShowPanelNamed(const char *name);
void sg_UserInterface_ShowSaveDialog();
void sg_UserInterface_ShowSaveDialogWithType(file_dialog_select_type select);
font_alignment sg_UserInterface_TextBoxAlignmentFromRegion(region r);
font sg_UserInterface_TextBoxFont(guitextbox tb);
font sg_UserInterface_TextBoxFontFromRegion(region r);
guitextbox sg_UserInterface_TextBoxFromID(const char *id);
void sg_UserInterface_TextBoxSetAlignmentFromRegion(region r, font_alignment align);
void sg_UserInterface_TextBoxText(guitextbox tb, char *result);
font_alignment sg_UserInterface_TextboxAlignment(guitextbox tb);
guitextbox sg_UserInterface_TextboxFromRegion(region r);
void sg_UserInterface_TextboxSetAlignment(guitextbox tb, font_alignment align);
void sg_UserInterface_TextboxSetFont(guitextbox Tb, font f);
void sg_UserInterface_TextboxSetText(guitextbox tb, const char *s);
void sg_UserInterface_TextboxSetTextFromId(const char *id, const char *s);
void sg_UserInterface_TextboxSetTextFromRegion(region r, const char *s);
void sg_UserInterface_TextboxSetTextOnPanelAndId(panel pnl, const char *id, const char *s);
void sg_UserInterface_TextboxSetTextToInt(guitextbox tb, int32_t i);
void sg_UserInterface_TextboxSetTextToIntFromRegion(region r, int32_t i);
void sg_UserInterface_TextboxSetTextToIntOnPanelWithId(panel pnl, const char *id, int32_t i);
void sg_UserInterface_TextboxSetTextToIntWithId(const char *id, int32_t i);
void sg_UserInterface_TextboxSetTextToSingle(guitextbox tb, float single);
void sg_UserInterface_TextboxSetTextToSingleFromId(const char *id, float single);
void sg_UserInterface_TextboxSetTextToSingleFromRegion(region r, float single);
void sg_UserInterface_TextboxSetTextToSingleOnPanel(panel pnl, const char *id, float single);
void sg_UserInterface_TextboxTextFromRegion(region r, char *result);
void sg_UserInterface_TextboxTextOnPanelWithId(panel pnl, const char *id, char *result);
void sg_UserInterface_TextboxTextWithId(const char *id, char *result);
void sg_UserInterface_ToggleActivatePanel(panel p);
void sg_UserInterface_ToggleCheckboxState(guicheckbox c);
void sg_UserInterface_ToggleCheckboxStateFromID(const char *id);
void sg_UserInterface_ToggleCheckboxStateOnPanel(panel pnl, const char *id);
void sg_UserInterface_ToggleRegionActive(region forRegion);
void sg_UserInterface_ToggleShowPanel(panel p);
void sg_UserInterface_UpdateInterface();
void sg_Utils_CalculateFramerate(char *average, char *highest, char *lowest, color *textColor);
void sg_Utils_Delay(uint32_t time);
void sg_Utils_ExceptionMessage(char *result);
bool sg_Utils_ExceptionOccured();
int32_t sg_Utils_GetFramerate();
uint32_t sg_Utils_GetTicks();
float sg_Utils_Rnd();
int32_t sg_Utils_RndUpto(int32_t ubound);
void sg_Utils_SwinGameVersion(char *result);
#ifdef __cplusplus
}
#endif

#endif


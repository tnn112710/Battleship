//
// Generated by SGWrapperGen - DO NOT EDIT!
//
// SwinGame exported library
//


library SGSDK;
  uses SysUtils, Strings, sgTrace, sgShared,
    sgTimers, sgPhysics, sgCharacters, sgAudio, sgImages, sgAnimations, sgSprites, sgUtils, sgInput, sgTypes, sgGraphics, sgGeometry, sgText, sgUserInterface, sgResources, sgCamera, sgNetworking, sgArduino;
  
  type 
    LongintPtr      = ^Longint;
    StringPtr       = ^String;
    SinglePtr       = ^Single;
    Point2DPtr      = ^Point2D;
    LineSegmentPtr  = ^LineSegment;
    BitmapPtr       = ^Bitmap;
    TrianglePtr     = ^Triangle;
    FingerPtr       = ^Finger;
  
  
  // The exception trap is used to ensure that exceptions do not propagate beyond the
  // library boundary.
  procedure TrapException(exc: Exception; fromMethod: String);
  begin
    HasException := true;
    
    if Assigned(exc) then
      ErrorMessage := 'Error from ' + fromMethod + ' - ' + exc.Message
    else
      ErrorMessage := 'Unknown error from ' + fromMethod;
    
    try
        WriteLn(ErrorMessage);
    except
    end;
    
    {$IFDEF TRACE}
      Trace('SGSDK.dll', 'Error', fromMethod, ErrorMessage);
    {$ENDIF}
  end;
  
  // procedure MatrixCopyToPtr(matrix: SinglePtr; const fromMatrix: Matrix2D);
  // var
  //   i, j: Longint;
  // begin
  //   //WriteLn('************************');
  //   for i := 0 to 2 do
  //   begin
  //     //Write('|  ');
  //     for j := 0 to 2 do
  //     begin
  //       //Write(fromMatrix[i,j]:4:2, '  ');
  //       (matrix + (i * 3) + j)^ := fromMatrix[i,j];
  //       //matrix[i,j] := fromMatrix[i,j];
  //     end;
  //     //Writeln('|');
  //   end;
  //   //WriteLn('************************');
  // end;
  // 
  // procedure MatrixCopyFromPtr(var toMatrix: Matrix2D; matrix: SinglePtr);
  // var
  //   i, j: Longint;
  // begin
  //   //WriteLn('************************');
  //   for i := 0 to 2 do
  //   begin
  //     //Write('|  ');
  //     for j := 0 to 2 do
  //     begin
  //       toMatrix[i,j] := (matrix + (i * 3) + j)^;
  //       //toMatrix[i,j] := matrix[i,j];
  //       
  //       //Write(toMatrix[i,j]:4:2, '  ');
  //     end;
  //     //Writeln('|');
  //   end;
  //   //WriteLn('************************');
  // end;
  
  procedure LineCopyFromPtr(data: LineSegmentPtr; len: Longint; out arr: LinesArray);
  var
    i: Longint;
  begin
    if len < 0 then raise Exception.Create('Length of array cannot be negative');

    SetLength(arr, len);

    for i := 0 to len - 1 do
    begin
      arr[i] := (data + i)^;
    end;
  end;
  
  procedure LineCopyToPtr(const arr: LinesArray; len: Longint; data: LineSegmentPtr);
  var
    i: Longint;
  begin
    if len < Length(arr) then raise Exception.Create('Error in array size to call expected length to be ' + IntToStr(len));
    
    for i := Low(arr) to High(arr) do
    begin
      (data + i)^ := arr[i];
    end;
  end;
  
  procedure TriangleCopyFromPtr(data: TrianglePtr; len: Longint; out arr: TriangleArray);
  var
    i: Longint;
  begin
    if len < 0 then raise Exception.Create('Length of array cannot be negative');

    SetLength(arr, len);

    for i := 0 to len - 1 do
    begin
        arr[i] := (data + i)^;
    end;
  end;
  
  procedure TriangleCopyToPtr(const arr: TriangleArray; len: Longint; data: TrianglePtr);
  var
    i: Longint;
  begin
    // len is number of triangles expected
    if len < Length(arr) then raise Exception.Create('Error in array size to call expected length to be ' + IntToStr(len));
    
    for i := Low(arr) to High(arr) do
    begin
        (data + i)^ := arr[i];
    end;
  end;
  
  procedure BmpCopyFromPtr(bmp: BitmapPtr; len: Longint; out arr: BitmapArray);
  var
    i: Longint;
  begin
    if len < 0 then raise Exception.Create('Length of array cannot be negative');

    SetLength(arr, len);

    for i := 0 to len - 1 do
    begin
      arr[i] := (bmp + i)^;
    end;
  end;
  
  procedure BmpCopyToPtr(const arr: BitmapArray; len: Longint; bmp: BitmapPtr);
  var
    i: Longint;
  begin
    if len < Length(arr) then raise Exception.Create('Error in array size to call expected length to be ' + IntToStr(len));
    
    for i := Low(arr) to High(arr) do
    begin
      (bmp + i)^ := arr[i];
    end;
  end;
  
  procedure LongintCopyFromPtr(data: LongintPtr; len: Longint; out arr: LongintArray);
  var
    i: Longint;
  begin
    if len < 0 then raise Exception.Create('Length of array cannot be negative');

    SetLength(arr, len);

    for i := 0 to len - 1 do
    begin
      arr[i] := (data + i)^;
    end;
  end;
  
  procedure LongintCopyToPtr(const arr: LongintArray; len: Longint; data: LongintPtr);
  var
    i: Longint;
  begin
    if len < Length(arr) then raise Exception.Create('Error in array size to call expected length to be ' + IntToStr(len));
    
    for i := Low(arr) to High(arr) do
    begin
      (data + i)^ := arr[i];
    end;
  end;
  
  procedure Point2DCopyFromPtr(data: Point2DPtr; len: Longint; out arr: Point2DArray);
  var
    i: Longint;
  begin
    if len < 0 then raise Exception.Create('Length of array cannot be negative');
    
    SetLength(arr, len);
    
    for i := 0 to len - 1 do
    begin
      arr[i] := (data + i)^;
    end;
  end;
  
  procedure Point2DCopyToPtr(const arr: Point2DArray; len: Longint; data: Point2DPtr);
  var
    i: Longint;
  begin
    if len < Length(arr) then raise Exception.Create('Error in array size to call expected length to be ' + IntToStr(len));
    
    for i := Low(arr) to High(arr) do
    begin
      (data + i)^ := arr[i];
    end;
  end;
  
  procedure FingerCopyToPtr(const arr: FingerArray; len: Longint; data: FingerPtr);
  var
    i: Longint;
  begin
    if len < Length(arr) then raise Exception.Create('Error in array size to call expected length to be ' + IntToStr(len));
    
    for i := Low(arr) to High(arr) do
    begin
      (data + i)^ := arr[i];
    end;
  end;
  
  procedure StringCopyFromPtr(str: StringPtr; len: Longint; out arr: StringArray);
  var
    i: Longint;
  begin
    if len < 0 then raise Exception.Create('Length of array cannot be negative');
    
    SetLength(arr, len);
    
    for i := 0 to len - 1 do
    begin
      StrCopy(PChar(arr[i]), PChar((str + i)^));
    end;
  end;
  
  procedure StringCopyToPtr(const arr: StringArray; len: Longint; str: StringPtr);
  var
    i: Longint;
  begin
    if len < Length(arr) then raise Exception.Create('Error in array size to call expected length to be ' + IntToStr(len));
    
    for i := Low(arr) to High(arr) do
    begin
      StrCopy(PChar((str + i)^), PChar(arr[i]));
    end;
  end;
  
  function sg_Animations_AnimationCurrentCell(anim: Animation): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_AnimationCurrentCell');
    {$ENDIF}
    
    try
      result := sgAnimations.AnimationCurrentCell(anim);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_AnimationCurrentCell');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_AnimationCurrentCell');
    {$ENDIF}
  end;
  

  function sg_Animations_AnimationCurrentVector(anim: Animation): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_AnimationCurrentVector');
    {$ENDIF}
    
    try
      result := sgAnimations.AnimationCurrentVector(anim);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_AnimationCurrentVector');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_AnimationCurrentVector');
    {$ENDIF}
  end;
  

  function sg_Animations_AnimationEnded(anim: Animation): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_AnimationEnded');
    {$ENDIF}
    
    try
      result := sgAnimations.AnimationEnded(anim);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_AnimationEnded');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_AnimationEnded');
    {$ENDIF}
  end;
  

  function sg_Animations_AnimationEnteredFrame(anim: Animation): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_AnimationEnteredFrame');
    {$ENDIF}
    
    try
      result := sgAnimations.AnimationEnteredFrame(anim);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_AnimationEnteredFrame');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_AnimationEnteredFrame');
    {$ENDIF}
  end;
  

  function sg_Animations_AnimationFrameTime(anim: Animation): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_AnimationFrameTime');
    {$ENDIF}
    
    try
      result := sgAnimations.AnimationFrameTime(anim);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_AnimationFrameTime');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_AnimationFrameTime');
    {$ENDIF}
  end;
  

  function sg_Animations_AnimationIndex(temp: AnimationScript; name: PChar): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_AnimationIndex');
    {$ENDIF}
    
    try
      result := sgAnimations.AnimationIndex(temp, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_AnimationIndex');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_AnimationIndex');
    {$ENDIF}
  end;
  

  procedure sg_Animations_AnimationName(temp: Animation; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_AnimationName');
    {$ENDIF}
    
    try
      result_temp := sgAnimations.AnimationName(temp);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_AnimationName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_AnimationName');
    {$ENDIF}
  end;
  

  procedure sg_Animations_AnimationScriptAnimationName(temp: AnimationScript; idx: Longint; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_AnimationScriptAnimationName');
    {$ENDIF}
    
    try
      result_temp := sgAnimations.AnimationName(temp, idx);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_AnimationScriptAnimationName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_AnimationScriptAnimationName');
    {$ENDIF}
  end;
  

  procedure sg_Animations_AnimationScriptName(script: AnimationScript; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_AnimationScriptName');
    {$ENDIF}
    
    try
      result_temp := sgAnimations.AnimationScriptName(script);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_AnimationScriptName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_AnimationScriptName');
    {$ENDIF}
  end;
  

  function sg_Animations_AnimationScriptNamed(name: PChar): AnimationScript; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_AnimationScriptNamed');
    {$ENDIF}
    
    try
      result := sgAnimations.AnimationScriptNamed(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_AnimationScriptNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_AnimationScriptNamed');
    {$ENDIF}
  end;
  

  procedure sg_Animations_AssignAnimation(anim: Animation; idx: Longint; script: AnimationScript); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_AssignAnimation');
    {$ENDIF}
  
    try 
       sgAnimations.AssignAnimation(anim, idx, script);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_AssignAnimation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_AssignAnimation');
    {$ENDIF}
  end;
  

  procedure sg_Animations_AssignAnimationNamed(anim: Animation; name: PChar; script: AnimationScript); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_AssignAnimationNamed');
    {$ENDIF}
  
    try 
       sgAnimations.AssignAnimation(anim, name, script);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_AssignAnimationNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_AssignAnimationNamed');
    {$ENDIF}
  end;
  

  procedure sg_Animations_AssignAnimationNamedWithSound(anim: Animation; name: PChar; script: AnimationScript; withSound: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_AssignAnimationNamedWithSound');
    {$ENDIF}
  
    try 
       sgAnimations.AssignAnimation(anim, name, script, withSound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_AssignAnimationNamedWithSound');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_AssignAnimationNamedWithSound');
    {$ENDIF}
  end;
  

  procedure sg_Animations_AssignAnimationWithSound(anim: Animation; idx: Longint; script: AnimationScript; withSound: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_AssignAnimationWithSound');
    {$ENDIF}
  
    try 
       sgAnimations.AssignAnimation(anim, idx, script, withSound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_AssignAnimationWithSound');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_AssignAnimationWithSound');
    {$ENDIF}
  end;
  

  function sg_Animations_CreateAnimation(identifier: Longint; script: AnimationScript; withSound: Boolean): Animation; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_CreateAnimation');
    {$ENDIF}
    
    try
      result := sgAnimations.CreateAnimation(identifier, script, withSound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_CreateAnimation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_CreateAnimation');
    {$ENDIF}
  end;
  

  function sg_Animations_CreateAnimationNamed(identifier: PChar; script: AnimationScript): Animation; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_CreateAnimationNamed');
    {$ENDIF}
    
    try
      result := sgAnimations.CreateAnimation(identifier, script);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_CreateAnimationNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_CreateAnimationNamed');
    {$ENDIF}
  end;
  

  function sg_Animations_CreateAnimationNamedWithSound(identifier: PChar; script: AnimationScript; withSound: Boolean): Animation; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_CreateAnimationNamedWithSound');
    {$ENDIF}
    
    try
      result := sgAnimations.CreateAnimation(identifier, script, withSound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_CreateAnimationNamedWithSound');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_CreateAnimationNamedWithSound');
    {$ENDIF}
  end;
  

  function sg_Animations_CreateAnimationWithSound(identifier: Longint; script: AnimationScript): Animation; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_CreateAnimationWithSound');
    {$ENDIF}
    
    try
      result := sgAnimations.CreateAnimation(identifier, script);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_CreateAnimationWithSound');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_CreateAnimationWithSound');
    {$ENDIF}
  end;
  

  procedure sg_Animations_DrawAnimation(ani: Animation; bmp: Bitmap; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_DrawAnimation');
    {$ENDIF}
  
    try 
       sgAnimations.DrawAnimation(ani, bmp, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_DrawAnimation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_DrawAnimation');
    {$ENDIF}
  end;
  

  procedure sg_Animations_DrawAnimationAtPoint(ani: Animation; bmp: Bitmap; var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_DrawAnimationAtPoint');
    {$ENDIF}
  
    try 
       sgAnimations.DrawAnimation(ani, bmp, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_DrawAnimationAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_DrawAnimationAtPoint');
    {$ENDIF}
  end;
  

  procedure sg_Animations_DrawAnimationOnScreen(ani: Animation; bmp: Bitmap; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_DrawAnimationOnScreen');
    {$ENDIF}
  
    try 
       sgAnimations.DrawAnimationOnScreen(ani, bmp, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_DrawAnimationOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_DrawAnimationOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Animations_DrawAnimationOnScreenAtPt(ani: Animation; bmp: Bitmap; var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_DrawAnimationOnScreenAtPt');
    {$ENDIF}
  
    try 
       sgAnimations.DrawAnimationOnScreen(ani, bmp, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_DrawAnimationOnScreenAtPt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_DrawAnimationOnScreenAtPt');
    {$ENDIF}
  end;
  

  procedure sg_Animations_DrawAnimationOntoDest(dest: Bitmap; ani: Animation; bmp: Bitmap; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_DrawAnimationOntoDest');
    {$ENDIF}
  
    try 
       sgAnimations.DrawAnimation(dest, ani, bmp, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_DrawAnimationOntoDest');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_DrawAnimationOntoDest');
    {$ENDIF}
  end;
  

  procedure sg_Animations_DrawAnimationOntoDestAtPt(dest: Bitmap; ani: Animation; bmp: Bitmap; var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_DrawAnimationOntoDestAtPt');
    {$ENDIF}
  
    try 
       sgAnimations.DrawAnimation(dest, ani, bmp, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_DrawAnimationOntoDestAtPt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_DrawAnimationOntoDestAtPt');
    {$ENDIF}
  end;
  

  procedure sg_Animations_FreeAnimation(var ani: Animation); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_FreeAnimation');
    {$ENDIF}
  
    try 
       sgAnimations.FreeAnimation(ani);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_FreeAnimation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_FreeAnimation');
    {$ENDIF}
  end;
  

  procedure sg_Animations_FreeAnimationScript(var scriptToFree: AnimationScript); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_FreeAnimationScript');
    {$ENDIF}
  
    try 
       sgAnimations.FreeAnimationScript(scriptToFree);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_FreeAnimationScript');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_FreeAnimationScript');
    {$ENDIF}
  end;
  

  function sg_Animations_HasAnimationScript(name: PChar): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_HasAnimationScript');
    {$ENDIF}
    
    try
      result := sgAnimations.HasAnimationScript(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_HasAnimationScript');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_HasAnimationScript');
    {$ENDIF}
  end;
  

  function sg_Animations_LoadAnimationScript(filename: PChar): AnimationScript; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_LoadAnimationScript');
    {$ENDIF}
    
    try
      result := sgAnimations.LoadAnimationScript(filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_LoadAnimationScript');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_LoadAnimationScript');
    {$ENDIF}
  end;
  

  function sg_Animations_LoadAnimationScriptNamed(name: PChar; filename: PChar): AnimationScript; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_LoadAnimationScriptNamed');
    {$ENDIF}
    
    try
      result := sgAnimations.LoadAnimationScriptNamed(name, filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_LoadAnimationScriptNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_LoadAnimationScriptNamed');
    {$ENDIF}
  end;
  

  procedure sg_Animations_ReleaseAllAnimationScripts(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_ReleaseAllAnimationScripts');
    {$ENDIF}
  
    try 
       sgAnimations.ReleaseAllAnimationScripts();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_ReleaseAllAnimationScripts');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_ReleaseAllAnimationScripts');
    {$ENDIF}
  end;
  

  procedure sg_Animations_ReleaseAnimationScript(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_ReleaseAnimationScript');
    {$ENDIF}
  
    try 
       sgAnimations.ReleaseAnimationScript(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_ReleaseAnimationScript');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_ReleaseAnimationScript');
    {$ENDIF}
  end;
  

  procedure sg_Animations_ResetAnimationWithSound(anim: Animation; withSound: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_ResetAnimationWithSound');
    {$ENDIF}
  
    try 
       sgAnimations.RestartAnimation(anim, withSound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_ResetAnimationWithSound');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_ResetAnimationWithSound');
    {$ENDIF}
  end;
  

  procedure sg_Animations_RestartAnimation(anim: Animation); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_RestartAnimation');
    {$ENDIF}
  
    try 
       sgAnimations.RestartAnimation(anim);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_RestartAnimation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_RestartAnimation');
    {$ENDIF}
  end;
  

  procedure sg_Animations_UpdateAnimation(anim: Animation); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_UpdateAnimation');
    {$ENDIF}
  
    try 
       sgAnimations.UpdateAnimation(anim);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_UpdateAnimation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_UpdateAnimation');
    {$ENDIF}
  end;
  

  procedure sg_Animations_UpdateAnimationPct(anim: Animation; pct: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_UpdateAnimationPct');
    {$ENDIF}
  
    try 
       sgAnimations.UpdateAnimation(anim, pct);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_UpdateAnimationPct');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_UpdateAnimationPct');
    {$ENDIF}
  end;
  

  procedure sg_Animations_UpdateAnimationPctAndSound(anim: Animation; pct: Single; withSound: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animations_UpdateAnimationPctAndSound');
    {$ENDIF}
  
    try 
       sgAnimations.UpdateAnimation(anim, pct, withSound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animations_UpdateAnimationPctAndSound');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animations_UpdateAnimationPctAndSound');
    {$ENDIF}
  end;
  

  function sg_Arduino_ArduinoDeviceNamed(name: PChar): ArduinoDevice; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Arduino_ArduinoDeviceNamed');
    {$ENDIF}
    
    try
      result := sgArduino.ArduinoDeviceNamed(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Arduino_ArduinoDeviceNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Arduino_ArduinoDeviceNamed');
    {$ENDIF}
  end;
  

  function sg_Arduino_ArduinoHasData(dev: ArduinoDevice): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Arduino_ArduinoHasData');
    {$ENDIF}
    
    try
      result := sgArduino.ArduinoHasData(dev);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Arduino_ArduinoHasData');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Arduino_ArduinoHasData');
    {$ENDIF}
  end;
  

  function sg_Arduino_ArduinoReadByte(dev: ArduinoDevice): Byte; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Arduino_ArduinoReadByte');
    {$ENDIF}
    
    try
      result := sgArduino.ArduinoReadByte(dev);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Arduino_ArduinoReadByte');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Arduino_ArduinoReadByte');
    {$ENDIF}
  end;
  

  function sg_Arduino_ArduinoReadByteTimeout(dev: ArduinoDevice; timeout: Longint): Byte; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Arduino_ArduinoReadByteTimeout');
    {$ENDIF}
    
    try
      result := sgArduino.ArduinoReadByte(dev, timeout);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Arduino_ArduinoReadByteTimeout');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Arduino_ArduinoReadByteTimeout');
    {$ENDIF}
  end;
  

  procedure sg_Arduino_ArduinoReadLine(dev: ArduinoDevice; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Arduino_ArduinoReadLine');
    {$ENDIF}
    
    try
      result_temp := sgArduino.ArduinoReadLine(dev);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Arduino_ArduinoReadLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Arduino_ArduinoReadLine');
    {$ENDIF}
  end;
  

  procedure sg_Arduino_ArduinoReadLineTimeout(dev: ArduinoDevice; timeout: Longint; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Arduino_ArduinoReadLineTimeout');
    {$ENDIF}
    
    try
      result_temp := sgArduino.ArduinoReadLine(dev, timeout);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Arduino_ArduinoReadLineTimeout');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Arduino_ArduinoReadLineTimeout');
    {$ENDIF}
  end;
  

  procedure sg_Arduino_ArduinoSendByte(dev: ArduinoDevice; value: Byte); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Arduino_ArduinoSendByte');
    {$ENDIF}
  
    try 
       sgArduino.ArduinoSendByte(dev, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Arduino_ArduinoSendByte');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Arduino_ArduinoSendByte');
    {$ENDIF}
  end;
  

  procedure sg_Arduino_ArduinoSendString(dev: ArduinoDevice; value: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Arduino_ArduinoSendString');
    {$ENDIF}
  
    try 
       sgArduino.ArduinoSendString(dev, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Arduino_ArduinoSendString');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Arduino_ArduinoSendString');
    {$ENDIF}
  end;
  

  procedure sg_Arduino_ArduinoSendStringLine(dev: ArduinoDevice; value: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Arduino_ArduinoSendStringLine');
    {$ENDIF}
  
    try 
       sgArduino.ArduinoSendStringLine(dev, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Arduino_ArduinoSendStringLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Arduino_ArduinoSendStringLine');
    {$ENDIF}
  end;
  

  function sg_Arduino_CreateArduinoDevice(port: PChar; baud: Longint): ArduinoDevice; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Arduino_CreateArduinoDevice');
    {$ENDIF}
    
    try
      result := sgArduino.CreateArduinoDevice(port, baud);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Arduino_CreateArduinoDevice');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Arduino_CreateArduinoDevice');
    {$ENDIF}
  end;
  

  function sg_Arduino_CreateArduinoNamed(name: PChar; port: PChar; baud: Longint): ArduinoDevice; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Arduino_CreateArduinoNamed');
    {$ENDIF}
    
    try
      result := sgArduino.CreateArduinoDevice(name, port, baud);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Arduino_CreateArduinoNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Arduino_CreateArduinoNamed');
    {$ENDIF}
  end;
  

  procedure sg_Arduino_FreeArduinoDevice(var dev: ArduinoDevice); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Arduino_FreeArduinoDevice');
    {$ENDIF}
  
    try 
       sgArduino.FreeArduinoDevice(dev);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Arduino_FreeArduinoDevice');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Arduino_FreeArduinoDevice');
    {$ENDIF}
  end;
  

  function sg_Arduino_HasArduinoDevice(name: PChar): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Arduino_HasArduinoDevice');
    {$ENDIF}
    
    try
      result := sgArduino.HasArduinoDevice(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Arduino_HasArduinoDevice');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Arduino_HasArduinoDevice');
    {$ENDIF}
  end;
  

  procedure sg_Arduino_ReleaseAllArduinoDevices(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Arduino_ReleaseAllArduinoDevices');
    {$ENDIF}
  
    try 
       sgArduino.ReleaseAllArduinoDevices();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Arduino_ReleaseAllArduinoDevices');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Arduino_ReleaseAllArduinoDevices');
    {$ENDIF}
  end;
  

  procedure sg_Arduino_ReleaseArduinoDevice(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Arduino_ReleaseArduinoDevice');
    {$ENDIF}
  
    try 
       sgArduino.ReleaseArduinoDevice(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Arduino_ReleaseArduinoDevice');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Arduino_ReleaseArduinoDevice');
    {$ENDIF}
  end;
  

  function sg_Audio_AudioReady(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_AudioReady');
    {$ENDIF}
    
    try
      result := sgAudio.AudioReady();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_AudioReady');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_AudioReady');
    {$ENDIF}
  end;
  

  procedure sg_Audio_CloseAudio(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_CloseAudio');
    {$ENDIF}
  
    try 
       sgAudio.CloseAudio();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_CloseAudio');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_CloseAudio');
    {$ENDIF}
  end;
  

  procedure sg_Audio_FadeMusicIn(mus: Music; ms: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_FadeMusicIn');
    {$ENDIF}
  
    try 
       sgAudio.FadeMusicIn(mus, ms);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_FadeMusicIn');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_FadeMusicIn');
    {$ENDIF}
  end;
  

  procedure sg_Audio_FadeMusicInWithLoops(mus: Music; loops: Longint; ms: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_FadeMusicInWithLoops');
    {$ENDIF}
  
    try 
       sgAudio.FadeMusicIn(mus, loops, ms);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_FadeMusicInWithLoops');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_FadeMusicInWithLoops');
    {$ENDIF}
  end;
  

  procedure sg_Audio_FadeMusicNamedIn(name: PChar; ms: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_FadeMusicNamedIn');
    {$ENDIF}
  
    try 
       sgAudio.FadeMusicIn(name, ms);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_FadeMusicNamedIn');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_FadeMusicNamedIn');
    {$ENDIF}
  end;
  

  procedure sg_Audio_FadeMusicNamedInWithLoops(name: PChar; loops: Longint; ms: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_FadeMusicNamedInWithLoops');
    {$ENDIF}
  
    try 
       sgAudio.FadeMusicIn(name, loops, ms);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_FadeMusicNamedInWithLoops');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_FadeMusicNamedInWithLoops');
    {$ENDIF}
  end;
  

  procedure sg_Audio_FadeMusicOut(ms: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_FadeMusicOut');
    {$ENDIF}
  
    try 
       sgAudio.FadeMusicOut(ms);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_FadeMusicOut');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_FadeMusicOut');
    {$ENDIF}
  end;
  

  procedure sg_Audio_FreeMusic(var mus: Music); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_FreeMusic');
    {$ENDIF}
  
    try 
       sgAudio.FreeMusic(mus);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_FreeMusic');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_FreeMusic');
    {$ENDIF}
  end;
  

  procedure sg_Audio_FreeSoundEffect(var effect: SoundEffect); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_FreeSoundEffect');
    {$ENDIF}
  
    try 
       sgAudio.FreeSoundEffect(effect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_FreeSoundEffect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_FreeSoundEffect');
    {$ENDIF}
  end;
  

  function sg_Audio_HasMusic(name: PChar): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_HasMusic');
    {$ENDIF}
    
    try
      result := sgAudio.HasMusic(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_HasMusic');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_HasMusic');
    {$ENDIF}
  end;
  

  function sg_Audio_HasSoundEffect(name: PChar): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_HasSoundEffect');
    {$ENDIF}
    
    try
      result := sgAudio.HasSoundEffect(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_HasSoundEffect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_HasSoundEffect');
    {$ENDIF}
  end;
  

  function sg_Audio_LoadMusic(filename: PChar): Music; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_LoadMusic');
    {$ENDIF}
    
    try
      result := sgAudio.LoadMusic(filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_LoadMusic');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_LoadMusic');
    {$ENDIF}
  end;
  

  function sg_Audio_LoadMusicNamed(name: PChar; filename: PChar): Music; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_LoadMusicNamed');
    {$ENDIF}
    
    try
      result := sgAudio.LoadMusicNamed(name, filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_LoadMusicNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_LoadMusicNamed');
    {$ENDIF}
  end;
  

  function sg_Audio_LoadSoundEffect(filename: PChar): SoundEffect; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_LoadSoundEffect');
    {$ENDIF}
    
    try
      result := sgAudio.LoadSoundEffect(filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_LoadSoundEffect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_LoadSoundEffect');
    {$ENDIF}
  end;
  

  function sg_Audio_LoadSoundEffectNamed(name: PChar; filename: PChar): SoundEffect; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_LoadSoundEffectNamed');
    {$ENDIF}
    
    try
      result := sgAudio.LoadSoundEffectNamed(name, filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_LoadSoundEffectNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_LoadSoundEffectNamed');
    {$ENDIF}
  end;
  

  procedure sg_Audio_MusicFilename(mus: Music; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_MusicFilename');
    {$ENDIF}
    
    try
      result_temp := sgAudio.MusicFilename(mus);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_MusicFilename');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_MusicFilename');
    {$ENDIF}
  end;
  

  procedure sg_Audio_MusicName(mus: Music; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_MusicName');
    {$ENDIF}
    
    try
      result_temp := sgAudio.MusicName(mus);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_MusicName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_MusicName');
    {$ENDIF}
  end;
  

  function sg_Audio_MusicNamed(name: PChar): Music; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_MusicNamed');
    {$ENDIF}
    
    try
      result := sgAudio.MusicNamed(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_MusicNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_MusicNamed');
    {$ENDIF}
  end;
  

  function sg_Audio_MusicPlaying(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_MusicPlaying');
    {$ENDIF}
    
    try
      result := sgAudio.MusicPlaying();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_MusicPlaying');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_MusicPlaying');
    {$ENDIF}
  end;
  

  function sg_Audio_MusicVolume(): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_MusicVolume');
    {$ENDIF}
    
    try
      result := sgAudio.MusicVolume();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_MusicVolume');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_MusicVolume');
    {$ENDIF}
  end;
  

  procedure sg_Audio_OpenAudio(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_OpenAudio');
    {$ENDIF}
  
    try 
       sgAudio.OpenAudio();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_OpenAudio');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_OpenAudio');
    {$ENDIF}
  end;
  

  procedure sg_Audio_PauseMusic(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_PauseMusic');
    {$ENDIF}
  
    try 
       sgAudio.PauseMusic();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_PauseMusic');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_PauseMusic');
    {$ENDIF}
  end;
  

  procedure sg_Audio_PlayMusicNamedWithLoops(name: PChar; loops: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_PlayMusicNamedWithLoops');
    {$ENDIF}
  
    try 
       sgAudio.PlayMusic(name, loops);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_PlayMusicNamedWithLoops');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_PlayMusicNamedWithLoops');
    {$ENDIF}
  end;
  

  procedure sg_Audio_PlayMusicWithLoops(mus: Music; loops: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_PlayMusicWithLoops');
    {$ENDIF}
  
    try 
       sgAudio.PlayMusic(mus, loops);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_PlayMusicWithLoops');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_PlayMusicWithLoops');
    {$ENDIF}
  end;
  

  procedure sg_Audio_PlaySoundEffectNamedWithLoopAndVolume(name: PChar; loops: Longint; vol: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_PlaySoundEffectNamedWithLoopAndVolume');
    {$ENDIF}
  
    try 
       sgAudio.PlaySoundEffect(name, loops, vol);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_PlaySoundEffectNamedWithLoopAndVolume');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_PlaySoundEffectNamedWithLoopAndVolume');
    {$ENDIF}
  end;
  

  procedure sg_Audio_PlaySoundEffectWithLoopAndVolume(effect: SoundEffect; loops: Longint; vol: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_PlaySoundEffectWithLoopAndVolume');
    {$ENDIF}
  
    try 
       sgAudio.PlaySoundEffect(effect, loops, vol);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_PlaySoundEffectWithLoopAndVolume');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_PlaySoundEffectWithLoopAndVolume');
    {$ENDIF}
  end;
  

  procedure sg_Audio_ReleaseAllMusic(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_ReleaseAllMusic');
    {$ENDIF}
  
    try 
       sgAudio.ReleaseAllMusic();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_ReleaseAllMusic');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_ReleaseAllMusic');
    {$ENDIF}
  end;
  

  procedure sg_Audio_ReleaseAllSoundEffects(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_ReleaseAllSoundEffects');
    {$ENDIF}
  
    try 
       sgAudio.ReleaseAllSoundEffects();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_ReleaseAllSoundEffects');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_ReleaseAllSoundEffects');
    {$ENDIF}
  end;
  

  procedure sg_Audio_ReleaseMusic(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_ReleaseMusic');
    {$ENDIF}
  
    try 
       sgAudio.ReleaseMusic(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_ReleaseMusic');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_ReleaseMusic');
    {$ENDIF}
  end;
  

  procedure sg_Audio_ReleaseSoundEffect(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_ReleaseSoundEffect');
    {$ENDIF}
  
    try 
       sgAudio.ReleaseSoundEffect(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_ReleaseSoundEffect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_ReleaseSoundEffect');
    {$ENDIF}
  end;
  

  procedure sg_Audio_ResumeMusic(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_ResumeMusic');
    {$ENDIF}
  
    try 
       sgAudio.ResumeMusic();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_ResumeMusic');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_ResumeMusic');
    {$ENDIF}
  end;
  

  procedure sg_Audio_SetMusicVolume(value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_SetMusicVolume');
    {$ENDIF}
  
    try 
       sgAudio.SetMusicVolume(value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_SetMusicVolume');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_SetMusicVolume');
    {$ENDIF}
  end;
  

  procedure sg_Audio_SoundEffectFilename(effect: SoundEffect; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_SoundEffectFilename');
    {$ENDIF}
    
    try
      result_temp := sgAudio.SoundEffectFilename(effect);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_SoundEffectFilename');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_SoundEffectFilename');
    {$ENDIF}
  end;
  

  procedure sg_Audio_SoundEffectName(effect: SoundEffect; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_SoundEffectName');
    {$ENDIF}
    
    try
      result_temp := sgAudio.SoundEffectName(effect);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_SoundEffectName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_SoundEffectName');
    {$ENDIF}
  end;
  

  function sg_Audio_SoundEffectNamed(name: PChar): SoundEffect; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_SoundEffectNamed');
    {$ENDIF}
    
    try
      result := sgAudio.SoundEffectNamed(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_SoundEffectNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_SoundEffectNamed');
    {$ENDIF}
  end;
  

  function sg_Audio_SoundEffectNamedPlaying(name: PChar): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_SoundEffectNamedPlaying');
    {$ENDIF}
    
    try
      result := sgAudio.SoundEffectPlaying(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_SoundEffectNamedPlaying');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_SoundEffectNamedPlaying');
    {$ENDIF}
  end;
  

  function sg_Audio_SoundEffectPlaying(effect: SoundEffect): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_SoundEffectPlaying');
    {$ENDIF}
    
    try
      result := sgAudio.SoundEffectPlaying(effect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_SoundEffectPlaying');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_SoundEffectPlaying');
    {$ENDIF}
  end;
  

  procedure sg_Audio_StopMusic(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_StopMusic');
    {$ENDIF}
  
    try 
       sgAudio.StopMusic();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_StopMusic');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_StopMusic');
    {$ENDIF}
  end;
  

  procedure sg_Audio_StopSoundEffect(effect: SoundEffect); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_StopSoundEffect');
    {$ENDIF}
  
    try 
       sgAudio.StopSoundEffect(effect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_StopSoundEffect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_StopSoundEffect');
    {$ENDIF}
  end;
  

  procedure sg_Audio_StopSoundEffectNamed(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_StopSoundEffectNamed');
    {$ENDIF}
  
    try 
       sgAudio.StopSoundEffect(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_StopSoundEffectNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_StopSoundEffectNamed');
    {$ENDIF}
  end;
  

  function sg_Audio_TryOpenAudio(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_TryOpenAudio');
    {$ENDIF}
    
    try
      result := sgAudio.TryOpenAudio();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_TryOpenAudio');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_TryOpenAudio');
    {$ENDIF}
  end;
  

  function sg_Camera_CameraPos(): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_CameraPos');
    {$ENDIF}
    
    try
      result := sgCamera.CameraPos();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_CameraPos');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_CameraPos');
    {$ENDIF}
  end;
  

  function sg_Camera_CameraScreenRect(): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_CameraScreenRect');
    {$ENDIF}
    
    try
      result := sgCamera.CameraScreenRect();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_CameraScreenRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_CameraScreenRect');
    {$ENDIF}
  end;
  

  function sg_Camera_CameraX(): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_CameraX');
    {$ENDIF}
    
    try
      result := sgCamera.CameraX();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_CameraX');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_CameraX');
    {$ENDIF}
  end;
  

  function sg_Camera_CameraY(): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_CameraY');
    {$ENDIF}
    
    try
      result := sgCamera.CameraY();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_CameraY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_CameraY');
    {$ENDIF}
  end;
  

  procedure sg_Camera_CenterCameraOn(s: Sprite; var offset: Vector); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_CenterCameraOn');
    {$ENDIF}
  
    try 
       sgCamera.CenterCameraOn(s, offset);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_CenterCameraOn');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_CenterCameraOn');
    {$ENDIF}
  end;
  

  procedure sg_Camera_CenterCameraOnCharacter(c: Character; var offset: Vector); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_CenterCameraOnCharacter');
    {$ENDIF}
  
    try 
       sgCamera.CenterCameraOn(c, offset);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_CenterCameraOnCharacter');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_CenterCameraOnCharacter');
    {$ENDIF}
  end;
  

  procedure sg_Camera_CenterCameraOnWithXYOffset(s: Sprite; offsetX: Longint; offsetY: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_CenterCameraOnWithXYOffset');
    {$ENDIF}
  
    try 
       sgCamera.CenterCameraOn(s, offsetX, offsetY);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_CenterCameraOnWithXYOffset');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_CenterCameraOnWithXYOffset');
    {$ENDIF}
  end;
  

  procedure sg_Camera_MoveCameraBy(var offset: Vector); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_MoveCameraBy');
    {$ENDIF}
  
    try 
       sgCamera.MoveCameraBy(offset);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_MoveCameraBy');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_MoveCameraBy');
    {$ENDIF}
  end;
  

  procedure sg_Camera_MoveCameraByXY(dx: Single; dy: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_MoveCameraByXY');
    {$ENDIF}
  
    try 
       sgCamera.MoveCameraBy(dx, dy);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_MoveCameraByXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_MoveCameraByXY');
    {$ENDIF}
  end;
  

  procedure sg_Camera_MoveCameraTo(var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_MoveCameraTo');
    {$ENDIF}
  
    try 
       sgCamera.MoveCameraTo(pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_MoveCameraTo');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_MoveCameraTo');
    {$ENDIF}
  end;
  

  procedure sg_Camera_MoveCameraToXY(x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_MoveCameraToXY');
    {$ENDIF}
  
    try 
       sgCamera.MoveCameraTo(x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_MoveCameraToXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_MoveCameraToXY');
    {$ENDIF}
  end;
  

  function sg_Camera_PointOnScreen(var pt: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_PointOnScreen');
    {$ENDIF}
    
    try
      result := sgCamera.PointOnScreen(pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_PointOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_PointOnScreen');
    {$ENDIF}
  end;
  

  function sg_Camera_RectOnScreen(var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_RectOnScreen');
    {$ENDIF}
    
    try
      result := sgCamera.RectOnScreen(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_RectOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_RectOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Camera_SetCameraPos(var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_SetCameraPos');
    {$ENDIF}
  
    try 
       sgCamera.SetCameraPos(pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_SetCameraPos');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_SetCameraPos');
    {$ENDIF}
  end;
  

  procedure sg_Camera_SetCameraX(x: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_SetCameraX');
    {$ENDIF}
  
    try 
       sgCamera.SetCameraX(x);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_SetCameraX');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_SetCameraX');
    {$ENDIF}
  end;
  

  procedure sg_Camera_SetCameraY(y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_SetCameraY');
    {$ENDIF}
  
    try 
       sgCamera.SetCameraY(y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_SetCameraY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_SetCameraY');
    {$ENDIF}
  end;
  

  function sg_Camera_ToScreen(var worldPoint: Point2D): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_ToScreen');
    {$ENDIF}
    
    try
      result := sgCamera.ToScreen(worldPoint);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_ToScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_ToScreen');
    {$ENDIF}
  end;
  

  function sg_Camera_ToScreenRect(var rect: Rectangle): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_ToScreenRect');
    {$ENDIF}
    
    try
      result := sgCamera.ToScreen(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_ToScreenRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_ToScreenRect');
    {$ENDIF}
  end;
  

  function sg_Camera_ToScreenX(worldX: Single): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_ToScreenX');
    {$ENDIF}
    
    try
      result := sgCamera.ToScreenX(worldX);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_ToScreenX');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_ToScreenX');
    {$ENDIF}
  end;
  

  function sg_Camera_ToScreenY(worldY: Single): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_ToScreenY');
    {$ENDIF}
    
    try
      result := sgCamera.ToScreenY(worldY);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_ToScreenY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_ToScreenY');
    {$ENDIF}
  end;
  

  function sg_Camera_ToWorld(var screenPoint: Point2D): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_ToWorld');
    {$ENDIF}
    
    try
      result := sgCamera.ToWorld(screenPoint);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_ToWorld');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_ToWorld');
    {$ENDIF}
  end;
  

  function sg_Camera_ToWorldX(screenX: Longint): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_ToWorldX');
    {$ENDIF}
    
    try
      result := sgCamera.ToWorldX(screenX);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_ToWorldX');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_ToWorldX');
    {$ENDIF}
  end;
  

  function sg_Camera_ToWorldY(screenY: Longint): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_ToWorldY');
    {$ENDIF}
    
    try
      result := sgCamera.ToWorldY(screenY);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_ToWorldY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_ToWorldY');
    {$ENDIF}
  end;
  

  function sg_Characters_CharacterAngleAt(c: Character; index: Longint): DirectionAngles; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterAngleAt');
    {$ENDIF}
    
    try
      result := sgCharacters.CharacterAngleAt(c, index);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterAngleAt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterAngleAt');
    {$ENDIF}
  end;
  

  function sg_Characters_CharacterAngleMaxAt(c: Character; index: Longint): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterAngleMaxAt');
    {$ENDIF}
    
    try
      result := sgCharacters.CharacterAngleMaxAt(c, index);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterAngleMaxAt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterAngleMaxAt');
    {$ENDIF}
  end;
  

  function sg_Characters_CharacterAngleMinAt(c: Character; index: Longint): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterAngleMinAt');
    {$ENDIF}
    
    try
      result := sgCharacters.CharacterAngleMinAt(c, index);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterAngleMinAt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterAngleMinAt');
    {$ENDIF}
  end;
  

  function sg_Characters_CharacterAnglesLength(c: Character): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterAnglesLength');
    {$ENDIF}
    
    try
      result := sgCharacters.CharacterAnglesLength(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterAnglesLength');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterAnglesLength');
    {$ENDIF}
  end;
  

  procedure sg_Characters_CharacterCharacterName(c: Character; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterCharacterName');
    {$ENDIF}
    
    try
      result_temp := sgCharacters.CharacterCharacterName(c);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterCharacterName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterCharacterName');
    {$ENDIF}
  end;
  

  function sg_Characters_CharacterCurrentDirection(c: Character): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterCurrentDirection');
    {$ENDIF}
    
    try
      result := sgCharacters.CharacterCurrentDirection(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterCurrentDirection');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterCurrentDirection');
    {$ENDIF}
  end;
  

  function sg_Characters_CharacterCurrentState(c: Character): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterCurrentState');
    {$ENDIF}
    
    try
      result := sgCharacters.CharacterCurrentState(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterCurrentState');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterCurrentState');
    {$ENDIF}
  end;
  

  function sg_Characters_CharacterDirectionCount(c: Character): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterDirectionCount');
    {$ENDIF}
    
    try
      result := sgCharacters.CharacterDirectionCount(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterDirectionCount');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterDirectionCount');
    {$ENDIF}
  end;
  

  procedure sg_Characters_CharacterDirections(c: Character; result: StringPtr; result_len: Longint); cdecl; export;
    var
      result_temp: StringArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterDirections');
    {$ENDIF}
    
    try
      result_temp := sgCharacters.CharacterDirections(c);
        StringCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterDirections');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterDirections');
    {$ENDIF}
  end;
  

  procedure sg_Characters_CharacterFilename(c: Character; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterFilename');
    {$ENDIF}
    
    try
      result_temp := sgCharacters.CharacterFilename(c);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterFilename');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterFilename');
    {$ENDIF}
  end;
  

  procedure sg_Characters_CharacterName(c: Character; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterName');
    {$ENDIF}
    
    try
      result_temp := sgCharacters.CharacterName(c);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterName');
    {$ENDIF}
  end;
  

  function sg_Characters_CharacterNamed(name: PChar): Character; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterNamed');
    {$ENDIF}
    
    try
      result := sgCharacters.CharacterNamed(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterNamed');
    {$ENDIF}
  end;
  

  procedure sg_Characters_CharacterSetCurrentDirection(c: Character; direction: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterSetCurrentDirection');
    {$ENDIF}
  
    try 
       sgCharacters.CharacterSetCurrentDirection(c, direction);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterSetCurrentDirection');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterSetCurrentDirection');
    {$ENDIF}
  end;
  

  procedure sg_Characters_CharacterSetCurrentState(c: Character; state: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterSetCurrentState');
    {$ENDIF}
  
    try 
       sgCharacters.CharacterSetCurrentState(c, state);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterSetCurrentState');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterSetCurrentState');
    {$ENDIF}
  end;
  

  procedure sg_Characters_CharacterSetName(c: Character; name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterSetName');
    {$ENDIF}
  
    try 
       sgCharacters.CharacterSetName(c, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterSetName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterSetName');
    {$ENDIF}
  end;
  

  procedure sg_Characters_CharacterSetType(c: Character; name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterSetType');
    {$ENDIF}
  
    try 
       sgCharacters.CharacterSetType(c, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterSetType');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterSetType');
    {$ENDIF}
  end;
  

  procedure sg_Characters_CharacterSetValue(c: Character; idx: Longint; val: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterSetValue');
    {$ENDIF}
  
    try 
       sgCharacters.CharacterSetValue(c, idx, val);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterSetValue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterSetValue');
    {$ENDIF}
  end;
  

  procedure sg_Characters_CharacterSetValueByName(c: Character; name: PChar; val: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterSetValueByName');
    {$ENDIF}
  
    try 
       sgCharacters.CharacterSetValue(c, name, val);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterSetValueByName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterSetValueByName');
    {$ENDIF}
  end;
  

  function sg_Characters_CharacterShownLayersAt(c: Character; index: Longint): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterShownLayersAt');
    {$ENDIF}
    
    try
      result := sgCharacters.CharacterShownLayersAt(c, index);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterShownLayersAt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterShownLayersAt');
    {$ENDIF}
  end;
  

  function sg_Characters_CharacterSprite(c: Character): Sprite; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterSprite');
    {$ENDIF}
    
    try
      result := sgCharacters.CharacterSprite(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterSprite');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterSprite');
    {$ENDIF}
  end;
  

  function sg_Characters_CharacterStateCount(c: Character): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterStateCount');
    {$ENDIF}
    
    try
      result := sgCharacters.CharacterStateCount(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterStateCount');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterStateCount');
    {$ENDIF}
  end;
  

  procedure sg_Characters_CharacterStates(c: Character; result: StringPtr; result_len: Longint); cdecl; export;
    var
      result_temp: StringArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterStates');
    {$ENDIF}
    
    try
      result_temp := sgCharacters.CharacterStates(c);
        StringCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterStates');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterStates');
    {$ENDIF}
  end;
  

  procedure sg_Characters_CharacterType(c: Character; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterType');
    {$ENDIF}
    
    try
      result_temp := sgCharacters.CharacterType(c);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterType');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterType');
    {$ENDIF}
  end;
  

  function sg_Characters_CharacterValueAt(c: Character; index: Longint): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterValueAt');
    {$ENDIF}
    
    try
      result := sgCharacters.CharacterValueAt(c, index);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterValueAt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterValueAt');
    {$ENDIF}
  end;
  

  function sg_Characters_CharacterValueCount(c: Character): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterValueCount');
    {$ENDIF}
    
    try
      result := sgCharacters.CharacterValueCount(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterValueCount');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterValueCount');
    {$ENDIF}
  end;
  

  procedure sg_Characters_CharacterValueNames(c: Character; result: StringPtr; result_len: Longint); cdecl; export;
    var
      result_temp: StringArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_CharacterValueNames');
    {$ENDIF}
    
    try
      result_temp := sgCharacters.CharacterValueNames(c);
        StringCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_CharacterValueNames');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_CharacterValueNames');
    {$ENDIF}
  end;
  

  procedure sg_Characters_DrawCharacter(c: Character); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_DrawCharacter');
    {$ENDIF}
  
    try 
       sgCharacters.DrawCharacter(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_DrawCharacter');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_DrawCharacter');
    {$ENDIF}
  end;
  

  procedure sg_Characters_DrawCharacterSprite(c: Character); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_DrawCharacterSprite');
    {$ENDIF}
  
    try 
       sgCharacters.DrawCharacterSprite(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_DrawCharacterSprite');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_DrawCharacterSprite');
    {$ENDIF}
  end;
  

  procedure sg_Characters_DrawCharacterWithStationary(c: Character; stationaryState: Longint; state: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_DrawCharacterWithStationary');
    {$ENDIF}
  
    try 
       sgCharacters.DrawCharacterWithStationary(c, stationaryState, state);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_DrawCharacterWithStationary');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_DrawCharacterWithStationary');
    {$ENDIF}
  end;
  

  procedure sg_Characters_FreeCharacter(var c: Character); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_FreeCharacter');
    {$ENDIF}
  
    try 
       sgCharacters.FreeCharacter(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_FreeCharacter');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_FreeCharacter');
    {$ENDIF}
  end;
  

  function sg_Characters_HasCharacter(name: PChar): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_HasCharacter');
    {$ENDIF}
    
    try
      result := sgCharacters.HasCharacter(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_HasCharacter');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_HasCharacter');
    {$ENDIF}
  end;
  

  function sg_Characters_LoadCharacter(filename: PChar): Character; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_LoadCharacter');
    {$ENDIF}
    
    try
      result := sgCharacters.LoadCharacter(filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_LoadCharacter');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_LoadCharacter');
    {$ENDIF}
  end;
  

  function sg_Characters_LoadCharacterNamed(name: PChar; filename: PChar): Character; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_LoadCharacterNamed');
    {$ENDIF}
    
    try
      result := sgCharacters.LoadCharacterNamed(name, filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_LoadCharacterNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_LoadCharacterNamed');
    {$ENDIF}
  end;
  

  procedure sg_Characters_ReleaseAllCharacters(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_ReleaseAllCharacters');
    {$ENDIF}
  
    try 
       sgCharacters.ReleaseAllCharacters();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_ReleaseAllCharacters');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_ReleaseAllCharacters');
    {$ENDIF}
  end;
  

  procedure sg_Characters_ReleaseCharacter(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_ReleaseCharacter');
    {$ENDIF}
  
    try 
       sgCharacters.ReleaseCharacter(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_ReleaseCharacter');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_ReleaseCharacter');
    {$ENDIF}
  end;
  

  procedure sg_Characters_SetActiveLayer(c: Character); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_SetActiveLayer');
    {$ENDIF}
  
    try 
       sgCharacters.SetActiveLayer(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_SetActiveLayer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_SetActiveLayer');
    {$ENDIF}
  end;
  

  procedure sg_Characters_ToggleLayerVisibility(c: Character; index: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_ToggleLayerVisibility');
    {$ENDIF}
  
    try 
       sgCharacters.ToggleLayerVisibility(c, index);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_ToggleLayerVisibility');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_ToggleLayerVisibility');
    {$ENDIF}
  end;
  

  function sg_Characters_UpdateDirectionAnimation(c: Character): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_UpdateDirectionAnimation');
    {$ENDIF}
    
    try
      result := sgCharacters.UpdateDirectionAnimation(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_UpdateDirectionAnimation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_UpdateDirectionAnimation');
    {$ENDIF}
  end;
  

  function sg_Characters_UpdateDirectionAnimationWithStationary(c: Character; state: Longint; newState: Longint): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Characters_UpdateDirectionAnimationWithStationary');
    {$ENDIF}
    
    try
      result := sgCharacters.UpdateDirectionAnimationWithStationary(c, state, newState);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Characters_UpdateDirectionAnimationWithStationary');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Characters_UpdateDirectionAnimationWithStationary');
    {$ENDIF}
  end;
  

  function sg_Geometry_AddVectors(var v1: Vector; var v2: Vector): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_AddVectors');
    {$ENDIF}
    
    try
      result := sgGeometry.AddVectors(v1, v2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_AddVectors');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_AddVectors');
    {$ENDIF}
  end;
  

  procedure sg_Geometry_ApplyMatrix(var m: Matrix2D; var tri: Triangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ApplyMatrix');
    {$ENDIF}
  
    try 
       sgGeometry.ApplyMatrix(m, tri);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ApplyMatrix');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ApplyMatrix');
    {$ENDIF}
  end;
  

  procedure sg_Geometry_ApplyMatrixToPoints(var m: Matrix2D; pts: Point2DPtr; pts_len: Longint); cdecl; export;
    var
      pts_temp: Point2DArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ApplyMatrixToPoints');
    {$ENDIF}
  
    try 
        Point2DCopyFromPtr(pts, pts_len, pts_temp);
       sgGeometry.ApplyMatrix(m, pts_temp);
        Point2DCopyToPtr(pts_temp, pts_len, pts);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ApplyMatrixToPoints');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ApplyMatrixToPoints');
    {$ENDIF}
  end;
  

  function sg_Geometry_CalculateAngle(x1: Single; y1: Single; x2: Single; y2: Single): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CalculateAngle');
    {$ENDIF}
    
    try
      result := sgGeometry.CalculateAngle(x1, y1, x2, y2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CalculateAngle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CalculateAngle');
    {$ENDIF}
  end;
  

  function sg_Geometry_CalculateAngleBetween(var pt1: Point2D; var pt2: Point2D): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CalculateAngleBetween');
    {$ENDIF}
    
    try
      result := sgGeometry.CalculateAngleBetween(pt1, pt2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CalculateAngleBetween');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CalculateAngleBetween');
    {$ENDIF}
  end;
  

  function sg_Geometry_CalculateAngleBetweenSprites(s1: Sprite; s2: Sprite): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CalculateAngleBetweenSprites');
    {$ENDIF}
    
    try
      result := sgGeometry.CalculateAngle(s1, s2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CalculateAngleBetweenSprites');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CalculateAngleBetweenSprites');
    {$ENDIF}
  end;
  

  function sg_Geometry_CalculateAngleBetweenVectors(var v1: Vector; var v2: Vector): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CalculateAngleBetweenVectors');
    {$ENDIF}
    
    try
      result := sgGeometry.CalculateAngle(v1, v2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CalculateAngleBetweenVectors');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CalculateAngleBetweenVectors');
    {$ENDIF}
  end;
  

  function sg_Geometry_CircleAt(var pt: Point2D; radius: Longint): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CircleAt');
    {$ENDIF}
    
    try
      result := sgGeometry.CircleAt(pt, radius);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CircleAt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CircleAt');
    {$ENDIF}
  end;
  

  function sg_Geometry_CircleCenterPoint(var c: Circle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CircleCenterPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.CenterPoint(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CircleCenterPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CircleCenterPoint');
    {$ENDIF}
  end;
  

  function sg_Geometry_CircleFromXY(x: Single; y: Single; radius: Longint): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CircleFromXY');
    {$ENDIF}
    
    try
      result := sgGeometry.CircleAt(x, y, radius);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CircleFromXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CircleFromXY');
    {$ENDIF}
  end;
  

  function sg_Geometry_CircleRadius(var c: Circle): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CircleRadius');
    {$ENDIF}
    
    try
      result := sgGeometry.CircleRadius(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CircleRadius');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CircleRadius');
    {$ENDIF}
  end;
  

  function sg_Geometry_CircleWithinRect(var c: Circle; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CircleWithinRect');
    {$ENDIF}
    
    try
      result := sgGeometry.CircleWithinRect(c, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CircleWithinRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CircleWithinRect');
    {$ENDIF}
  end;
  

  function sg_Geometry_CircleX(var c: Circle): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CircleX');
    {$ENDIF}
    
    try
      result := sgGeometry.CircleX(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CircleX');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CircleX');
    {$ENDIF}
  end;
  

  function sg_Geometry_CircleY(var c: Circle): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CircleY');
    {$ENDIF}
    
    try
      result := sgGeometry.CircleY(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CircleY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CircleY');
    {$ENDIF}
  end;
  

  function sg_Geometry_ClosestPointOnCircle(var fromPt: Point2D; var c: Circle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ClosestPointOnCircle');
    {$ENDIF}
    
    try
      result := sgGeometry.ClosestPointOnCircle(fromPt, c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ClosestPointOnCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ClosestPointOnCircle');
    {$ENDIF}
  end;
  

  function sg_Geometry_ClosestPointOnLine(var fromPt: Point2D; var line: LineSegment): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ClosestPointOnLine');
    {$ENDIF}
    
    try
      result := sgGeometry.ClosestPointOnLine(fromPt, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ClosestPointOnLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ClosestPointOnLine');
    {$ENDIF}
  end;
  

  function sg_Geometry_ClosestPointOnLineFromCircle(var c: Circle; var line: LineSegment): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ClosestPointOnLineFromCircle');
    {$ENDIF}
    
    try
      result := sgGeometry.ClosestPointOnLineFromCircle(c, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ClosestPointOnLineFromCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ClosestPointOnLineFromCircle');
    {$ENDIF}
  end;
  

  function sg_Geometry_ClosestPointOnLineXY(x: Single; y: Single; var line: LineSegment): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ClosestPointOnLineXY');
    {$ENDIF}
    
    try
      result := sgGeometry.ClosestPointOnLine(x, y, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ClosestPointOnLineXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ClosestPointOnLineXY');
    {$ENDIF}
  end;
  

  function sg_Geometry_ClosestPointOnLinesFromCircle(var c: Circle; lines: LineSegmentPtr; lines_len: Longint): Point2D; cdecl; export;
    var
      lines_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ClosestPointOnLinesFromCircle');
    {$ENDIF}
    
    try
        LineCopyFromPtr(lines, lines_len, lines_temp);
      result := sgGeometry.ClosestPointOnLinesFromCircle(c, lines_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ClosestPointOnLinesFromCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ClosestPointOnLinesFromCircle');
    {$ENDIF}
  end;
  

  function sg_Geometry_ClosestPointOnRectFromCircle(var c: Circle; var rect: Rectangle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ClosestPointOnRectFromCircle');
    {$ENDIF}
    
    try
      result := sgGeometry.ClosestPointOnRectFromCircle(c, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ClosestPointOnRectFromCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ClosestPointOnRectFromCircle');
    {$ENDIF}
  end;
  

  function sg_Geometry_Cosine(angle: Single): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_Cosine');
    {$ENDIF}
    
    try
      result := sgGeometry.Cosine(angle);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_Cosine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_Cosine');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateCircle(var pt: Point2D; radius: Longint): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateCircle');
    {$ENDIF}
    
    try
      result := sgGeometry.CreateCircle(pt, radius);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateCircle');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateCircleFromXY(x: Single; y: Single; radius: Longint): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateCircleFromXY');
    {$ENDIF}
    
    try
      result := sgGeometry.CreateCircle(x, y, radius);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateCircleFromXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateCircleFromXY');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateLine(x1: Single; y1: Single; x2: Single; y2: Single): LineSegment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateLine');
    {$ENDIF}
    
    try
      result := sgGeometry.CreateLine(x1, y1, x2, y2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateLine');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateLineAsVector(var line: LineSegment): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateLineAsVector');
    {$ENDIF}
    
    try
      result := sgGeometry.CreateLineAsVector(line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateLineAsVector');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateLineAsVector');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateLineFromVector(var mv: Vector): LineSegment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateLineFromVector');
    {$ENDIF}
    
    try
      result := sgGeometry.CreateLineFromVector(mv);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateLineFromVector');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateLineFromVector');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateLinePointToPoint(var pt1: Point2D; var pt2: Point2D): LineSegment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateLinePointToPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.CreateLine(pt1, pt2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateLinePointToPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateLinePointToPoint');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateLineVectorWithStartPoint(var pt: Point2D; var mv: Vector): LineSegment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateLineVectorWithStartPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.CreateLineFromVector(pt, mv);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateLineVectorWithStartPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateLineVectorWithStartPoint');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateLineVectorWithStartXY(x: Single; y: Single; var mv: Vector): LineSegment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateLineVectorWithStartXY');
    {$ENDIF}
    
    try
      result := sgGeometry.CreateLineFromVector(x, y, mv);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateLineVectorWithStartXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateLineVectorWithStartXY');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateRectangle(x: Single; y: Single; w: Longint; h: Longint): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateRectangle');
    {$ENDIF}
    
    try
      result := sgGeometry.CreateRectangle(x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateRectangle');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateRectangleAtPoint(var pt: Point2D; width: Longint; height: Longint): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateRectangleAtPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.CreateRectangle(pt, width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateRectangleAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateRectangleAtPoint');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateRectangleCircle(var c: Circle): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateRectangleCircle');
    {$ENDIF}
    
    try
      result := sgGeometry.CreateRectangle(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateRectangleCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateRectangleCircle');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateRectangleForPoints(var pt1: Point2D; var pt2: Point2D): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateRectangleForPoints');
    {$ENDIF}
    
    try
      result := sgGeometry.CreateRectangle(pt1, pt2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateRectangleForPoints');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateRectangleForPoints');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateRectangleLine(var line: LineSegment): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateRectangleLine');
    {$ENDIF}
    
    try
      result := sgGeometry.CreateRectangle(line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateRectangleLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateRectangleLine');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateRectangleLines(lines: LineSegmentPtr; lines_len: Longint): Rectangle; cdecl; export;
    var
      lines_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateRectangleLines');
    {$ENDIF}
    
    try
        LineCopyFromPtr(lines, lines_len, lines_temp);
      result := sgGeometry.CreateRectangle(lines_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateRectangleLines');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateRectangleLines');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateRectangleTriangle(var tri: Triangle): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateRectangleTriangle');
    {$ENDIF}
    
    try
      result := sgGeometry.CreateRectangle(tri);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateRectangleTriangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateRectangleTriangle');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateTriangle(ax: Single; ay: Single; bx: Single; by: Single; cx: Single; cy: Single): Triangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateTriangle');
    {$ENDIF}
    
    try
      result := sgGeometry.CreateTriangle(ax, ay, bx, by, cx, cy);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateTriangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateTriangle');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateTrianglePoints(var a: Point2D; var b: Point2D; var c: Point2D): Triangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateTrianglePoints');
    {$ENDIF}
    
    try
      result := sgGeometry.CreateTriangle(a, b, c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateTrianglePoints');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateTrianglePoints');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateVectorFromAngle(angle: Single; magnitude: Single): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateVectorFromAngle');
    {$ENDIF}
    
    try
      result := sgGeometry.CreateVectorFromAngle(angle, magnitude);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateVectorFromAngle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateVectorFromAngle');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateVectorFromPointPtToRectangle(var pt: Point2D; var rect: Rectangle): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateVectorFromPointPtToRectangle');
    {$ENDIF}
    
    try
      result := sgGeometry.CreateVectorFromPointToRect(pt, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateVectorFromPointPtToRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateVectorFromPointPtToRectangle');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateVectorFromPointToRect(x: Single; y: Single; rectX: Single; rectY: Single; rectWidth: Longint; rectHeight: Longint): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateVectorFromPointToRect');
    {$ENDIF}
    
    try
      result := sgGeometry.CreateVectorFromPointToRect(x, y, rectX, rectY, rectWidth, rectHeight);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateVectorFromPointToRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateVectorFromPointToRect');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateVectorFromPointToRectangle(x: Single; y: Single; var rect: Rectangle): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateVectorFromPointToRectangle');
    {$ENDIF}
    
    try
      result := sgGeometry.CreateVectorFromPointToRect(x, y, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateVectorFromPointToRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateVectorFromPointToRectangle');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateVectorFromPoints(var p1: Point2D; var p2: Point2D): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateVectorFromPoints');
    {$ENDIF}
    
    try
      result := sgGeometry.CreateVectorFromPoints(p1, p2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateVectorFromPoints');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateVectorFromPoints');
    {$ENDIF}
  end;
  

  function sg_Geometry_CreateVectorToPoint(var p1: Point2D): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CreateVectorToPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.CreateVectorToPoint(p1);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CreateVectorToPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CreateVectorToPoint');
    {$ENDIF}
  end;
  

  function sg_Geometry_DistantPointOnCircle(var pt: Point2D; var c: Circle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_DistantPointOnCircle');
    {$ENDIF}
    
    try
      result := sgGeometry.DistantPointOnCircle(pt, c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_DistantPointOnCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_DistantPointOnCircle');
    {$ENDIF}
  end;
  

  function sg_Geometry_DistantPointOnCircleHeading(var pt: Point2D; var c: Circle; var heading: Vector; out oppositePt: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_DistantPointOnCircleHeading');
    {$ENDIF}
    
    try
      result := sgGeometry.DistantPointOnCircleHeading(pt, c, heading, oppositePt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_DistantPointOnCircleHeading');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_DistantPointOnCircleHeading');
    {$ENDIF}
  end;
  

  function sg_Geometry_DotProduct(var v1: Vector; var v2: Vector): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_DotProduct');
    {$ENDIF}
    
    try
      result := sgGeometry.DotProduct(v1, v2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_DotProduct');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_DotProduct');
    {$ENDIF}
  end;
  

  procedure sg_Geometry_FixRect(var x: Single; var y: Single; var width: Longint; var height: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_FixRect');
    {$ENDIF}
  
    try 
       sgGeometry.FixRectangle(x, y, width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_FixRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_FixRect');
    {$ENDIF}
  end;
  

  procedure sg_Geometry_FixRectangle(var rect: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_FixRectangle');
    {$ENDIF}
  
    try 
       sgGeometry.FixRectangle(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_FixRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_FixRectangle');
    {$ENDIF}
  end;
  

  function sg_Geometry_IdentityMatrix(): Matrix2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_IdentityMatrix');
    {$ENDIF}
    
    try
      result := sgGeometry.IdentityMatrix();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_IdentityMatrix');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_IdentityMatrix');
    {$ENDIF}
  end;
  

  function sg_Geometry_InsetRectangle(var rect: Rectangle; insetAmount: Longint): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_InsetRectangle');
    {$ENDIF}
    
    try
      result := sgGeometry.InsetRectangle(rect, insetAmount);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_InsetRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_InsetRectangle');
    {$ENDIF}
  end;
  

  function sg_Geometry_Intersection(var rect1: Rectangle; var rect2: Rectangle): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_Intersection');
    {$ENDIF}
    
    try
      result := sgGeometry.Intersection(rect1, rect2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_Intersection');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_Intersection');
    {$ENDIF}
  end;
  

  function sg_Geometry_InvertVector(var v: Vector): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_InvertVector');
    {$ENDIF}
    
    try
      result := sgGeometry.InvertVector(v);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_InvertVector');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_InvertVector');
    {$ENDIF}
  end;
  

  function sg_Geometry_LimitVector(var v: Vector; limit: Single): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LimitVector');
    {$ENDIF}
    
    try
      result := sgGeometry.LimitVector(v, limit);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LimitVector');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LimitVector');
    {$ENDIF}
  end;
  

  function sg_Geometry_LineAsVector(var line: LineSegment): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineAsVector');
    {$ENDIF}
    
    try
      result := sgGeometry.LineAsVector(line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineAsVector');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineAsVector');
    {$ENDIF}
  end;
  

  function sg_Geometry_LineCircleHit(var c: Circle; var velocity: Vector; lines: LineSegmentPtr; out found: LineSegment; lines_len: Longint): Boolean; cdecl; export;
    var
      lines_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineCircleHit');
    {$ENDIF}
    
    try
        LineCopyFromPtr(lines, lines_len, lines_temp);
      result := sgGeometry.LineCircleHit(c, velocity, lines_temp, found);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineCircleHit');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineCircleHit');
    {$ENDIF}
  end;
  

  function sg_Geometry_LineFrom(x1: Single; y1: Single; x2: Single; y2: Single): LineSegment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineFrom');
    {$ENDIF}
    
    try
      result := sgGeometry.LineFrom(x1, y1, x2, y2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineFrom');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineFrom');
    {$ENDIF}
  end;
  

  function sg_Geometry_LineFromPointToPoint(var pt1: Point2D; var pt2: Point2D): LineSegment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineFromPointToPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.LineFrom(pt1, pt2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineFromPointToPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineFromPointToPoint');
    {$ENDIF}
  end;
  

  function sg_Geometry_LineFromVector(var mv: Vector): LineSegment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineFromVector');
    {$ENDIF}
    
    try
      result := sgGeometry.LineFromVector(mv);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineFromVector');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineFromVector');
    {$ENDIF}
  end;
  

  function sg_Geometry_LineFromVectorWithStartPoint(var pt: Point2D; var mv: Vector): LineSegment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineFromVectorWithStartPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.LineFromVector(pt, mv);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineFromVectorWithStartPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineFromVectorWithStartPoint');
    {$ENDIF}
  end;
  

  function sg_Geometry_LineFromVectorWithStartXY(x: Single; y: Single; var mv: Vector): LineSegment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineFromVectorWithStartXY');
    {$ENDIF}
    
    try
      result := sgGeometry.LineFromVector(x, y, mv);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineFromVectorWithStartXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineFromVectorWithStartXY');
    {$ENDIF}
  end;
  

  function sg_Geometry_LineIntersectionPoint(var line1: LineSegment; var line2: LineSegment; out pt: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineIntersectionPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.LineIntersectionPoint(line1, line2, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineIntersectionPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineIntersectionPoint');
    {$ENDIF}
  end;
  

  function sg_Geometry_LineIntersectsCircle(var l: LineSegment; var c: Circle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineIntersectsCircle');
    {$ENDIF}
    
    try
      result := sgGeometry.LineIntersectsCircle(l, c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineIntersectsCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineIntersectsCircle');
    {$ENDIF}
  end;
  

  function sg_Geometry_LineIntersectsLines(var line: LineSegment; lines: LineSegmentPtr; lines_len: Longint): Boolean; cdecl; export;
    var
      lines_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineIntersectsLines');
    {$ENDIF}
    
    try
        LineCopyFromPtr(lines, lines_len, lines_temp);
      result := sgGeometry.LineIntersectsLines(line, lines_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineIntersectsLines');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineIntersectsLines');
    {$ENDIF}
  end;
  

  function sg_Geometry_LineIntersectsRect(var line: LineSegment; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineIntersectsRect');
    {$ENDIF}
    
    try
      result := sgGeometry.LineIntersectsRect(line, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineIntersectsRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineIntersectsRect');
    {$ENDIF}
  end;
  

  function sg_Geometry_LineMagnitudeSq(x1: Single; y1: Single; x2: Single; y2: Single): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineMagnitudeSq');
    {$ENDIF}
    
    try
      result := sgGeometry.LineMagnitudeSq(x1, y1, x2, y2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineMagnitudeSq');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineMagnitudeSq');
    {$ENDIF}
  end;
  

  function sg_Geometry_LineMagnitudeSqFromLine(var line: LineSegment): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineMagnitudeSqFromLine');
    {$ENDIF}
    
    try
      result := sgGeometry.LineMagnitudeSq(line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineMagnitudeSqFromLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineMagnitudeSqFromLine');
    {$ENDIF}
  end;
  

  function sg_Geometry_LineMidPoint(var line: LineSegment): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineMidPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.LineMidPoint(line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineMidPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineMidPoint');
    {$ENDIF}
  end;
  

  function sg_Geometry_LineNormal(var line: LineSegment): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineNormal');
    {$ENDIF}
    
    try
      result := sgGeometry.LineNormal(line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineNormal');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineNormal');
    {$ENDIF}
  end;
  

  function sg_Geometry_LineSegmentsIntersect(var line1: LineSegment; var line2: LineSegment): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineSegmentsIntersect');
    {$ENDIF}
    
    try
      result := sgGeometry.LineSegmentsIntersect(line1, line2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineSegmentsIntersect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineSegmentsIntersect');
    {$ENDIF}
  end;
  

  procedure sg_Geometry_LineToString(var ln: LineSegment; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineToString');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.LineToString(ln);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineToString');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineToString');
    {$ENDIF}
  end;
  

  procedure sg_Geometry_LinesFromRect(var rect: Rectangle; result: LineSegmentPtr; result_len: Longint); cdecl; export;
    var
      result_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LinesFromRect');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.LinesFrom(rect);
        LineCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LinesFromRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LinesFromRect');
    {$ENDIF}
  end;
  

  procedure sg_Geometry_LinesFromTriangle(var tri: Triangle; result: LineSegmentPtr; result_len: Longint); cdecl; export;
    var
      result_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LinesFromTriangle');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.LinesFrom(tri);
        LineCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LinesFromTriangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LinesFromTriangle');
    {$ENDIF}
  end;
  

  function sg_Geometry_LinesRectIntersect(lines: LineSegmentPtr; var r: Rectangle; lines_len: Longint): Boolean; cdecl; export;
    var
      lines_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LinesRectIntersect');
    {$ENDIF}
    
    try
        LineCopyFromPtr(lines, lines_len, lines_temp);
      result := sgGeometry.LinesRectIntersect(lines_temp, r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LinesRectIntersect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LinesRectIntersect');
    {$ENDIF}
  end;
  

  function sg_Geometry_MatrixMultiply(var m1: Matrix2D; var m2: Matrix2D): Matrix2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_MatrixMultiply');
    {$ENDIF}
    
    try
      result := sgGeometry.MatrixMultiply(m1, m2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_MatrixMultiply');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_MatrixMultiply');
    {$ENDIF}
  end;
  

  function sg_Geometry_MatrixMultiplyVector(var m: Matrix2D; var v: Vector): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_MatrixMultiplyVector');
    {$ENDIF}
    
    try
      result := sgGeometry.MatrixMultiply(m, v);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_MatrixMultiplyVector');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_MatrixMultiplyVector');
    {$ENDIF}
  end;
  

  procedure sg_Geometry_MatrixToString(var m: Matrix2D; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_MatrixToString');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.MatrixToString(m);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_MatrixToString');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_MatrixToString');
    {$ENDIF}
  end;
  

  function sg_Geometry_PointAdd(var pt1: Point2D; var pt2: Point2D): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointAdd');
    {$ENDIF}
    
    try
      result := sgGeometry.PointAdd(pt1, pt2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointAdd');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointAdd');
    {$ENDIF}
  end;
  

  function sg_Geometry_PointAt(x: Single; y: Single): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointAt');
    {$ENDIF}
    
    try
      result := sgGeometry.PointAt(x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointAt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointAt');
    {$ENDIF}
  end;
  

  function sg_Geometry_PointAtStartWithOffset(var startPoint: Point2D; var offset: Vector): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointAtStartWithOffset');
    {$ENDIF}
    
    try
      result := sgGeometry.PointAt(startPoint, offset);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointAtStartWithOffset');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointAtStartWithOffset');
    {$ENDIF}
  end;
  

  function sg_Geometry_PointInCircle(var pt: Point2D; var c: Circle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointInCircle');
    {$ENDIF}
    
    try
      result := sgGeometry.PointInCircle(pt, c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointInCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointInCircle');
    {$ENDIF}
  end;
  

  function sg_Geometry_PointInCirclePt(var pt: Point2D; x: Single; y: Single; radius: Single): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointInCirclePt');
    {$ENDIF}
    
    try
      result := sgGeometry.PointInCircle(pt, x, y, radius);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointInCirclePt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointInCirclePt');
    {$ENDIF}
  end;
  

  function sg_Geometry_PointInRect(var pt: Point2D; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointInRect');
    {$ENDIF}
    
    try
      result := sgGeometry.PointInRect(pt, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointInRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointInRect');
    {$ENDIF}
  end;
  

  function sg_Geometry_PointInRectXY(var pt: Point2D; x: Single; y: Single; w: Single; h: Single): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointInRectXY');
    {$ENDIF}
    
    try
      result := sgGeometry.PointInRect(pt, x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointInRectXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointInRectXY');
    {$ENDIF}
  end;
  

  function sg_Geometry_PointInTriangle(var pt: Point2D; var tri: Triangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointInTriangle');
    {$ENDIF}
    
    try
      result := sgGeometry.PointInTriangle(pt, tri);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointInTriangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointInTriangle');
    {$ENDIF}
  end;
  

  function sg_Geometry_PointLineDistance(var pt: Point2D; var line: LineSegment): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointLineDistance');
    {$ENDIF}
    
    try
      result := sgGeometry.PointLineDistance(pt, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointLineDistance');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointLineDistance');
    {$ENDIF}
  end;
  

  function sg_Geometry_PointOnLine(var pt: Point2D; var line: LineSegment): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointOnLine');
    {$ENDIF}
    
    try
      result := sgGeometry.PointOnLine(pt, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointOnLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointOnLine');
    {$ENDIF}
  end;
  

  function sg_Geometry_PointOnLineXYXY(var pt: Point2D; x: Single; y: Single; endX: Single; endY: Single): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointOnLineXYXY');
    {$ENDIF}
    
    try
      result := sgGeometry.PointOnLine(pt, x, y, endX, endY);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointOnLineXYXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointOnLineXYXY');
    {$ENDIF}
  end;
  

  function sg_Geometry_PointOnPoint(var pt1: Point2D; var pt2: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointOnPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.PointOnPoint(pt1, pt2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointOnPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointOnPoint');
    {$ENDIF}
  end;
  

  function sg_Geometry_PointPointDistance(var pt1: Point2D; var pt2: Point2D): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointPointDistance');
    {$ENDIF}
    
    try
      result := sgGeometry.PointPointDistance(pt1, pt2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointPointDistance');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointPointDistance');
    {$ENDIF}
  end;
  

  procedure sg_Geometry_PointToString(var pt: Point2D; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointToString');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.PointToString(pt);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointToString');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointToString');
    {$ENDIF}
  end;
  

  function sg_Geometry_PointXYInCircle(ptX: Single; ptY: Single; cX: Single; cY: Single; radius: Single): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointXYInCircle');
    {$ENDIF}
    
    try
      result := sgGeometry.PointInCircle(ptX, ptY, cX, cY, radius);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointXYInCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointXYInCircle');
    {$ENDIF}
  end;
  

  function sg_Geometry_PointXYInRect(x: Single; y: Single; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointXYInRect');
    {$ENDIF}
    
    try
      result := sgGeometry.PointInRect(x, y, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointXYInRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointXYInRect');
    {$ENDIF}
  end;
  

  function sg_Geometry_PointXYInRectXY(ptX: Single; ptY: Single; x: Single; y: Single; w: Single; h: Single): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointXYInRectXY');
    {$ENDIF}
    
    try
      result := sgGeometry.PointInRect(ptX, ptY, x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointXYInRectXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointXYInRectXY');
    {$ENDIF}
  end;
  

  function sg_Geometry_PointXYLineDistance(x: Single; y: Single; var line: LineSegment): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointXYLineDistance');
    {$ENDIF}
    
    try
      result := sgGeometry.PointLineDistance(x, y, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointXYLineDistance');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointXYLineDistance');
    {$ENDIF}
  end;
  

  procedure sg_Geometry_PointsFromLine(var line: LineSegment; result: Point2DPtr; result_len: Longint); cdecl; export;
    var
      result_temp: Point2DArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointsFromLine');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.PointsFrom(line);
        Point2DCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointsFromLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointsFromLine');
    {$ENDIF}
  end;
  

  procedure sg_Geometry_PointsFromRect(var rect: Rectangle; result: Point2DPtr; result_len: Longint); cdecl; export;
    var
      result_temp: Point2DArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointsFromRect');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.PointsFrom(rect);
        Point2DCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointsFromRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointsFromRect');
    {$ENDIF}
  end;
  

  function sg_Geometry_RandomScreenPoint(): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RandomScreenPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.RandomScreenPoint();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RandomScreenPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RandomScreenPoint');
    {$ENDIF}
  end;
  

  function sg_Geometry_RayCircleIntersectDistance(var ray_origin: Point2D; var ray_heading: Vector; var c: Circle): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RayCircleIntersectDistance');
    {$ENDIF}
    
    try
      result := sgGeometry.RayCircleIntersectDistance(ray_origin, ray_heading, c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RayCircleIntersectDistance');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RayCircleIntersectDistance');
    {$ENDIF}
  end;
  

  function sg_Geometry_RayIntersectionPoint(var fromPt: Point2D; var heading: Vector; var line: LineSegment; out pt: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RayIntersectionPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.RayIntersectionPoint(fromPt, heading, line, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RayIntersectionPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RayIntersectionPoint');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectangleAfterMove(var rect: Rectangle; var mv: Vector): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleAfterMove');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleAfterMove(rect, mv);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleAfterMove');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleAfterMove');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectangleAtPoint(var pt: Point2D; width: Longint; height: Longint): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleAtPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleFrom(pt, width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleAtPoint');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectangleBottom(var rect: Rectangle): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleBottom');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleBottom(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleBottom');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleBottom');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectangleBottomLeft(var rect: Rectangle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleBottomLeft');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleBottomLeft(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleBottomLeft');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleBottomLeft');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectangleBottomRight(var rect: Rectangle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleBottomRight');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleBottomRight(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleBottomRight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleBottomRight');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectangleCenter(var rect: Rectangle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleCenter');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleCenter(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleCenter');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleCenter');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectangleCenterBottom(var rect: Rectangle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleCenterBottom');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleCenterBottom(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleCenterBottom');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleCenterBottom');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectangleCenterLeft(var rect: Rectangle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleCenterLeft');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleCenterLeft(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleCenterLeft');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleCenterLeft');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectangleCenterRight(var rect: Rectangle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleCenterRight');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleCenterRight(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleCenterRight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleCenterRight');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectangleCenterTop(var rect: Rectangle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleCenterTop');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleCenterTop(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleCenterTop');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleCenterTop');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectangleForPoints(var pt1: Point2D; var pt2: Point2D): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleForPoints');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleFrom(pt1, pt2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleForPoints');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleForPoints');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectangleFrom(x: Single; y: Single; w: Longint; h: Longint): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleFrom');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleFrom(x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleFrom');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleFrom');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectangleFromCircle(var c: Circle): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleFromCircle');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleFrom(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleFromCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleFromCircle');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectangleFromLine(var line: LineSegment): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleFromLine');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleFrom(line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleFromLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleFromLine');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectangleFromLines(lines: LineSegmentPtr; lines_len: Longint): Rectangle; cdecl; export;
    var
      lines_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleFromLines');
    {$ENDIF}
    
    try
        LineCopyFromPtr(lines, lines_len, lines_temp);
      result := sgGeometry.RectangleFrom(lines_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleFromLines');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleFromLines');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectangleFromTriangle(var tri: Triangle): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleFromTriangle');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleFrom(tri);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleFromTriangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleFromTriangle');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectangleLeft(var rect: Rectangle): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleLeft');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleLeft(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleLeft');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleLeft');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectangleOffset(var rect: Rectangle; var vec: Vector): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleOffset');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleOffset(rect, vec);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleOffset');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleOffset');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectangleRight(var rect: Rectangle): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleRight');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleRight(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleRight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleRight');
    {$ENDIF}
  end;
  

  procedure sg_Geometry_RectangleToString(var rect: Rectangle; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleToString');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.RectangleToString(rect);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleToString');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleToString');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectangleTop(var rect: Rectangle): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleTop');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleTop(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleTop');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleTop');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectangleTopLeft(var rect: Rectangle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleTopLeft');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleTopLeft(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleTopLeft');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleTopLeft');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectangleTopRight(var rect: Rectangle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleTopRight');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleTopRight(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleTopRight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleTopRight');
    {$ENDIF}
  end;
  

  function sg_Geometry_RectanglesIntersect(var rect1: Rectangle; var rect2: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectanglesIntersect');
    {$ENDIF}
    
    try
      result := sgGeometry.RectanglesIntersect(rect1, rect2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectanglesIntersect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectanglesIntersect');
    {$ENDIF}
  end;
  

  function sg_Geometry_RotationMatrix(deg: Single): Matrix2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RotationMatrix');
    {$ENDIF}
    
    try
      result := sgGeometry.RotationMatrix(deg);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RotationMatrix');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RotationMatrix');
    {$ENDIF}
  end;
  

  function sg_Geometry_ScaleMatrix(scale: Single): Matrix2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ScaleMatrix');
    {$ENDIF}
    
    try
      result := sgGeometry.ScaleMatrix(scale);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ScaleMatrix');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ScaleMatrix');
    {$ENDIF}
  end;
  

  function sg_Geometry_ScaleMatrixByPoint(var scale: Point2D): Matrix2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ScaleMatrixByPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.ScaleMatrix(scale);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ScaleMatrixByPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ScaleMatrixByPoint');
    {$ENDIF}
  end;
  

  function sg_Geometry_ScaleRotateTranslateMatrix(var scale: Point2D; deg: Single; var translate: Point2D): Matrix2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ScaleRotateTranslateMatrix');
    {$ENDIF}
    
    try
      result := sgGeometry.ScaleRotateTranslateMatrix(scale, deg, translate);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ScaleRotateTranslateMatrix');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ScaleRotateTranslateMatrix');
    {$ENDIF}
  end;
  

  function sg_Geometry_Sine(angle: Single): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_Sine');
    {$ENDIF}
    
    try
      result := sgGeometry.Sine(angle);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_Sine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_Sine');
    {$ENDIF}
  end;
  

  function sg_Geometry_SubtractVectors(var v1: Vector; var v2: Vector): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_SubtractVectors');
    {$ENDIF}
    
    try
      result := sgGeometry.SubtractVectors(v1, v2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_SubtractVectors');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_SubtractVectors');
    {$ENDIF}
  end;
  

  function sg_Geometry_Tangent(angle: Single): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_Tangent');
    {$ENDIF}
    
    try
      result := sgGeometry.Tangent(angle);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_Tangent');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_Tangent');
    {$ENDIF}
  end;
  

  function sg_Geometry_TangentPoints(var fromPt: Point2D; var c: Circle; out p1: Point2D; out p2: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_TangentPoints');
    {$ENDIF}
    
    try
      result := sgGeometry.TangentPoints(fromPt, c, p1, p2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_TangentPoints');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_TangentPoints');
    {$ENDIF}
  end;
  

  function sg_Geometry_TranslationMatrix(dx: Single; dy: Single): Matrix2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_TranslationMatrix');
    {$ENDIF}
    
    try
      result := sgGeometry.TranslationMatrix(dx, dy);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_TranslationMatrix');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_TranslationMatrix');
    {$ENDIF}
  end;
  

  function sg_Geometry_TranslationMatrixPt(var pt: Point2D): Matrix2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_TranslationMatrixPt');
    {$ENDIF}
    
    try
      result := sgGeometry.TranslationMatrix(pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_TranslationMatrixPt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_TranslationMatrixPt');
    {$ENDIF}
  end;
  

  function sg_Geometry_TriangleBarycenter(var tri: Triangle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_TriangleBarycenter');
    {$ENDIF}
    
    try
      result := sgGeometry.TriangleBarycenter(tri);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_TriangleBarycenter');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_TriangleBarycenter');
    {$ENDIF}
  end;
  

  function sg_Geometry_TriangleFrom(ax: Single; ay: Single; bx: Single; by: Single; cx: Single; cy: Single): Triangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_TriangleFrom');
    {$ENDIF}
    
    try
      result := sgGeometry.TriangleFrom(ax, ay, bx, by, cx, cy);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_TriangleFrom');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_TriangleFrom');
    {$ENDIF}
  end;
  

  function sg_Geometry_TriangleFromPoints(var a: Point2D; var b: Point2D; var c: Point2D): Triangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_TriangleFromPoints');
    {$ENDIF}
    
    try
      result := sgGeometry.TriangleFrom(a, b, c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_TriangleFromPoints');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_TriangleFromPoints');
    {$ENDIF}
  end;
  

  function sg_Geometry_TriangleRectangleIntersect(var tri: Triangle; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_TriangleRectangleIntersect');
    {$ENDIF}
    
    try
      result := sgGeometry.TriangleRectangleIntersect(tri, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_TriangleRectangleIntersect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_TriangleRectangleIntersect');
    {$ENDIF}
  end;
  

  procedure sg_Geometry_TriangleToString(var tri: Triangle; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_TriangleToString');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.TriangleToString(tri);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_TriangleToString');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_TriangleToString');
    {$ENDIF}
  end;
  

  function sg_Geometry_TrianglesRectangleIntersect(tri: TrianglePtr; var rect: Rectangle; tri_len: Longint): Boolean; cdecl; export;
    var
      tri_temp: TriangleArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_TrianglesRectangleIntersect');
    {$ENDIF}
    
    try
        TriangleCopyFromPtr(tri, tri_len, tri_temp);
      result := sgGeometry.TrianglesRectangleIntersect(tri_temp, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_TrianglesRectangleIntersect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_TrianglesRectangleIntersect');
    {$ENDIF}
  end;
  

  function sg_Geometry_UnitVector(var v: Vector): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_UnitVector');
    {$ENDIF}
    
    try
      result := sgGeometry.UnitVector(v);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_UnitVector');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_UnitVector');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorAngle(var v: Vector): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorAngle');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorAngle(v);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorAngle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorAngle');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorFromAngle(angle: Single; magnitude: Single): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorFromAngle');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorFromAngle(angle, magnitude);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorFromAngle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorFromAngle');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorFromPointPtToRectangle(var pt: Point2D; var rect: Rectangle): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorFromPointPtToRectangle');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorFromPointToRect(pt, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorFromPointPtToRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorFromPointPtToRectangle');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorFromPointToRect(x: Single; y: Single; rectX: Single; rectY: Single; rectWidth: Longint; rectHeight: Longint): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorFromPointToRect');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorFromPointToRect(x, y, rectX, rectY, rectWidth, rectHeight);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorFromPointToRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorFromPointToRect');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorFromPointToRectangle(x: Single; y: Single; var rect: Rectangle): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorFromPointToRectangle');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorFromPointToRect(x, y, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorFromPointToRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorFromPointToRectangle');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorFromPoints(var p1: Point2D; var p2: Point2D): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorFromPoints');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorFromPoints(p1, p2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorFromPoints');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorFromPoints');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorInRect(var v: Vector; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorInRect');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorInRect(v, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorInRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorInRect');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorInRectXY(var v: Vector; x: Single; y: Single; w: Single; h: Single): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorInRectXY');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorInRect(v, x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorInRectXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorInRectXY');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorIsZero(var v: Vector): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorIsZero');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorIsZero(v);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorIsZero');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorIsZero');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorMagnitude(var v: Vector): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorMagnitude');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorMagnitude(v);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorMagnitude');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorMagnitude');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorMagnitudeSq(var v: Vector): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorMagnitudeSq');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorMagnitudeSq(v);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorMagnitudeSq');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorMagnitudeSq');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorMultiply(var v: Vector; s: Single): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorMultiply');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorMultiply(v, s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorMultiply');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorMultiply');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorNormal(var v: Vector): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorNormal');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorNormal(v);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorNormal');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorNormal');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorOutOfCircleFromCircle(var src: Circle; var bounds: Circle; var velocity: Vector): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorOutOfCircleFromCircle');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorOutOfCircleFromCircle(src, bounds, velocity);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorOutOfCircleFromCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorOutOfCircleFromCircle');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorOutOfCircleFromPoint(var pt: Point2D; var c: Circle; var velocity: Vector): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorOutOfCircleFromPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorOutOfCircleFromPoint(pt, c, velocity);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorOutOfCircleFromPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorOutOfCircleFromPoint');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorOutOfRectFromCircle(var c: Circle; var rect: Rectangle; var velocity: Vector): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorOutOfRectFromCircle');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorOutOfRectFromCircle(c, rect, velocity);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorOutOfRectFromCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorOutOfRectFromCircle');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorOutOfRectFromPoint(var pt: Point2D; var rect: Rectangle; var velocity: Vector): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorOutOfRectFromPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorOutOfRectFromPoint(pt, rect, velocity);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorOutOfRectFromPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorOutOfRectFromPoint');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorOutOfRectFromRect(var src: Rectangle; var bounds: Rectangle; var velocity: Vector): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorOutOfRectFromRect');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorOutOfRectFromRect(src, bounds, velocity);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorOutOfRectFromRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorOutOfRectFromRect');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorOverLinesFromCircle(var c: Circle; lines: LineSegmentPtr; var velocity: Vector; out maxIdx: Longint; lines_len: Longint): Vector; cdecl; export;
    var
      lines_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorOverLinesFromCircle');
    {$ENDIF}
    
    try
        LineCopyFromPtr(lines, lines_len, lines_temp);
      result := sgGeometry.VectorOverLinesFromCircle(c, lines_temp, velocity, maxIdx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorOverLinesFromCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorOverLinesFromCircle');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorOverLinesFromLines(srcLines: LineSegmentPtr; boundLines: LineSegmentPtr; var velocity: Vector; out maxIdx: Longint; srcLines_len: Longint; boundLines_len: Longint): Vector; cdecl; export;
    var
      srcLines_temp: LinesArray;
      boundLines_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorOverLinesFromLines');
    {$ENDIF}
    
    try
        LineCopyFromPtr(srcLines, srcLines_len, srcLines_temp);
        LineCopyFromPtr(boundLines, boundLines_len, boundLines_temp);
      result := sgGeometry.VectorOverLinesFromLines(srcLines_temp, boundLines_temp, velocity, maxIdx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorOverLinesFromLines');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorOverLinesFromLines');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorTo(x: Single; y: Single; invertY: Boolean): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorTo');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorTo(x, y, invertY);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorTo');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorTo');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorToPoint(var p1: Point2D): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorToPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorToPoint(p1);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorToPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorToPoint');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorsEqual(var v1: Vector; var v2: Vector): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorsEqual');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorsEqual(v1, v2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorsEqual');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorsEqual');
    {$ENDIF}
  end;
  

  function sg_Geometry_VectorsNotEqual(var v1: Vector; var v2: Vector): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorsNotEqual');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorsNotEqual(v1, v2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorsNotEqual');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorsNotEqual');
    {$ENDIF}
  end;
  

  procedure sg_Geometry_WidestPoints(var c: Circle; var along: Vector; out pt1: Point2D; out pt2: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_WidestPoints');
    {$ENDIF}
  
    try 
       sgGeometry.WidestPoints(c, along, pt1, pt2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_WidestPoints');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_WidestPoints');
    {$ENDIF}
  end;
  

  function sg_Graphics_BlueOf(c: LongWord): Byte; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_BlueOf');
    {$ENDIF}
    
    try
      result := sgGraphics.BlueOf(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_BlueOf');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_BlueOf');
    {$ENDIF}
  end;
  

  function sg_Graphics_BrightnessOf(c: LongWord): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_BrightnessOf');
    {$ENDIF}
    
    try
      result := sgGraphics.BrightnessOf(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_BrightnessOf');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_BrightnessOf');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_ChangeScreenSize(width: Longint; height: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ChangeScreenSize');
    {$ENDIF}
  
    try 
       sgGraphics.ChangeScreenSize(width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ChangeScreenSize');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ChangeScreenSize');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_ClearScreen(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ClearScreen');
    {$ENDIF}
  
    try 
       sgGraphics.ClearScreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ClearScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ClearScreen');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_ClearScreenTo(toColor: LongWord); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ClearScreenTo');
    {$ENDIF}
  
    try 
       sgGraphics.ClearScreen(toColor);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ClearScreenTo');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ClearScreenTo');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorAliceBlue(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorAliceBlue');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorAliceBlue();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorAliceBlue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorAliceBlue');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorAntiqueWhite(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorAntiqueWhite');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorAntiqueWhite();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorAntiqueWhite');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorAntiqueWhite');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorAqua(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorAqua');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorAqua();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorAqua');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorAqua');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorAquamarine(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorAquamarine');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorAquamarine();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorAquamarine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorAquamarine');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorAzure(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorAzure');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorAzure();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorAzure');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorAzure');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorBeige(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorBeige');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorBeige();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorBeige');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorBeige');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorBisque(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorBisque');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorBisque();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorBisque');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorBisque');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorBlack(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorBlack');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorBlack();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorBlack');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorBlack');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorBlanchedAlmond(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorBlanchedAlmond');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorBlanchedAlmond();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorBlanchedAlmond');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorBlanchedAlmond');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorBlue(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorBlue');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorBlue();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorBlue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorBlue');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorBlueViolet(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorBlueViolet');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorBlueViolet();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorBlueViolet');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorBlueViolet');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorBrightGreen(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorBrightGreen');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorBrightGreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorBrightGreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorBrightGreen');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorBrown(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorBrown');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorBrown();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorBrown');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorBrown');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorBurlyWood(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorBurlyWood');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorBurlyWood();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorBurlyWood');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorBurlyWood');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorCadetBlue(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorCadetBlue');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorCadetBlue();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorCadetBlue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorCadetBlue');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorChartreuse(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorChartreuse');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorChartreuse();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorChartreuse');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorChartreuse');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorChocolate(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorChocolate');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorChocolate();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorChocolate');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorChocolate');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_ColorComponents(c: LongWord; out r: Byte; out g: Byte; out b: Byte; out a: Byte); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorComponents');
    {$ENDIF}
  
    try 
       sgGraphics.ColorComponents(c, r, g, b, a);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorComponents');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorComponents');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorCoral(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorCoral');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorCoral();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorCoral');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorCoral');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorCornflowerBlue(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorCornflowerBlue');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorCornflowerBlue();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorCornflowerBlue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorCornflowerBlue');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorCornsilk(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorCornsilk');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorCornsilk();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorCornsilk');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorCornsilk');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorCrimson(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorCrimson');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorCrimson();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorCrimson');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorCrimson');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorCyan(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorCyan');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorCyan();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorCyan');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorCyan');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorDarkBlue(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorDarkBlue');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorDarkBlue();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorDarkBlue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorDarkBlue');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorDarkCyan(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorDarkCyan');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorDarkCyan();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorDarkCyan');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorDarkCyan');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorDarkGoldenrod(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorDarkGoldenrod');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorDarkGoldenrod();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorDarkGoldenrod');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorDarkGoldenrod');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorDarkGray(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorDarkGray');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorDarkGray();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorDarkGray');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorDarkGray');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorDarkGreen(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorDarkGreen');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorDarkGreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorDarkGreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorDarkGreen');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorDarkKhaki(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorDarkKhaki');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorDarkKhaki();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorDarkKhaki');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorDarkKhaki');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorDarkMagenta(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorDarkMagenta');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorDarkMagenta();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorDarkMagenta');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorDarkMagenta');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorDarkOliveGreen(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorDarkOliveGreen');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorDarkOliveGreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorDarkOliveGreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorDarkOliveGreen');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorDarkOrange(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorDarkOrange');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorDarkOrange();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorDarkOrange');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorDarkOrange');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorDarkOrchid(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorDarkOrchid');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorDarkOrchid();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorDarkOrchid');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorDarkOrchid');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorDarkRed(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorDarkRed');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorDarkRed();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorDarkRed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorDarkRed');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorDarkSalmon(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorDarkSalmon');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorDarkSalmon();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorDarkSalmon');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorDarkSalmon');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorDarkSeaGreen(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorDarkSeaGreen');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorDarkSeaGreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorDarkSeaGreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorDarkSeaGreen');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorDarkSlateBlue(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorDarkSlateBlue');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorDarkSlateBlue();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorDarkSlateBlue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorDarkSlateBlue');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorDarkSlateGray(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorDarkSlateGray');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorDarkSlateGray();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorDarkSlateGray');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorDarkSlateGray');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorDarkTurquoise(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorDarkTurquoise');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorDarkTurquoise();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorDarkTurquoise');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorDarkTurquoise');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorDarkViolet(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorDarkViolet');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorDarkViolet();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorDarkViolet');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorDarkViolet');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorDeepPink(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorDeepPink');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorDeepPink();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorDeepPink');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorDeepPink');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorDeepSkyBlue(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorDeepSkyBlue');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorDeepSkyBlue();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorDeepSkyBlue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorDeepSkyBlue');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorDimGray(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorDimGray');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorDimGray();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorDimGray');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorDimGray');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorDodgerBlue(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorDodgerBlue');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorDodgerBlue();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorDodgerBlue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorDodgerBlue');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorFirebrick(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorFirebrick');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorFirebrick();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorFirebrick');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorFirebrick');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorFloralWhite(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorFloralWhite');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorFloralWhite();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorFloralWhite');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorFloralWhite');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorForestGreen(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorForestGreen');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorForestGreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorForestGreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorForestGreen');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorFromBitmap(bmp: Bitmap; apiColor: LongWord): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorFromBitmap');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorFrom(bmp, apiColor);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorFromBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorFromBitmap');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorFuchsia(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorFuchsia');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorFuchsia();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorFuchsia');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorFuchsia');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorGainsboro(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorGainsboro');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorGainsboro();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorGainsboro');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorGainsboro');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorGhostWhite(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorGhostWhite');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorGhostWhite();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorGhostWhite');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorGhostWhite');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorGold(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorGold');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorGold();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorGold');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorGold');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorGoldenrod(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorGoldenrod');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorGoldenrod();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorGoldenrod');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorGoldenrod');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorGray(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorGray');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorGray();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorGray');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorGray');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorGreen(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorGreen');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorGreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorGreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorGreen');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorGreenYellow(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorGreenYellow');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorGreenYellow();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorGreenYellow');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorGreenYellow');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorGrey(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorGrey');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorGrey();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorGrey');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorGrey');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorHoneydew(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorHoneydew');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorHoneydew();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorHoneydew');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorHoneydew');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorHotPink(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorHotPink');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorHotPink();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorHotPink');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorHotPink');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorIndianRed(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorIndianRed');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorIndianRed();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorIndianRed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorIndianRed');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorIndigo(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorIndigo');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorIndigo();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorIndigo');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorIndigo');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorIvory(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorIvory');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorIvory();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorIvory');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorIvory');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorKhaki(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorKhaki');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorKhaki();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorKhaki');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorKhaki');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorLavender(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorLavender');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorLavender();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorLavender');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorLavender');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorLavenderBlush(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorLavenderBlush');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorLavenderBlush();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorLavenderBlush');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorLavenderBlush');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorLawnGreen(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorLawnGreen');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorLawnGreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorLawnGreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorLawnGreen');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorLemonChiffon(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorLemonChiffon');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorLemonChiffon();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorLemonChiffon');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorLemonChiffon');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorLightBlue(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorLightBlue');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorLightBlue();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorLightBlue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorLightBlue');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorLightCoral(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorLightCoral');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorLightCoral();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorLightCoral');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorLightCoral');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorLightCyan(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorLightCyan');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorLightCyan();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorLightCyan');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorLightCyan');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorLightGoldenrodYellow(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorLightGoldenrodYellow');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorLightGoldenrodYellow();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorLightGoldenrodYellow');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorLightGoldenrodYellow');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorLightGray(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorLightGray');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorLightGray();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorLightGray');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorLightGray');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorLightGreen(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorLightGreen');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorLightGreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorLightGreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorLightGreen');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorLightGrey(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorLightGrey');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorLightGrey();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorLightGrey');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorLightGrey');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorLightPink(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorLightPink');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorLightPink();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorLightPink');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorLightPink');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorLightSalmon(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorLightSalmon');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorLightSalmon();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorLightSalmon');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorLightSalmon');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorLightSeaGreen(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorLightSeaGreen');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorLightSeaGreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorLightSeaGreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorLightSeaGreen');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorLightSkyBlue(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorLightSkyBlue');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorLightSkyBlue();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorLightSkyBlue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorLightSkyBlue');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorLightSlateGray(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorLightSlateGray');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorLightSlateGray();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorLightSlateGray');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorLightSlateGray');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorLightSteelBlue(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorLightSteelBlue');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorLightSteelBlue();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorLightSteelBlue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorLightSteelBlue');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorLightYellow(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorLightYellow');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorLightYellow();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorLightYellow');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorLightYellow');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorLime(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorLime');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorLime();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorLime');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorLime');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorLimeGreen(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorLimeGreen');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorLimeGreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorLimeGreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorLimeGreen');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorLinen(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorLinen');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorLinen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorLinen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorLinen');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorMagenta(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorMagenta');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorMagenta();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorMagenta');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorMagenta');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorMaroon(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorMaroon');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorMaroon();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorMaroon');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorMaroon');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorMediumAquamarine(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorMediumAquamarine');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorMediumAquamarine();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorMediumAquamarine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorMediumAquamarine');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorMediumBlue(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorMediumBlue');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorMediumBlue();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorMediumBlue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorMediumBlue');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorMediumOrchid(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorMediumOrchid');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorMediumOrchid();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorMediumOrchid');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorMediumOrchid');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorMediumPurple(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorMediumPurple');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorMediumPurple();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorMediumPurple');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorMediumPurple');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorMediumSeaGreen(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorMediumSeaGreen');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorMediumSeaGreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorMediumSeaGreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorMediumSeaGreen');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorMediumSlateBlue(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorMediumSlateBlue');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorMediumSlateBlue();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorMediumSlateBlue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorMediumSlateBlue');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorMediumSpringGreen(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorMediumSpringGreen');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorMediumSpringGreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorMediumSpringGreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorMediumSpringGreen');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorMediumTurquoise(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorMediumTurquoise');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorMediumTurquoise();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorMediumTurquoise');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorMediumTurquoise');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorMediumVioletRed(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorMediumVioletRed');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorMediumVioletRed();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorMediumVioletRed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorMediumVioletRed');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorMidnightBlue(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorMidnightBlue');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorMidnightBlue();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorMidnightBlue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorMidnightBlue');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorMintCream(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorMintCream');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorMintCream();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorMintCream');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorMintCream');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorMistyRose(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorMistyRose');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorMistyRose();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorMistyRose');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorMistyRose');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorMoccasin(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorMoccasin');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorMoccasin();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorMoccasin');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorMoccasin');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorNavajoWhite(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorNavajoWhite');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorNavajoWhite();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorNavajoWhite');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorNavajoWhite');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorNavy(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorNavy');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorNavy();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorNavy');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorNavy');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorOldLace(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorOldLace');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorOldLace();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorOldLace');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorOldLace');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorOlive(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorOlive');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorOlive();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorOlive');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorOlive');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorOliveDrab(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorOliveDrab');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorOliveDrab();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorOliveDrab');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorOliveDrab');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorOrange(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorOrange');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorOrange();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorOrange');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorOrange');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorOrangeRed(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorOrangeRed');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorOrangeRed();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorOrangeRed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorOrangeRed');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorOrchid(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorOrchid');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorOrchid();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorOrchid');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorOrchid');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorPaleGoldenrod(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorPaleGoldenrod');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorPaleGoldenrod();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorPaleGoldenrod');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorPaleGoldenrod');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorPaleGreen(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorPaleGreen');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorPaleGreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorPaleGreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorPaleGreen');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorPaleTurquoise(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorPaleTurquoise');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorPaleTurquoise();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorPaleTurquoise');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorPaleTurquoise');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorPaleVioletRed(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorPaleVioletRed');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorPaleVioletRed();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorPaleVioletRed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorPaleVioletRed');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorPapayaWhip(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorPapayaWhip');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorPapayaWhip();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorPapayaWhip');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorPapayaWhip');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorPeachPuff(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorPeachPuff');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorPeachPuff();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorPeachPuff');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorPeachPuff');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorPeru(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorPeru');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorPeru();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorPeru');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorPeru');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorPink(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorPink');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorPink();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorPink');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorPink');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorPlum(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorPlum');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorPlum();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorPlum');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorPlum');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorPowderBlue(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorPowderBlue');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorPowderBlue();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorPowderBlue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorPowderBlue');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorPurple(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorPurple');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorPurple();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorPurple');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorPurple');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorRed(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorRed');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorRed();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorRed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorRed');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorRosyBrown(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorRosyBrown');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorRosyBrown();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorRosyBrown');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorRosyBrown');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorRoyalBlue(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorRoyalBlue');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorRoyalBlue();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorRoyalBlue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorRoyalBlue');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorSaddleBrown(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorSaddleBrown');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorSaddleBrown();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorSaddleBrown');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorSaddleBrown');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorSalmon(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorSalmon');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorSalmon();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorSalmon');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorSalmon');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorSandyBrown(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorSandyBrown');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorSandyBrown();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorSandyBrown');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorSandyBrown');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorSeaGreen(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorSeaGreen');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorSeaGreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorSeaGreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorSeaGreen');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorSeaShell(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorSeaShell');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorSeaShell();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorSeaShell');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorSeaShell');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorSienna(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorSienna');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorSienna();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorSienna');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorSienna');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorSilver(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorSilver');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorSilver();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorSilver');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorSilver');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorSkyBlue(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorSkyBlue');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorSkyBlue();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorSkyBlue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorSkyBlue');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorSlateBlue(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorSlateBlue');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorSlateBlue();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorSlateBlue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorSlateBlue');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorSlateGray(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorSlateGray');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorSlateGray();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorSlateGray');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorSlateGray');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorSnow(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorSnow');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorSnow();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorSnow');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorSnow');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorSpringGreen(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorSpringGreen');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorSpringGreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorSpringGreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorSpringGreen');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorSteelBlue(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorSteelBlue');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorSteelBlue();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorSteelBlue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorSteelBlue');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorSwinburneRed(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorSwinburneRed');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorSwinburneRed();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorSwinburneRed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorSwinburneRed');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorTan(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorTan');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorTan();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorTan');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorTan');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorTeal(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorTeal');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorTeal();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorTeal');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorTeal');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorThistle(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorThistle');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorThistle();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorThistle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorThistle');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_ColorToString(c: LongWord; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorToString');
    {$ENDIF}
    
    try
      result_temp := sgGraphics.ColorToString(c);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorToString');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorToString');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorTomato(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorTomato');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorTomato();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorTomato');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorTomato');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorTransparent(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorTransparent');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorTransparent();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorTransparent');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorTransparent');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorTurquoise(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorTurquoise');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorTurquoise();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorTurquoise');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorTurquoise');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorViolet(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorViolet');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorViolet();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorViolet');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorViolet');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorWheat(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorWheat');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorWheat();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorWheat');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorWheat');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorWhite(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorWhite');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorWhite();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorWhite');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorWhite');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorWhiteSmoke(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorWhiteSmoke');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorWhiteSmoke();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorWhiteSmoke');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorWhiteSmoke');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorYellow(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorYellow');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorYellow();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorYellow');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorYellow');
    {$ENDIF}
  end;
  

  function sg_Graphics_ColorYellowGreen(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ColorYellowGreen');
    {$ENDIF}
    
    try
      result := sgGraphics.ColorYellowGreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ColorYellowGreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ColorYellowGreen');
    {$ENDIF}
  end;
  

  function sg_Graphics_CurrentBmpClip(bmp: Bitmap): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_CurrentBmpClip');
    {$ENDIF}
    
    try
      result := sgGraphics.CurrentClip(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_CurrentBmpClip');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_CurrentBmpClip');
    {$ENDIF}
  end;
  

  function sg_Graphics_CurrentScreenClip(): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_CurrentScreenClip');
    {$ENDIF}
    
    try
      result := sgGraphics.CurrentClip();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_CurrentScreenClip');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_CurrentScreenClip');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawHorizontalLine(clr: LongWord; y: Single; x1: Single; x2: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawHorizontalLine');
    {$ENDIF}
  
    try 
       sgGraphics.DrawHorizontalLine(clr, y, x1, x2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawHorizontalLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawHorizontalLine');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawHorizontalLineOnScreen(clr: LongWord; y: Longint; x1: Longint; x2: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawHorizontalLineOnScreen');
    {$ENDIF}
  
    try 
       sgGraphics.DrawHorizontalLineOnScreen(clr, y, x1, x2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawHorizontalLineOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawHorizontalLineOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawHorizontalLineOnto(dest: Bitmap; clr: LongWord; y: Longint; x1: Longint; x2: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawHorizontalLineOnto');
    {$ENDIF}
  
    try 
       sgGraphics.DrawHorizontalLine(dest, clr, y, x1, x2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawHorizontalLineOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawHorizontalLineOnto');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawLine(clr: LongWord; xPosStart: Single; yPosStart: Single; xPosEnd: Single; yPosEnd: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawLine');
    {$ENDIF}
  
    try 
       sgGraphics.DrawLine(clr, xPosStart, yPosStart, xPosEnd, yPosEnd);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawLine');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawLineOnScreen(clr: LongWord; xPosStart: Longint; yPosStart: Longint; xPosEnd: Longint; yPosEnd: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawLineOnScreen');
    {$ENDIF}
  
    try 
       sgGraphics.DrawLineOnScreen(clr, xPosStart, yPosStart, xPosEnd, yPosEnd);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawLineOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawLineOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawLineOnto(dest: Bitmap; clr: LongWord; xPosStart: Longint; yPosStart: Longint; xPosEnd: Longint; yPosEnd: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawLineOnto');
    {$ENDIF}
  
    try 
       sgGraphics.DrawLine(dest, clr, xPosStart, yPosStart, xPosEnd, yPosEnd);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawLineOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawLineOnto');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawLinePts(clr: LongWord; var startPt: Point2D; var endPt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawLinePts');
    {$ENDIF}
  
    try 
       sgGraphics.DrawLine(clr, startPt, endPt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawLinePts');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawLinePts');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawLinePtsOnScreen(clr: LongWord; var startPt: Point2D; var endPt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawLinePtsOnScreen');
    {$ENDIF}
  
    try 
       sgGraphics.DrawLineOnScreen(clr, startPt, endPt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawLinePtsOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawLinePtsOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawLinePtsOnto(dest: Bitmap; clr: LongWord; var startPt: Point2D; var endPt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawLinePtsOnto');
    {$ENDIF}
  
    try 
       sgGraphics.DrawLine(dest, clr, startPt, endPt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawLinePtsOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawLinePtsOnto');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawLineSegment(clr: LongWord; var line: LineSegment); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawLineSegment');
    {$ENDIF}
  
    try 
       sgGraphics.DrawLine(clr, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawLineSegment');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawLineSegment');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawLineSegmentOnScreen(clr: LongWord; var line: LineSegment); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawLineSegmentOnScreen');
    {$ENDIF}
  
    try 
       sgGraphics.DrawLineOnScreen(clr, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawLineSegmentOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawLineSegmentOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawLineSegmentOnto(dest: Bitmap; clr: LongWord; var line: LineSegment); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawLineSegmentOnto');
    {$ENDIF}
  
    try 
       sgGraphics.DrawLine(dest, clr, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawLineSegmentOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawLineSegmentOnto');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawLineSegments(clr: LongWord; lines: LineSegmentPtr; lines_len: Longint); cdecl; export;
    var
      lines_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawLineSegments');
    {$ENDIF}
  
    try 
        LineCopyFromPtr(lines, lines_len, lines_temp);
       sgGraphics.DrawLines(clr, lines_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawLineSegments');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawLineSegments');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillCircle(clr: LongWord; filled: Boolean; xc: Single; yc: Single; radius: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillCircle');
    {$ENDIF}
  
    try 
       sgGraphics.DrawCircle(clr, filled, xc, yc, radius);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillCircle');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillCircleAtPoint(clr: LongWord; filled: Boolean; var position: Point2D; radius: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillCircleAtPoint');
    {$ENDIF}
  
    try 
       sgGraphics.DrawCircle(clr, filled, position, radius);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillCircleAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillCircleAtPoint');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillCircleAtPointOnScreen(clr: LongWord; filled: Boolean; var position: Point2D; radius: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillCircleAtPointOnScreen');
    {$ENDIF}
  
    try 
       sgGraphics.DrawCircleOnScreen(clr, filled, position, radius);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillCircleAtPointOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillCircleAtPointOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillCircleAtPointOnto(dest: Bitmap; clr: LongWord; filled: Boolean; var point: Point2D; radius: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillCircleAtPointOnto');
    {$ENDIF}
  
    try 
       sgGraphics.DrawCircle(dest, clr, filled, point, radius);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillCircleAtPointOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillCircleAtPointOnto');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillCircleOnScreen(clr: LongWord; filled: Boolean; xc: Single; yc: Single; radius: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillCircleOnScreen');
    {$ENDIF}
  
    try 
       sgGraphics.DrawCircleOnScreen(clr, filled, xc, yc, radius);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillCircleOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillCircleOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillCircleOnto(dest: Bitmap; clr: LongWord; filled: Boolean; xc: Single; yc: Single; radius: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillCircleOnto');
    {$ENDIF}
  
    try 
       sgGraphics.DrawCircle(dest, clr, filled, xc, yc, radius);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillCircleOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillCircleOnto');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillCircleStruct(clr: LongWord; filled: Boolean; var c: Circle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillCircleStruct');
    {$ENDIF}
  
    try 
       sgGraphics.DrawCircle(clr, filled, c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillCircleStruct');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillCircleStruct');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillCircleStructOnScreen(clr: LongWord; filled: Boolean; var c: Circle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillCircleStructOnScreen');
    {$ENDIF}
  
    try 
       sgGraphics.DrawCircleOnScreen(clr, filled, c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillCircleStructOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillCircleStructOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillCircleStructOnto(dest: Bitmap; clr: LongWord; filled: Boolean; var c: Circle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillCircleStructOnto');
    {$ENDIF}
  
    try 
       sgGraphics.DrawCircle(dest, clr, filled, c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillCircleStructOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillCircleStructOnto');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillEllipse(clr: LongWord; filled: Boolean; xPos: Single; yPos: Single; width: Longint; height: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipse');
    {$ENDIF}
  
    try 
       sgGraphics.DrawEllipse(clr, filled, xPos, yPos, width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillEllipse');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipse');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillEllipseInRect(clr: LongWord; filled: Boolean; var source: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipseInRect');
    {$ENDIF}
  
    try 
       sgGraphics.DrawEllipse(clr, filled, source);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillEllipseInRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipseInRect');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillEllipseInRectOnScreen(clr: LongWord; filled: Boolean; var source: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipseInRectOnScreen');
    {$ENDIF}
  
    try 
       sgGraphics.DrawEllipseOnScreen(clr, filled, source);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillEllipseInRectOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipseInRectOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillEllipseInRectOnto(dest: Bitmap; clr: LongWord; filled: Boolean; var source: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipseInRectOnto');
    {$ENDIF}
  
    try 
       sgGraphics.DrawEllipse(dest, clr, filled, source);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillEllipseInRectOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipseInRectOnto');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillEllipseOnScreen(clr: LongWord; filled: Boolean; xPos: Longint; yPos: Longint; width: Longint; height: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipseOnScreen');
    {$ENDIF}
  
    try 
       sgGraphics.DrawEllipseOnScreen(clr, filled, xPos, yPos, width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillEllipseOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipseOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillEllipseOnto(dest: Bitmap; clr: LongWord; filled: Boolean; xPos: Longint; yPos: Longint; width: Longint; height: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipseOnto');
    {$ENDIF}
  
    try 
       sgGraphics.DrawEllipse(dest, clr, filled, xPos, yPos, width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillEllipseOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipseOnto');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillRectangle(clr: LongWord; filled: Boolean; xPos: Single; yPos: Single; width: Longint; height: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangle');
    {$ENDIF}
  
    try 
       sgGraphics.DrawRectangle(clr, filled, xPos, yPos, width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangle');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillRectangleOnScreen(clr: LongWord; filled: Boolean; xPos: Longint; yPos: Longint; width: Longint; height: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangleOnScreen');
    {$ENDIF}
  
    try 
       sgGraphics.DrawRectangleOnScreen(clr, filled, xPos, yPos, width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillRectangleOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangleOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillRectangleOnto(dest: Bitmap; clr: LongWord; filled: Boolean; xPos: Longint; yPos: Longint; width: Longint; height: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangleOnto');
    {$ENDIF}
  
    try 
       sgGraphics.DrawRectangle(dest, clr, filled, xPos, yPos, width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillRectangleOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangleOnto');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillRectangleStruct(clr: LongWord; filled: Boolean; var source: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangleStruct');
    {$ENDIF}
  
    try 
       sgGraphics.DrawRectangle(clr, filled, source);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillRectangleStruct');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangleStruct');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillRectangleStructOnScreen(clr: LongWord; filled: Boolean; var source: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangleStructOnScreen');
    {$ENDIF}
  
    try 
       sgGraphics.DrawRectangleOnScreen(clr, filled, source);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillRectangleStructOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangleStructOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillRectangleStructOnto(dest: Bitmap; clr: LongWord; filled: Boolean; var source: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangleStructOnto');
    {$ENDIF}
  
    try 
       sgGraphics.DrawRectangle(dest, clr, filled, source);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillRectangleStructOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangleStructOnto');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillTriangleStruct(clr: LongWord; filled: Boolean; var tri: Triangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillTriangleStruct');
    {$ENDIF}
  
    try 
       sgGraphics.DrawTriangle(clr, filled, tri);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillTriangleStruct');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillTriangleStruct');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillTriangleStructOnScreen(clr: LongWord; filled: Boolean; var tri: Triangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillTriangleStructOnScreen');
    {$ENDIF}
  
    try 
       sgGraphics.DrawTriangleOnScreen(clr, filled, tri);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillTriangleStructOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillTriangleStructOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawOrFillTriangleStructOnto(dest: Bitmap; clr: LongWord; filled: Boolean; var tri: Triangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillTriangleStructOnto');
    {$ENDIF}
  
    try 
       sgGraphics.DrawTriangle(dest, clr, filled, tri);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillTriangleStructOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillTriangleStructOnto');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawPixel(clr: LongWord; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawPixel');
    {$ENDIF}
  
    try 
       sgGraphics.DrawPixel(clr, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawPixel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawPixel');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawPixelAtPoint(clr: LongWord; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawPixelAtPoint');
    {$ENDIF}
  
    try 
       sgGraphics.DrawPixel(clr, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawPixelAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawPixelAtPoint');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawPixelAtPointOnScreen(clr: LongWord; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawPixelAtPointOnScreen');
    {$ENDIF}
  
    try 
       sgGraphics.DrawPixelOnScreen(clr, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawPixelAtPointOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawPixelAtPointOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawPixelAtPointOnto(dest: Bitmap; clr: LongWord; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawPixelAtPointOnto');
    {$ENDIF}
  
    try 
       sgGraphics.DrawPixel(dest, clr, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawPixelAtPointOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawPixelAtPointOnto');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawPixelOnScreen(clr: LongWord; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawPixelOnScreen');
    {$ENDIF}
  
    try 
       sgGraphics.DrawPixelOnScreen(clr, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawPixelOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawPixelOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawPixelOnto(dest: Bitmap; clr: LongWord; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawPixelOnto');
    {$ENDIF}
  
    try 
       sgGraphics.DrawPixel(dest, clr, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawPixelOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawPixelOnto');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawThickLine(clr: LongWord; xPosStart: Single; yPosStart: Single; xPosEnd: Single; yPosEnd: Single; width: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawThickLine');
    {$ENDIF}
  
    try 
       sgGraphics.DrawThickLine(clr, xPosStart, yPosStart, xPosEnd, yPosEnd, width);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawThickLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawThickLine');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawTriangle(clr: LongWord; x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawTriangle');
    {$ENDIF}
  
    try 
       sgGraphics.DrawTriangle(clr, x1, y1, x2, y2, x3, y3);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawTriangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawTriangle');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawTriangleOnScreen(clr: LongWord; x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawTriangleOnScreen');
    {$ENDIF}
  
    try 
       sgGraphics.DrawTriangleOnScreen(clr, x1, y1, x2, y2, x3, y3);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawTriangleOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawTriangleOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawTriangleOnto(dest: Bitmap; clr: LongWord; x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawTriangleOnto');
    {$ENDIF}
  
    try 
       sgGraphics.DrawTriangle(dest, clr, x1, y1, x2, y2, x3, y3);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawTriangleOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawTriangleOnto');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawVerticalLine(clr: LongWord; x: Single; y1: Single; y2: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawVerticalLine');
    {$ENDIF}
  
    try 
       sgGraphics.DrawVerticalLine(clr, x, y1, y2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawVerticalLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawVerticalLine');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawVerticalLineOnScreen(clr: LongWord; x: Longint; y1: Longint; y2: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawVerticalLineOnScreen');
    {$ENDIF}
  
    try 
       sgGraphics.DrawVerticalLineOnScreen(clr, x, y1, y2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawVerticalLineOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawVerticalLineOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_DrawVerticalLineOnto(dest: Bitmap; clr: LongWord; x: Longint; y1: Longint; y2: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawVerticalLineOnto');
    {$ENDIF}
  
    try 
       sgGraphics.DrawVerticalLine(dest, clr, x, y1, y2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawVerticalLineOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawVerticalLineOnto');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_FillTriangle(clr: LongWord; x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_FillTriangle');
    {$ENDIF}
  
    try 
       sgGraphics.FillTriangle(clr, x1, y1, x2, y2, x3, y3);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_FillTriangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_FillTriangle');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_FillTriangleOnScreen(clr: LongWord; x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_FillTriangleOnScreen');
    {$ENDIF}
  
    try 
       sgGraphics.FillTriangleOnScreen(clr, x1, y1, x2, y2, x3, y3);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_FillTriangleOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_FillTriangleOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_FillTriangleOnto(dest: Bitmap; clr: LongWord; x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_FillTriangleOnto');
    {$ENDIF}
  
    try 
       sgGraphics.FillTriangle(dest, clr, x1, y1, x2, y2, x3, y3);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_FillTriangleOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_FillTriangleOnto');
    {$ENDIF}
  end;
  

  function sg_Graphics_GetPixel(bmp: Bitmap; x: Longint; y: Longint): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_GetPixel');
    {$ENDIF}
    
    try
      result := sgGraphics.GetPixel(bmp, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_GetPixel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_GetPixel');
    {$ENDIF}
  end;
  

  function sg_Graphics_GetPixelFromScreen(x: Longint; y: Longint): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_GetPixelFromScreen');
    {$ENDIF}
    
    try
      result := sgGraphics.GetPixelFromScreen(x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_GetPixelFromScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_GetPixelFromScreen');
    {$ENDIF}
  end;
  

  function sg_Graphics_GreenOf(c: LongWord): Byte; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_GreenOf');
    {$ENDIF}
    
    try
      result := sgGraphics.GreenOf(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_GreenOf');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_GreenOf');
    {$ENDIF}
  end;
  

  function sg_Graphics_HSBColor(hue: Single; saturation: Single; brightness: Single): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_HSBColor');
    {$ENDIF}
    
    try
      result := sgGraphics.HSBColor(hue, saturation, brightness);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_HSBColor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_HSBColor');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_HSBValuesOf(c: LongWord; out h: Single; out s: Single; out b: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_HSBValuesOf');
    {$ENDIF}
  
    try 
       sgGraphics.HSBValuesOf(c, h, s, b);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_HSBValuesOf');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_HSBValuesOf');
    {$ENDIF}
  end;
  

  function sg_Graphics_HueOf(c: LongWord): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_HueOf');
    {$ENDIF}
    
    try
      result := sgGraphics.HueOf(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_HueOf');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_HueOf');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_OpenGraphicsWindow(caption: PChar; width: Longint; height: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_OpenGraphicsWindow');
    {$ENDIF}
  
    try 
       sgGraphics.OpenGraphicsWindow(caption, width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_OpenGraphicsWindow');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_OpenGraphicsWindow');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_PopClipBmp(bmp: Bitmap); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_PopClipBmp');
    {$ENDIF}
  
    try 
       sgGraphics.PopClip(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_PopClipBmp');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_PopClipBmp');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_PopClipScreen(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_PopClipScreen');
    {$ENDIF}
  
    try 
       sgGraphics.PopClip();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_PopClipScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_PopClipScreen');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_PushClipRect(var r: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_PushClipRect');
    {$ENDIF}
  
    try 
       sgGraphics.PushClip(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_PushClipRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_PushClipRect');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_PushClipRectForBitmap(bmp: Bitmap; var r: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_PushClipRectForBitmap');
    {$ENDIF}
  
    try 
       sgGraphics.PushClip(bmp, r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_PushClipRectForBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_PushClipRectForBitmap');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_PushClipXY(x: Longint; y: Longint; w: Longint; h: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_PushClipXY');
    {$ENDIF}
  
    try 
       sgGraphics.PushClip(x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_PushClipXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_PushClipXY');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_PutPixel(bmp: Bitmap; value: LongWord; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_PutPixel');
    {$ENDIF}
  
    try 
       sgGraphics.PutPixel(bmp, value, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_PutPixel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_PutPixel');
    {$ENDIF}
  end;
  

  function sg_Graphics_RGBAColor(red: Byte; green: Byte; blue: Byte; alpha: Byte): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_RGBAColor');
    {$ENDIF}
    
    try
      result := sgGraphics.RGBAColor(red, green, blue, alpha);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_RGBAColor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_RGBAColor');
    {$ENDIF}
  end;
  

  function sg_Graphics_RGBAFloatColor(r: Single; g: Single; b: Single; a: Single): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_RGBAFloatColor');
    {$ENDIF}
    
    try
      result := sgGraphics.RGBAFloatColor(r, g, b, a);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_RGBAFloatColor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_RGBAFloatColor');
    {$ENDIF}
  end;
  

  function sg_Graphics_RGBFloatColor(r: Single; g: Single; b: Single): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_RGBFloatColor');
    {$ENDIF}
    
    try
      result := sgGraphics.RGBFloatColor(r, g, b);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_RGBFloatColor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_RGBFloatColor');
    {$ENDIF}
  end;
  

  function sg_Graphics_RandomColor(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_RandomColor');
    {$ENDIF}
    
    try
      result := sgGraphics.RandomColor();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_RandomColor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_RandomColor');
    {$ENDIF}
  end;
  

  function sg_Graphics_RandomRGBColor(alpha: Byte): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_RandomRGBColor');
    {$ENDIF}
    
    try
      result := sgGraphics.RandomRGBColor(alpha);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_RandomRGBColor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_RandomRGBColor');
    {$ENDIF}
  end;
  

  function sg_Graphics_RedOf(c: LongWord): Byte; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_RedOf');
    {$ENDIF}
    
    try
      result := sgGraphics.RedOf(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_RedOf');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_RedOf');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_RefreshScreen(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_RefreshScreen');
    {$ENDIF}
  
    try 
       sgGraphics.RefreshScreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_RefreshScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_RefreshScreen');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_RefreshScreenRestrictFPS(TargetFPS: Longword); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_RefreshScreenRestrictFPS');
    {$ENDIF}
  
    try 
       sgGraphics.RefreshScreen(TargetFPS);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_RefreshScreenRestrictFPS');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_RefreshScreenRestrictFPS');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_ResetClip(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ResetClip');
    {$ENDIF}
  
    try 
       sgGraphics.ResetClip();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ResetClip');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ResetClip');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_ResetClipForBitmap(bmp: Bitmap); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ResetClipForBitmap');
    {$ENDIF}
  
    try 
       sgGraphics.ResetClip(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ResetClipForBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ResetClipForBitmap');
    {$ENDIF}
  end;
  

  function sg_Graphics_SaturationOf(c: LongWord): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_SaturationOf');
    {$ENDIF}
    
    try
      result := sgGraphics.SaturationOf(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_SaturationOf');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_SaturationOf');
    {$ENDIF}
  end;
  

  function sg_Graphics_ScreenHeight(): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ScreenHeight');
    {$ENDIF}
    
    try
      result := sgGraphics.ScreenHeight();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ScreenHeight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ScreenHeight');
    {$ENDIF}
  end;
  

  function sg_Graphics_ScreenWidth(): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ScreenWidth');
    {$ENDIF}
    
    try
      result := sgGraphics.ScreenWidth();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ScreenWidth');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ScreenWidth');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_SetBmpClip(bmp: Bitmap; var r: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_SetBmpClip');
    {$ENDIF}
  
    try 
       sgGraphics.SetClip(bmp, r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_SetBmpClip');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_SetBmpClip');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_SetBmpClipXY(bmp: Bitmap; x: Longint; y: Longint; w: Longint; h: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_SetBmpClipXY');
    {$ENDIF}
  
    try 
       sgGraphics.SetClip(bmp, x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_SetBmpClipXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_SetBmpClipXY');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_SetClip(var r: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_SetClip');
    {$ENDIF}
  
    try 
       sgGraphics.SetClip(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_SetClip');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_SetClip');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_SetClipXY(x: Longint; y: Longint; w: Longint; h: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_SetClipXY');
    {$ENDIF}
  
    try 
       sgGraphics.SetClip(x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_SetClipXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_SetClipXY');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_SetIcon(filename: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_SetIcon');
    {$ENDIF}
  
    try 
       sgGraphics.SetIcon(filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_SetIcon');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_SetIcon');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_ShowSwinGameSplashScreen(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ShowSwinGameSplashScreen');
    {$ENDIF}
  
    try 
       sgGraphics.ShowSwinGameSplashScreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ShowSwinGameSplashScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ShowSwinGameSplashScreen');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_TakeScreenshot(basename: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_TakeScreenshot');
    {$ENDIF}
  
    try 
       sgGraphics.TakeScreenshot(basename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_TakeScreenshot');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_TakeScreenshot');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_ToggleFullScreen(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ToggleFullScreen');
    {$ENDIF}
  
    try 
       sgGraphics.ToggleFullScreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ToggleFullScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ToggleFullScreen');
    {$ENDIF}
  end;
  

  procedure sg_Graphics_ToggleWindowBorder(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ToggleWindowBorder');
    {$ENDIF}
  
    try 
       sgGraphics.ToggleWindowBorder();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ToggleWindowBorder');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ToggleWindowBorder');
    {$ENDIF}
  end;
  

  function sg_Graphics_TransparencyOf(c: LongWord): Byte; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_TransparencyOf');
    {$ENDIF}
    
    try
      result := sgGraphics.TransparencyOf(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_TransparencyOf');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_TransparencyOf');
    {$ENDIF}
  end;
  

  function sg_Images_BitmapCellCircle(bmp: Bitmap; var pt: Point2D): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCellCircle');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCellCircle(bmp, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCellCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCellCircle');
    {$ENDIF}
  end;
  

  function sg_Images_BitmapCellCircleXY(bmp: Bitmap; x: Longint; y: Longint): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCellCircleXY');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCellCircle(bmp, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCellCircleXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCellCircleXY');
    {$ENDIF}
  end;
  

  function sg_Images_BitmapCellColumns(bmp: Bitmap): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCellColumns');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCellColumns(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCellColumns');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCellColumns');
    {$ENDIF}
  end;
  

  function sg_Images_BitmapCellCount(bmp: Bitmap): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCellCount');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCellCount(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCellCount');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCellCount');
    {$ENDIF}
  end;
  

  function sg_Images_BitmapCellHeight(bmp: Bitmap): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCellHeight');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCellHeight(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCellHeight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCellHeight');
    {$ENDIF}
  end;
  

  function sg_Images_BitmapCellOf(bmp: Bitmap; cell: Longint): BitmapCell; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCellOf');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCellOf(bmp, cell);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCellOf');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCellOf');
    {$ENDIF}
  end;
  

  function sg_Images_BitmapCellRectangle(var pt: Point2D; bmp: Bitmap): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCellRectangle');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCellRectangle(pt, bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCellRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCellRectangle');
    {$ENDIF}
  end;
  

  function sg_Images_BitmapCellRectangleAtOrigin(bmp: Bitmap): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCellRectangleAtOrigin');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCellRectangle(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCellRectangleAtOrigin');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCellRectangleAtOrigin');
    {$ENDIF}
  end;
  

  function sg_Images_BitmapCellRectangleXY(x: Single; y: Single; bmp: Bitmap): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCellRectangleXY');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCellRectangle(x, y, bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCellRectangleXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCellRectangleXY');
    {$ENDIF}
  end;
  

  function sg_Images_BitmapCellRows(bmp: Bitmap): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCellRows');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCellRows(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCellRows');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCellRows');
    {$ENDIF}
  end;
  

  function sg_Images_BitmapCellWidth(bmp: Bitmap): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCellWidth');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCellWidth(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCellWidth');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCellWidth');
    {$ENDIF}
  end;
  

  function sg_Images_BitmapCircle(bmp: Bitmap; var pt: Point2D): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCircle');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCircle(bmp, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCircle');
    {$ENDIF}
  end;
  

  function sg_Images_BitmapCircleXY(bmp: Bitmap; x: Longint; y: Longint): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCircleXY');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCircle(bmp, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCircleXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCircleXY');
    {$ENDIF}
  end;
  

  procedure sg_Images_BitmapFilename(bmp: Bitmap; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapFilename');
    {$ENDIF}
    
    try
      result_temp := sgImages.BitmapFilename(bmp);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapFilename');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapFilename');
    {$ENDIF}
  end;
  

  function sg_Images_BitmapHeight(bmp: Bitmap): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapHeight');
    {$ENDIF}
    
    try
      result := sgImages.BitmapHeight(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapHeight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapHeight');
    {$ENDIF}
  end;
  

  function sg_Images_BitmapHeightForCell(var bmp: BitmapCell): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapHeightForCell');
    {$ENDIF}
    
    try
      result := sgImages.BitmapHeight(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapHeightForCell');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapHeightForCell');
    {$ENDIF}
  end;
  

  procedure sg_Images_BitmapName(bmp: Bitmap; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapName');
    {$ENDIF}
    
    try
      result_temp := sgImages.BitmapName(bmp);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapName');
    {$ENDIF}
  end;
  

  function sg_Images_BitmapNamed(name: PChar): Bitmap; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapNamed');
    {$ENDIF}
    
    try
      result := sgImages.BitmapNamed(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapNamed');
    {$ENDIF}
  end;
  

  function sg_Images_BitmapRectAtOrigin(bmp: Bitmap): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapRectAtOrigin');
    {$ENDIF}
    
    try
      result := sgImages.BitmapRectangle(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapRectAtOrigin');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapRectAtOrigin');
    {$ENDIF}
  end;
  

  function sg_Images_BitmapRectXY(x: Single; y: Single; bmp: Bitmap): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapRectXY');
    {$ENDIF}
    
    try
      result := sgImages.BitmapRectangle(x, y, bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapRectXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapRectXY');
    {$ENDIF}
  end;
  

  function sg_Images_BitmapRectangleOfCell(src: Bitmap; cell: Longint): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapRectangleOfCell');
    {$ENDIF}
    
    try
      result := sgImages.BitmapRectangleOfCell(src, cell);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapRectangleOfCell');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapRectangleOfCell');
    {$ENDIF}
  end;
  

  procedure sg_Images_BitmapSetCellDetails(bmp: Bitmap; width: Longint; height: Longint; columns: Longint; rows: Longint; count: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapSetCellDetails');
    {$ENDIF}
  
    try 
       sgImages.BitmapSetCellDetails(bmp, width, height, columns, rows, count);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapSetCellDetails');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapSetCellDetails');
    {$ENDIF}
  end;
  

  function sg_Images_BitmapWidth(bmp: Bitmap): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapWidth');
    {$ENDIF}
    
    try
      result := sgImages.BitmapWidth(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapWidth');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapWidth');
    {$ENDIF}
  end;
  

  function sg_Images_BitmapWidthForCell(var bmp: BitmapCell): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapWidthForCell');
    {$ENDIF}
    
    try
      result := sgImages.BitmapWidth(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapWidthForCell');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapWidthForCell');
    {$ENDIF}
  end;
  

  function sg_Images_BitmapsInterchangable(bmp1: Bitmap; bmp2: Bitmap): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapsInterchangable');
    {$ENDIF}
    
    try
      result := sgImages.BitmapsInterchangable(bmp1, bmp2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapsInterchangable');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapsInterchangable');
    {$ENDIF}
  end;
  

  procedure sg_Images_ClearSurface(dest: Bitmap; toColor: LongWord); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_ClearSurface');
    {$ENDIF}
  
    try 
       sgImages.ClearSurface(dest, toColor);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_ClearSurface');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_ClearSurface');
    {$ENDIF}
  end;
  

  procedure sg_Images_ClearSurfaceToBlack(dest: Bitmap); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_ClearSurfaceToBlack');
    {$ENDIF}
  
    try 
       sgImages.ClearSurface(dest);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_ClearSurfaceToBlack');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_ClearSurfaceToBlack');
    {$ENDIF}
  end;
  

  function sg_Images_CombineIntoGrid(bitmaps: BitmapPtr; cols: Longint; bitmaps_len: Longint): Bitmap; cdecl; export;
    var
      bitmaps_temp: BitmapArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_CombineIntoGrid');
    {$ENDIF}
    
    try
        BmpCopyFromPtr(bitmaps, bitmaps_len, bitmaps_temp);
      result := sgImages.CombineIntoGrid(bitmaps_temp, cols);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_CombineIntoGrid');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_CombineIntoGrid');
    {$ENDIF}
  end;
  

  function sg_Images_CreateBitmap(width: Longint; height: Longint): Bitmap; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_CreateBitmap');
    {$ENDIF}
    
    try
      result := sgImages.CreateBitmap(width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_CreateBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_CreateBitmap');
    {$ENDIF}
  end;
  

  function sg_Images_CreateBitmapNamed(name: PChar; width: Longint; height: Longint): Bitmap; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_CreateBitmapNamed');
    {$ENDIF}
    
    try
      result := sgImages.CreateBitmap(name, width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_CreateBitmapNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_CreateBitmapNamed');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmap(src: Bitmap; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmap');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmap(src, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmap');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmapAtPoint(src: Bitmap; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapAtPoint');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmap(src, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapAtPoint');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmapAtPointOnScreen(src: Bitmap; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapAtPointOnScreen');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmapOnScreen(src, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapAtPointOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapAtPointOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmapAtPointOnto(dest: Bitmap; src: Bitmap; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapAtPointOnto');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmap(dest, src, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapAtPointOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapAtPointOnto');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmapCell(var src: BitmapCell; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapCell');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmapCell(src, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapCell');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapCell');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmapCellAtPoint(var src: BitmapCell; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapCellAtPoint');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmapCell(src, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapCellAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapCellAtPoint');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmapCellAtPointOnScreen(var src: BitmapCell; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapCellAtPointOnScreen');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmapCellOnScreen(src, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapCellAtPointOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapCellAtPointOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmapCellAtPointOnto(dest: Bitmap; var src: BitmapCell; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapCellAtPointOnto');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmapCell(dest, src, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapCellAtPointOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapCellAtPointOnto');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmapCellOnScreen(var src: BitmapCell; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapCellOnScreen');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmapCellOnScreen(src, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapCellOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapCellOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmapCellOnto(dest: Bitmap; var src: BitmapCell; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapCellOnto');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmapCell(dest, src, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapCellOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapCellOnto');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmapNamed(name: PChar; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapNamed');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmap(name, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapNamed');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmapNamedAtPoint(name: PChar; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapNamedAtPoint');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmap(name, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapNamedAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapNamedAtPoint');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmapOnScreen(src: Bitmap; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapOnScreen');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmapOnScreen(src, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmapOnto(dest: Bitmap; src: Bitmap; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapOnto');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmap(dest, src, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapOnto');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmapPart(src: Bitmap; srcX: Longint; srcY: Longint; srcW: Longint; srcH: Longint; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapPart');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmapPart(src, srcX, srcY, srcW, srcH, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapPart');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapPart');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmapPartFromRect(src: Bitmap; var source: Rectangle; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRect');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmapPart(src, source, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapPartFromRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRect');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmapPartFromRectAtPoint(src: Bitmap; var source: Rectangle; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRectAtPoint');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmapPart(src, source, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapPartFromRectAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRectAtPoint');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmapPartFromRectAtPointOnScreen(src: Bitmap; var source: Rectangle; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRectAtPointOnScreen');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmapPartOnScreen(src, source, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapPartFromRectAtPointOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRectAtPointOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmapPartFromRectAtPointOnto(dest: Bitmap; src: Bitmap; var source: Rectangle; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRectAtPointOnto');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmapPart(dest, src, source, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapPartFromRectAtPointOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRectAtPointOnto');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmapPartFromRectOnScreen(src: Bitmap; var source: Rectangle; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRectOnScreen');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmapPartOnScreen(src, source, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapPartFromRectOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRectOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmapPartFromRectOnto(dest: Bitmap; src: Bitmap; var source: Rectangle; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRectOnto');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmapPart(dest, src, source, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapPartFromRectOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRectOnto');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmapPartOnScreen(src: Bitmap; srcX: Longint; srcY: Longint; srcW: Longint; srcH: Longint; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapPartOnScreen');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmapPartOnScreen(src, srcX, srcY, srcW, srcH, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapPartOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapPartOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawBitmapPartOnto(dest: Bitmap; src: Bitmap; srcX: Longint; srcY: Longint; srcW: Longint; srcH: Longint; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapPartOnto');
    {$ENDIF}
  
    try 
       sgImages.DrawBitmapPart(dest, src, srcX, srcY, srcW, srcH, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapPartOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapPartOnto');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawCell(src: Bitmap; cell: Longint; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawCell');
    {$ENDIF}
  
    try 
       sgImages.DrawCell(src, cell, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawCell');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawCell');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawCellOnScreen(src: Bitmap; cell: Longint; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawCellOnScreen');
    {$ENDIF}
  
    try 
       sgImages.DrawCellOnScreen(src, cell, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawCellOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawCellOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawCellOnScreenXY(src: Bitmap; cell: Longint; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawCellOnScreenXY');
    {$ENDIF}
  
    try 
       sgImages.DrawCellOnScreen(src, cell, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawCellOnScreenXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawCellOnScreenXY');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawCellOnto(dest: Bitmap; src: Bitmap; cell: Longint; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawCellOnto');
    {$ENDIF}
  
    try 
       sgImages.DrawCell(dest, src, cell, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawCellOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawCellOnto');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawCellOntoXY(dest: Bitmap; src: Bitmap; cell: Longint; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawCellOntoXY');
    {$ENDIF}
  
    try 
       sgImages.DrawCell(dest, src, cell, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawCellOntoXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawCellOntoXY');
    {$ENDIF}
  end;
  

  procedure sg_Images_DrawCellXY(src: Bitmap; cell: Longint; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawCellXY');
    {$ENDIF}
  
    try 
       sgImages.DrawCell(src, cell, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawCellXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawCellXY');
    {$ENDIF}
  end;
  

  procedure sg_Images_FreeBitmap(var bitmapToFree: Bitmap); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_FreeBitmap');
    {$ENDIF}
  
    try 
       sgImages.FreeBitmap(bitmapToFree);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_FreeBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_FreeBitmap');
    {$ENDIF}
  end;
  

  function sg_Images_HasBitmap(name: PChar): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_HasBitmap');
    {$ENDIF}
    
    try
      result := sgImages.HasBitmap(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_HasBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_HasBitmap');
    {$ENDIF}
  end;
  

  function sg_Images_LoadBitmap(filename: PChar): Bitmap; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_LoadBitmap');
    {$ENDIF}
    
    try
      result := sgImages.LoadBitmap(filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_LoadBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_LoadBitmap');
    {$ENDIF}
  end;
  

  function sg_Images_LoadBitmapNamed(name: PChar; filename: PChar): Bitmap; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_LoadBitmapNamed');
    {$ENDIF}
    
    try
      result := sgImages.LoadBitmapNamed(name, filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_LoadBitmapNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_LoadBitmapNamed');
    {$ENDIF}
  end;
  

  function sg_Images_LoadBitmapWithTransparentColor(filename: PChar; transparent: Boolean; transparentColor: LongWord): Bitmap; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_LoadBitmapWithTransparentColor');
    {$ENDIF}
    
    try
      result := sgImages.LoadBitmap(filename, transparent, transparentColor);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_LoadBitmapWithTransparentColor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_LoadBitmapWithTransparentColor');
    {$ENDIF}
  end;
  

  function sg_Images_LoadTransparentBitmapNamed(name: PChar; filename: PChar; transparentColor: LongWord): Bitmap; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_LoadTransparentBitmapNamed');
    {$ENDIF}
    
    try
      result := sgImages.LoadTransparentBitmapNamed(name, filename, transparentColor);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_LoadTransparentBitmapNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_LoadTransparentBitmapNamed');
    {$ENDIF}
  end;
  

  procedure sg_Images_MakeOpaque(bmp: Bitmap); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_MakeOpaque');
    {$ENDIF}
  
    try 
       sgImages.MakeOpaque(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_MakeOpaque');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_MakeOpaque');
    {$ENDIF}
  end;
  

  procedure sg_Images_MakeTransparent(bmp: Bitmap); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_MakeTransparent');
    {$ENDIF}
  
    try 
       sgImages.MakeTransparent(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_MakeTransparent');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_MakeTransparent');
    {$ENDIF}
  end;
  

  procedure sg_Images_OptimiseBitmap(surface: Bitmap); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_OptimiseBitmap');
    {$ENDIF}
  
    try 
       sgImages.OptimiseBitmap(surface);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_OptimiseBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_OptimiseBitmap');
    {$ENDIF}
  end;
  

  function sg_Images_PixelDrawnAtPoint(bmp: Bitmap; x: Longint; y: Longint): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_PixelDrawnAtPoint');
    {$ENDIF}
    
    try
      result := sgImages.PixelDrawnAtPoint(bmp, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_PixelDrawnAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_PixelDrawnAtPoint');
    {$ENDIF}
  end;
  

  procedure sg_Images_ReleaseAllBitmaps(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_ReleaseAllBitmaps');
    {$ENDIF}
  
    try 
       sgImages.ReleaseAllBitmaps();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_ReleaseAllBitmaps');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_ReleaseAllBitmaps');
    {$ENDIF}
  end;
  

  procedure sg_Images_ReleaseBitmap(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_ReleaseBitmap');
    {$ENDIF}
  
    try 
       sgImages.ReleaseBitmap(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_ReleaseBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_ReleaseBitmap');
    {$ENDIF}
  end;
  

  function sg_Images_RotateScaleBitmap(src: Bitmap; degRot: Single; scale: Single): Bitmap; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_RotateScaleBitmap');
    {$ENDIF}
    
    try
      result := sgImages.RotateScaleBitmap(src, degRot, scale);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_RotateScaleBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_RotateScaleBitmap');
    {$ENDIF}
  end;
  

  function sg_Images_SameBitmapCell(var bmp1: BitmapCell; var bmp2: BitmapCell): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_SameBitmapCell');
    {$ENDIF}
    
    try
      result := sgImages.SameBitmapCell(bmp1, bmp2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_SameBitmapCell');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_SameBitmapCell');
    {$ENDIF}
  end;
  

  procedure sg_Images_SaveBitmap(src: Bitmap; filepath: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_SaveBitmap');
    {$ENDIF}
  
    try 
       sgImages.SaveBitmap(src, filepath);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_SaveBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_SaveBitmap');
    {$ENDIF}
  end;
  

  procedure sg_Images_SaveToPNG(bmp: Bitmap; filename: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_SaveToPNG');
    {$ENDIF}
  
    try 
       sgImages.SaveToPNG(bmp, filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_SaveToPNG');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_SaveToPNG');
    {$ENDIF}
  end;
  

  procedure sg_Images_SetOpacity(bmp: Bitmap; pct: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_SetOpacity');
    {$ENDIF}
  
    try 
       sgImages.SetOpacity(bmp, pct);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_SetOpacity');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_SetOpacity');
    {$ENDIF}
  end;
  

  procedure sg_Images_SetTransparentColor(src: Bitmap; clr: LongWord); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_SetTransparentColor');
    {$ENDIF}
  
    try 
       sgImages.SetTransparentColor(src, clr);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_SetTransparentColor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_SetTransparentColor');
    {$ENDIF}
  end;
  

  procedure sg_Images_SetupBitmapForCollisions(src: Bitmap); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_SetupBitmapForCollisions');
    {$ENDIF}
  
    try 
       sgImages.SetupBitmapForCollisions(src);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_SetupBitmapForCollisions');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_SetupBitmapForCollisions');
    {$ENDIF}
  end;
  

  function sg_Input_AnyKeyPressed(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_AnyKeyPressed');
    {$ENDIF}
    
    try
      result := sgInput.AnyKeyPressed();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_AnyKeyPressed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_AnyKeyPressed');
    {$ENDIF}
  end;
  

  function sg_Input_DeviceMovedInXAxis(): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_DeviceMovedInXAxis');
    {$ENDIF}
    
    try
      result := sgInput.DeviceMovedInXAxis();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_DeviceMovedInXAxis');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_DeviceMovedInXAxis');
    {$ENDIF}
  end;
  

  function sg_Input_DeviceMovedInYAxis(): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_DeviceMovedInYAxis');
    {$ENDIF}
    
    try
      result := sgInput.DeviceMovedInYAxis();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_DeviceMovedInYAxis');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_DeviceMovedInYAxis');
    {$ENDIF}
  end;
  

  function sg_Input_DeviceMovedInZAxis(): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_DeviceMovedInZAxis');
    {$ENDIF}
    
    try
      result := sgInput.DeviceMovedInZAxis();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_DeviceMovedInZAxis');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_DeviceMovedInZAxis');
    {$ENDIF}
  end;
  

  procedure sg_Input_EndReadingText(result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_EndReadingText');
    {$ENDIF}
    
    try
      result_temp := sgInput.EndReadingText();
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_EndReadingText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_EndReadingText');
    {$ENDIF}
  end;
  

  procedure sg_Input_FingersOnScreen(result: FingerPtr; result_len: Longint); cdecl; export;
    var
      result_temp: FingerArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_FingersOnScreen');
    {$ENDIF}
    
    try
      result_temp := sgInput.FingersOnScreen();
        FingerCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_FingersOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_FingersOnScreen');
    {$ENDIF}
  end;
  

  function sg_Input_GetAccelerometerThreshold(): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_GetAccelerometerThreshold');
    {$ENDIF}
    
    try
      result := sgInput.AccelerometerThreshold();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_GetAccelerometerThreshold');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_GetAccelerometerThreshold');
    {$ENDIF}
  end;
  

  procedure sg_Input_HideKeyboard(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_HideKeyboard');
    {$ENDIF}
  
    try 
       sgInput.HideKeyboard();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_HideKeyboard');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_HideKeyboard');
    {$ENDIF}
  end;
  

  procedure sg_Input_HideMouse(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_HideMouse');
    {$ENDIF}
  
    try 
       sgInput.HideMouse();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_HideMouse');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_HideMouse');
    {$ENDIF}
  end;
  

  function sg_Input_KeyDown(key: KeyCode): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_KeyDown');
    {$ENDIF}
    
    try
      result := sgInput.KeyDown(key);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_KeyDown');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_KeyDown');
    {$ENDIF}
  end;
  

  procedure sg_Input_KeyName(key: KeyCode; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_KeyName');
    {$ENDIF}
    
    try
      result_temp := sgInput.KeyName(key);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_KeyName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_KeyName');
    {$ENDIF}
  end;
  

  function sg_Input_KeyReleased(key: KeyCode): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_KeyReleased');
    {$ENDIF}
    
    try
      result := sgInput.KeyReleased(key);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_KeyReleased');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_KeyReleased');
    {$ENDIF}
  end;
  

  function sg_Input_KeyTyped(key: KeyCode): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_KeyTyped');
    {$ENDIF}
    
    try
      result := sgInput.KeyTyped(key);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_KeyTyped');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_KeyTyped');
    {$ENDIF}
  end;
  

  function sg_Input_KeyUp(key: KeyCode): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_KeyUp');
    {$ENDIF}
    
    try
      result := sgInput.KeyUp(key);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_KeyUp');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_KeyUp');
    {$ENDIF}
  end;
  

  function sg_Input_KeyboardShown(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_KeyboardShown');
    {$ENDIF}
    
    try
      result := sgInput.KeyboardShown();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_KeyboardShown');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_KeyboardShown');
    {$ENDIF}
  end;
  

  function sg_Input_MouseClicked(button: MouseButton): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_MouseClicked');
    {$ENDIF}
    
    try
      result := sgInput.MouseClicked(button);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_MouseClicked');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_MouseClicked');
    {$ENDIF}
  end;
  

  function sg_Input_MouseDown(button: MouseButton): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_MouseDown');
    {$ENDIF}
    
    try
      result := sgInput.MouseDown(button);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_MouseDown');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_MouseDown');
    {$ENDIF}
  end;
  

  function sg_Input_MouseMovement(): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_MouseMovement');
    {$ENDIF}
    
    try
      result := sgInput.MouseMovement();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_MouseMovement');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_MouseMovement');
    {$ENDIF}
  end;
  

  function sg_Input_MousePosition(): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_MousePosition');
    {$ENDIF}
    
    try
      result := sgInput.MousePosition();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_MousePosition');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_MousePosition');
    {$ENDIF}
  end;
  

  function sg_Input_MousePositionAsVector(): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_MousePositionAsVector');
    {$ENDIF}
    
    try
      result := sgInput.MousePositionAsVector();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_MousePositionAsVector');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_MousePositionAsVector');
    {$ENDIF}
  end;
  

  function sg_Input_MouseShown(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_MouseShown');
    {$ENDIF}
    
    try
      result := sgInput.MouseShown();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_MouseShown');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_MouseShown');
    {$ENDIF}
  end;
  

  function sg_Input_MouseUp(button: MouseButton): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_MouseUp');
    {$ENDIF}
    
    try
      result := sgInput.MouseUp(button);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_MouseUp');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_MouseUp');
    {$ENDIF}
  end;
  

  function sg_Input_MouseX(): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_MouseX');
    {$ENDIF}
    
    try
      result := sgInput.MouseX();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_MouseX');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_MouseX');
    {$ENDIF}
  end;
  

  function sg_Input_MouseY(): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_MouseY');
    {$ENDIF}
    
    try
      result := sgInput.MouseY();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_MouseY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_MouseY');
    {$ENDIF}
  end;
  

  procedure sg_Input_MoveMouse(x: Byte; y: Byte); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_MoveMouse');
    {$ENDIF}
  
    try 
       sgInput.MoveMouse(x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_MoveMouse');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_MoveMouse');
    {$ENDIF}
  end;
  

  procedure sg_Input_MoveMouseToPoint(var point: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_MoveMouseToPoint');
    {$ENDIF}
  
    try 
       sgInput.MoveMouse(point);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_MoveMouseToPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_MoveMouseToPoint');
    {$ENDIF}
  end;
  

  function sg_Input_NumberOfFingersOnScreen(): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_NumberOfFingersOnScreen');
    {$ENDIF}
    
    try
      result := sgInput.NumberOfFingersOnScreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_NumberOfFingersOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_NumberOfFingersOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Input_ProcessEvents(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_ProcessEvents');
    {$ENDIF}
  
    try 
       sgInput.ProcessEvents();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_ProcessEvents');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_ProcessEvents');
    {$ENDIF}
  end;
  

  function sg_Input_ReadingText(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_ReadingText');
    {$ENDIF}
    
    try
      result := sgInput.ReadingText();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_ReadingText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_ReadingText');
    {$ENDIF}
  end;
  

  function sg_Input_ScreenTouched(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_ScreenTouched');
    {$ENDIF}
    
    try
      result := sgInput.ScreenTouched();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_ScreenTouched');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_ScreenTouched');
    {$ENDIF}
  end;
  

  procedure sg_Input_SetAccelerometerThreshold(value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_SetAccelerometerThreshold');
    {$ENDIF}
  
    try 
       sgInput.AccelerometerThreshold(value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_SetAccelerometerThreshold');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_SetAccelerometerThreshold');
    {$ENDIF}
  end;
  

  procedure sg_Input_SetMouseVisible(show: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_SetMouseVisible');
    {$ENDIF}
  
    try 
       sgInput.ShowMouse(show);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_SetMouseVisible');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_SetMouseVisible');
    {$ENDIF}
  end;
  

  procedure sg_Input_ShowKeyboard(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_ShowKeyboard');
    {$ENDIF}
  
    try 
       sgInput.ShowKeyboard();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_ShowKeyboard');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_ShowKeyboard');
    {$ENDIF}
  end;
  

  procedure sg_Input_ShowMouse(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_ShowMouse');
    {$ENDIF}
  
    try 
       sgInput.ShowMouse();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_ShowMouse');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_ShowMouse');
    {$ENDIF}
  end;
  

  procedure sg_Input_StartReadingText(textColor: LongWord; maxLength: Longint; theFont: Font; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_StartReadingText');
    {$ENDIF}
  
    try 
       sgInput.StartReadingText(textColor, maxLength, theFont, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_StartReadingText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_StartReadingText');
    {$ENDIF}
  end;
  

  procedure sg_Input_StartReadingTextWithText(text: PChar; textColor: LongWord; maxLength: Longint; theFont: Font; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_StartReadingTextWithText');
    {$ENDIF}
  
    try 
       sgInput.StartReadingTextWithText(text, textColor, maxLength, theFont, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_StartReadingTextWithText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_StartReadingTextWithText');
    {$ENDIF}
  end;
  

  procedure sg_Input_StartReadingTextWithTextAndColorInArea(text: PChar; textColor: LongWord; backGroundColor: LongWord; maxLength: Longint; theFont: Font; var area: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_StartReadingTextWithTextAndColorInArea');
    {$ENDIF}
  
    try 
       sgInput.StartReadingTextWithText(text, textColor, backGroundColor, maxLength, theFont, area);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_StartReadingTextWithTextAndColorInArea');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_StartReadingTextWithTextAndColorInArea');
    {$ENDIF}
  end;
  

  procedure sg_Input_StartReadingTextWithTextAtPt(text: PChar; textColor: LongWord; maxLength: Longint; theFont: Font; var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_StartReadingTextWithTextAtPt');
    {$ENDIF}
  
    try 
       sgInput.StartReadingTextWithText(text, textColor, maxLength, theFont, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_StartReadingTextWithTextAtPt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_StartReadingTextWithTextAtPt');
    {$ENDIF}
  end;
  

  procedure sg_Input_StartReadingTextWithTextInArea(text: PChar; textColor: LongWord; maxLength: Longint; theFont: Font; var area: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_StartReadingTextWithTextInArea');
    {$ENDIF}
  
    try 
       sgInput.StartReadingTextWithText(text, textColor, maxLength, theFont, area);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_StartReadingTextWithTextInArea');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_StartReadingTextWithTextInArea');
    {$ENDIF}
  end;
  

  procedure sg_Input_StartReadingTextWithinArea(textColor: LongWord; maxLength: Longint; theFont: Font; var area: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_StartReadingTextWithinArea');
    {$ENDIF}
  
    try 
       sgInput.StartReadingText(textColor, maxLength, theFont, area);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_StartReadingTextWithinArea');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_StartReadingTextWithinArea');
    {$ENDIF}
  end;
  

  function sg_Input_TextEntryCancelled(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_TextEntryCancelled');
    {$ENDIF}
    
    try
      result := sgInput.TextEntryCancelled();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_TextEntryCancelled');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_TextEntryCancelled');
    {$ENDIF}
  end;
  

  procedure sg_Input_TextReadAsASCII(result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_TextReadAsASCII');
    {$ENDIF}
    
    try
      result_temp := sgInput.TextReadAsASCII();
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_TextReadAsASCII');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_TextReadAsASCII');
    {$ENDIF}
  end;
  

  procedure sg_Input_ToggleKeyboard(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_ToggleKeyboard');
    {$ENDIF}
  
    try 
       sgInput.ToggleKeyboard();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_ToggleKeyboard');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_ToggleKeyboard');
    {$ENDIF}
  end;
  

  function sg_Input_WindowCloseRequested(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_WindowCloseRequested');
    {$ENDIF}
    
    try
      result := sgInput.WindowCloseRequested();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_WindowCloseRequested');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_WindowCloseRequested');
    {$ENDIF}
  end;
  

  function sg_Networking_AcceptTCPConnection(): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_AcceptTCPConnection');
    {$ENDIF}
    
    try
      result := sgNetworking.AcceptTCPConnection();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_AcceptTCPConnection');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_AcceptTCPConnection');
    {$ENDIF}
  end;
  

  procedure sg_Networking_BroadcastTCPMessage(aMsg: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_BroadcastTCPMessage');
    {$ENDIF}
  
    try 
       sgNetworking.BroadcastTCPMessage(aMsg);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_BroadcastTCPMessage');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_BroadcastTCPMessage');
    {$ENDIF}
  end;
  

  procedure sg_Networking_BroadcastUDPMessage(aMsg: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_BroadcastUDPMessage');
    {$ENDIF}
  
    try 
       sgNetworking.BroadcastUDPMessage(aMsg);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_BroadcastUDPMessage');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_BroadcastUDPMessage');
    {$ENDIF}
  end;
  

  procedure sg_Networking_ClearMessageQueue(aConnection: Connection); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_ClearMessageQueue');
    {$ENDIF}
  
    try 
       sgNetworking.ClearMessageQueue(aConnection);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_ClearMessageQueue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_ClearMessageQueue');
    {$ENDIF}
  end;
  

  procedure sg_Networking_CloseAllConnections(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_CloseAllConnections');
    {$ENDIF}
  
    try 
       sgNetworking.CloseAllConnections();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_CloseAllConnections');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_CloseAllConnections');
    {$ENDIF}
  end;
  

  procedure sg_Networking_CloseAllSockets(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_CloseAllSockets');
    {$ENDIF}
  
    try 
       sgNetworking.CloseAllSockets();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_CloseAllSockets');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_CloseAllSockets');
    {$ENDIF}
  end;
  

  procedure sg_Networking_CloseAllTCPHostSockets(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_CloseAllTCPHostSockets');
    {$ENDIF}
  
    try 
       sgNetworking.CloseAllTCPHostSockets();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_CloseAllTCPHostSockets');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_CloseAllTCPHostSockets');
    {$ENDIF}
  end;
  

  procedure sg_Networking_CloseAllUDPSockets(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_CloseAllUDPSockets');
    {$ENDIF}
  
    try 
       sgNetworking.CloseAllUDPSockets();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_CloseAllUDPSockets');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_CloseAllUDPSockets');
    {$ENDIF}
  end;
  

  function sg_Networking_CloseConnection(var aConnection: Connection): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_CloseConnection');
    {$ENDIF}
    
    try
      result := sgNetworking.CloseConnection(aConnection);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_CloseConnection');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_CloseConnection');
    {$ENDIF}
  end;
  

  function sg_Networking_CloseTCPHostSocket(aPort: Longint): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_CloseTCPHostSocket');
    {$ENDIF}
    
    try
      result := sgNetworking.CloseTCPHostSocket(aPort);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_CloseTCPHostSocket');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_CloseTCPHostSocket');
    {$ENDIF}
  end;
  

  function sg_Networking_CloseUDPSocket(aPort: Longint): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_CloseUDPSocket');
    {$ENDIF}
    
    try
      result := sgNetworking.CloseUDPSocket(aPort);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_CloseUDPSocket');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_CloseUDPSocket');
    {$ENDIF}
  end;
  

  function sg_Networking_ConnectionCount(): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_ConnectionCount');
    {$ENDIF}
    
    try
      result := sgNetworking.ConnectionCount();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_ConnectionCount');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_ConnectionCount');
    {$ENDIF}
  end;
  

  function sg_Networking_ConnectionIP(aConnection: Connection): Longword; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_ConnectionIP');
    {$ENDIF}
    
    try
      result := sgNetworking.ConnectionIP(aConnection);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_ConnectionIP');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_ConnectionIP');
    {$ENDIF}
  end;
  

  function sg_Networking_ConnectionPort(aConnection: Connection): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_ConnectionPort');
    {$ENDIF}
    
    try
      result := sgNetworking.ConnectionPort(aConnection);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_ConnectionPort');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_ConnectionPort');
    {$ENDIF}
  end;
  

  function sg_Networking_ConnectionQueueSize(): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_ConnectionQueueSize');
    {$ENDIF}
    
    try
      result := sgNetworking.ConnectionQueueSize();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_ConnectionQueueSize');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_ConnectionQueueSize');
    {$ENDIF}
  end;
  

  function sg_Networking_CreateTCPConnection(aIP: PChar; aPort: Longint): Connection; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_CreateTCPConnection');
    {$ENDIF}
    
    try
      result := sgNetworking.CreateTCPConnection(aIP, aPort);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_CreateTCPConnection');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_CreateTCPConnection');
    {$ENDIF}
  end;
  

  function sg_Networking_CreateTCPHost(aPort: Longint): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_CreateTCPHost');
    {$ENDIF}
    
    try
      result := sgNetworking.CreateTCPHost(aPort);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_CreateTCPHost');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_CreateTCPHost');
    {$ENDIF}
  end;
  

  function sg_Networking_CreateUDPConnection(aDestIP: PChar; aDestPort: Longint; aInPort: Longint): Connection; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_CreateUDPConnection');
    {$ENDIF}
    
    try
      result := sgNetworking.CreateUDPConnection(aDestIP, aDestPort, aInPort);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_CreateUDPConnection');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_CreateUDPConnection');
    {$ENDIF}
  end;
  

  function sg_Networking_CreateUDPHost(aPort: Longint): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_CreateUDPHost');
    {$ENDIF}
    
    try
      result := sgNetworking.CreateUDPHost(aPort);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_CreateUDPHost');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_CreateUDPHost');
    {$ENDIF}
  end;
  

  procedure sg_Networking_DecToHex(aDec: Longword; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_DecToHex');
    {$ENDIF}
    
    try
      result_temp := sgNetworking.DecToHex(aDec);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_DecToHex');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_DecToHex');
    {$ENDIF}
  end;
  

  procedure sg_Networking_EnqueueMessage(aMsg: PChar; aConnection: Connection); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_EnqueueMessage');
    {$ENDIF}
  
    try 
       sgNetworking.EnqueueMessage(aMsg, aConnection);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_EnqueueMessage');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_EnqueueMessage');
    {$ENDIF}
  end;
  

  procedure sg_Networking_EnqueueNewConnection(aConnection: Connection); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_EnqueueNewConnection');
    {$ENDIF}
  
    try 
       sgNetworking.EnqueueNewConnection(aConnection);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_EnqueueNewConnection');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_EnqueueNewConnection');
    {$ENDIF}
  end;
  

  function sg_Networking_FetchConnection(): Connection; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_FetchConnection');
    {$ENDIF}
    
    try
      result := sgNetworking.FetchConnection();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_FetchConnection');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_FetchConnection');
    {$ENDIF}
  end;
  

  procedure sg_Networking_FreeConnection(var aConnection: Connection); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_FreeConnection');
    {$ENDIF}
  
    try 
       sgNetworking.FreeConnection(aConnection);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_FreeConnection');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_FreeConnection');
    {$ENDIF}
  end;
  

  procedure sg_Networking_HexStrToIPv4(aHex: PChar; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_HexStrToIPv4');
    {$ENDIF}
    
    try
      result_temp := sgNetworking.HexStrToIPv4(aHex);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_HexStrToIPv4');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_HexStrToIPv4');
    {$ENDIF}
  end;
  

  procedure sg_Networking_HexToDecString(aHex: PChar; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_HexToDecString');
    {$ENDIF}
    
    try
      result_temp := sgNetworking.HexToDecString(aHex);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_HexToDecString');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_HexToDecString');
    {$ENDIF}
  end;
  

  function sg_Networking_IPv4ToDec(aIP: PChar): Longword; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_IPv4ToDec');
    {$ENDIF}
    
    try
      result := sgNetworking.IPv4ToDec(aIP);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_IPv4ToDec');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_IPv4ToDec');
    {$ENDIF}
  end;
  

  function sg_Networking_MessageCount(aConnection: Connection): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_MessageCount');
    {$ENDIF}
    
    try
      result := sgNetworking.MessageCount(aConnection);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_MessageCount');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_MessageCount');
    {$ENDIF}
  end;
  

  procedure sg_Networking_MyIP(result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_MyIP');
    {$ENDIF}
    
    try
      result_temp := sgNetworking.MyIP();
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_MyIP');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_MyIP');
    {$ENDIF}
  end;
  

  procedure sg_Networking_ReadLastMessage(aConnection: Connection; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_ReadLastMessage');
    {$ENDIF}
    
    try
      result_temp := sgNetworking.ReadLastMessage(aConnection);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_ReadLastMessage');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_ReadLastMessage');
    {$ENDIF}
  end;
  

  procedure sg_Networking_ReadMessage(aConnection: Connection; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_ReadMessage');
    {$ENDIF}
    
    try
      result_temp := sgNetworking.ReadMessage(aConnection);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_ReadMessage');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_ReadMessage');
    {$ENDIF}
  end;
  

  procedure sg_Networking_ReleaseAllConnections(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_ReleaseAllConnections');
    {$ENDIF}
  
    try 
       sgNetworking.ReleaseAllConnections();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_ReleaseAllConnections');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_ReleaseAllConnections');
    {$ENDIF}
  end;
  

  function sg_Networking_RetreiveConnection(aConnectionAt: Longint): Connection; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_RetreiveConnection');
    {$ENDIF}
    
    try
      result := sgNetworking.RetreiveConnection(aConnectionAt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_RetreiveConnection');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_RetreiveConnection');
    {$ENDIF}
  end;
  

  function sg_Networking_SendTCPMessage(aMsg: PChar; aConnection: Connection): Connection; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_SendTCPMessage');
    {$ENDIF}
    
    try
      result := sgNetworking.SendTCPMessage(aMsg, aConnection);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_SendTCPMessage');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_SendTCPMessage');
    {$ENDIF}
  end;
  

  function sg_Networking_SendUDPMessage(aMsg: PChar; aConnection: Connection): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_SendUDPMessage');
    {$ENDIF}
    
    try
      result := sgNetworking.SendUDPMessage(aMsg, aConnection);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_SendUDPMessage');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_SendUDPMessage');
    {$ENDIF}
  end;
  

  function sg_Networking_TCPMessageReceived(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_TCPMessageReceived');
    {$ENDIF}
    
    try
      result := sgNetworking.TCPMessageReceived();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_TCPMessageReceived');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_TCPMessageReceived');
    {$ENDIF}
  end;
  

  function sg_Networking_UDPMessageReceived(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Networking_UDPMessageReceived');
    {$ENDIF}
    
    try
      result := sgNetworking.UDPMessageReceived();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Networking_UDPMessageReceived');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Networking_UDPMessageReceived');
    {$ENDIF}
  end;
  

  function sg_Physics_BitmapAtPointsCollision(bmp1: Bitmap; var pt1: Point2D; bmp2: Bitmap; var pt2: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_BitmapAtPointsCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.BitmapCollision(bmp1, pt1, bmp2, pt2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_BitmapAtPointsCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_BitmapAtPointsCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_BitmapCollision(bmp1: Bitmap; x1: Longint; y1: Longint; bmp2: Bitmap; x2: Longint; y2: Longint): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_BitmapCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.BitmapCollision(bmp1, x1, y1, bmp2, x2, y2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_BitmapCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_BitmapCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_BitmapPartAtPtRectCollision(bmp: Bitmap; var pt: Point2D; var part: Rectangle; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_BitmapPartAtPtRectCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.BitmapRectCollision(bmp, pt, part, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_BitmapPartAtPtRectCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_BitmapPartAtPtRectCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_BitmapPartPointCollision(bmp: Bitmap; x: Longint; y: Longint; var part: Rectangle; ptX: Single; ptY: Single): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_BitmapPartPointCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.BitmapPartPointCollision(bmp, x, y, part, ptX, ptY);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_BitmapPartPointCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_BitmapPartPointCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_BitmapPartPointXYCollision(bmp: Bitmap; x: Longint; y: Longint; var part: Rectangle; var pt: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_BitmapPartPointXYCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.BitmapPartPointCollision(bmp, x, y, part, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_BitmapPartPointXYCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_BitmapPartPointXYCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_BitmapPartRectCollision(bmp: Bitmap; x: Longint; y: Longint; var part: Rectangle; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_BitmapPartRectCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.BitmapRectCollision(bmp, x, y, part, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_BitmapPartRectCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_BitmapPartRectCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_BitmapPointCollision(bmp: Bitmap; x: Longint; y: Longint; ptX: Single; ptY: Single): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_BitmapPointCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.BitmapPointCollision(bmp, x, y, ptX, ptY);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_BitmapPointCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_BitmapPointCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_BitmapPointPtCollision(bmp: Bitmap; x: Longint; y: Longint; var pt: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_BitmapPointPtCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.BitmapPointCollision(bmp, x, y, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_BitmapPointPtCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_BitmapPointPtCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_BitmapRectCollision(bmp: Bitmap; x: Longint; y: Longint; rectX: Longint; rectY: Longint; rectWidth: Longint; rectHeight: Longint): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_BitmapRectCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.BitmapRectCollision(bmp, x, y, rectX, rectY, rectWidth, rectHeight);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_BitmapRectCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_BitmapRectCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_BitmapRectangleCollision(bmp: Bitmap; x: Longint; y: Longint; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_BitmapRectangleCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.BitmapRectCollision(bmp, x, y, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_BitmapRectangleCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_BitmapRectangleCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_BitmapsPartsCollision(bmp1: Bitmap; var pt1: Point2D; var part1: Rectangle; bmp2: Bitmap; var pt2: Point2D; var part2: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_BitmapsPartsCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.BitmapCollision(bmp1, pt1, part1, bmp2, pt2, part2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_BitmapsPartsCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_BitmapsPartsCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_CellBitmapCollision(bmp1: Bitmap; cell: Longint; x1: Longint; y1: Longint; bmp2: Bitmap; x2: Longint; y2: Longint): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CellBitmapCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.CellBitmapCollision(bmp1, cell, x1, y1, bmp2, x2, y2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CellBitmapCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CellBitmapCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_CellBitmapCollisionAtPt(bmp1: Bitmap; cell: Longint; var pt1: Point2D; bmp2: Bitmap; var pt2: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CellBitmapCollisionAtPt');
    {$ENDIF}
    
    try
      result := sgPhysics.CellBitmapCollision(bmp1, cell, pt1, bmp2, pt2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CellBitmapCollisionAtPt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CellBitmapCollisionAtPt');
    {$ENDIF}
  end;
  

  function sg_Physics_CellBitmapPartCollision(bmp1: Bitmap; cell: Longint; x1: Longint; y1: Longint; bmp2: Bitmap; x2: Longint; y2: Longint; var part: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CellBitmapPartCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.CellBitmapCollision(bmp1, cell, x1, y1, bmp2, x2, y2, part);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CellBitmapPartCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CellBitmapPartCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_CellBitmapPartCollisionAtPt(bmp1: Bitmap; cell: Longint; var pt1: Point2D; bmp2: Bitmap; var pt2: Point2D; var part: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CellBitmapPartCollisionAtPt');
    {$ENDIF}
    
    try
      result := sgPhysics.CellBitmapCollision(bmp1, cell, pt1, bmp2, pt2, part);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CellBitmapPartCollisionAtPt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CellBitmapPartCollisionAtPt');
    {$ENDIF}
  end;
  

  function sg_Physics_CellCollision(bmp1: Bitmap; cell1: Longint; x1: Longint; y1: Longint; bmp2: Bitmap; cell2: Longint; x2: Longint; y2: Longint): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CellCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.CellCollision(bmp1, cell1, x1, y1, bmp2, cell2, x2, y2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CellCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CellCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_CellCollisionAtPt(bmp1: Bitmap; cell1: Longint; var pt1: Point2D; bmp2: Bitmap; cell2: Longint; var pt2: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CellCollisionAtPt');
    {$ENDIF}
    
    try
      result := sgPhysics.CellCollision(bmp1, cell1, pt1, bmp2, cell2, pt2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CellCollisionAtPt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CellCollisionAtPt');
    {$ENDIF}
  end;
  

  function sg_Physics_CellRectCollision(bmp: Bitmap; cell: Longint; x: Longint; y: Longint; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CellRectCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.CellRectCollision(bmp, cell, x, y, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CellRectCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CellRectCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_CellRectCollisionAtPt(bmp: Bitmap; cell: Longint; var pt: Point2D; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CellRectCollisionAtPt');
    {$ENDIF}
    
    try
      result := sgPhysics.CellRectCollision(bmp, cell, pt, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CellRectCollisionAtPt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CellRectCollisionAtPt');
    {$ENDIF}
  end;
  

  function sg_Physics_CircleCircleCollision(var c1: Circle; var c2: Circle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CircleCircleCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.CircleCircleCollision(c1, c2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CircleCircleCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CircleCircleCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_CircleLinesCollision(var c: Circle; lines: LineSegmentPtr; lines_len: Longint): Boolean; cdecl; export;
    var
      lines_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CircleLinesCollision');
    {$ENDIF}
    
    try
        LineCopyFromPtr(lines, lines_len, lines_temp);
      result := sgPhysics.CircleLinesCollision(c, lines_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CircleLinesCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CircleLinesCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_CircleRectCollision(var c: Circle; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CircleRectCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.CircleRectCollision(c, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CircleRectCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CircleRectCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_CircleTriangleCollision(var c: Circle; var tri: Triangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CircleTriangleCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.CircleTriangleCollision(c, tri);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CircleTriangleCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CircleTriangleCollision');
    {$ENDIF}
  end;
  

  procedure sg_Physics_CollideCircleCircle(s: Sprite; var c: Circle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CollideCircleCircle');
    {$ENDIF}
  
    try 
       sgPhysics.CollideCircleCircle(s, c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CollideCircleCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CollideCircleCircle');
    {$ENDIF}
  end;
  

  procedure sg_Physics_CollideCircleLine(s: Sprite; var line: LineSegment); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CollideCircleLine');
    {$ENDIF}
  
    try 
       sgPhysics.CollideCircleLine(s, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CollideCircleLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CollideCircleLine');
    {$ENDIF}
  end;
  

  procedure sg_Physics_CollideCircleLines(s: Sprite; lines: LineSegmentPtr; lines_len: Longint); cdecl; export;
    var
      lines_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CollideCircleLines');
    {$ENDIF}
  
    try 
        LineCopyFromPtr(lines, lines_len, lines_temp);
       sgPhysics.CollideCircleLines(s, lines_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CollideCircleLines');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CollideCircleLines');
    {$ENDIF}
  end;
  

  procedure sg_Physics_CollideCircleRectangle(s: Sprite; var rect: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CollideCircleRectangle');
    {$ENDIF}
  
    try 
       sgPhysics.CollideCircleRectangle(s, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CollideCircleRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CollideCircleRectangle');
    {$ENDIF}
  end;
  

  procedure sg_Physics_CollideCircles(s1: Sprite; s2: Sprite); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CollideCircles');
    {$ENDIF}
  
    try 
       sgPhysics.CollideCircles(s1, s2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CollideCircles');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CollideCircles');
    {$ENDIF}
  end;
  

  function sg_Physics_RectLineCollision(var rect: Rectangle; var line: LineSegment): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_RectLineCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.RectLineCollision(rect, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_RectLineCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_RectLineCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_SideForCollisionTest(var velocity: Vector): CollisionSide; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_SideForCollisionTest');
    {$ENDIF}
    
    try
      result := sgPhysics.SideForCollisionTest(velocity);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_SideForCollisionTest');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_SideForCollisionTest');
    {$ENDIF}
  end;
  

  function sg_Physics_SpriteBitmapAtPointCollision(s: Sprite; bmp: Bitmap; var pt: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_SpriteBitmapAtPointCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.SpriteBitmapCollision(s, bmp, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_SpriteBitmapAtPointCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_SpriteBitmapAtPointCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_SpriteBitmapCollision(s: Sprite; bmp: Bitmap; x: Single; y: Single): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_SpriteBitmapCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.SpriteBitmapCollision(s, bmp, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_SpriteBitmapCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_SpriteBitmapCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_SpriteCircleLineCollision(s: Sprite; var line: LineSegment): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_SpriteCircleLineCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.CircleLineCollision(s, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_SpriteCircleLineCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_SpriteCircleLineCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_SpriteCollision(s1: Sprite; s2: Sprite): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_SpriteCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.SpriteCollision(s1, s2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_SpriteCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_SpriteCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_SpriteRectCollision(s: Sprite; x: Single; y: Single; width: Longint; height: Longint): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_SpriteRectCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.SpriteRectCollision(s, x, y, width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_SpriteRectCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_SpriteRectCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_SpriteRectLineCollision(s: Sprite; var line: LineSegment): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_SpriteRectLineCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.RectLineCollision(s, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_SpriteRectLineCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_SpriteRectLineCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_SpriteRectangleCollision(s: Sprite; var r: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_SpriteRectangleCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.SpriteRectCollision(s, r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_SpriteRectangleCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_SpriteRectangleCollision');
    {$ENDIF}
  end;
  

  function sg_Physics_TriangleLineCollision(var tri: Triangle; var ln: LineSegment): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_TriangleLineCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.TriangleLineCollision(tri, ln);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_TriangleLineCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_TriangleLineCollision');
    {$ENDIF}
  end;
  

  procedure sg_Resources_AppPath(result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_AppPath');
    {$ENDIF}
    
    try
      result_temp := sgResources.AppPath();
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_AppPath');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_AppPath');
    {$ENDIF}
  end;
  

  procedure sg_Resources_FilenameToResource(name: PChar; kind: ResourceKind; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_FilenameToResource');
    {$ENDIF}
    
    try
      result_temp := sgResources.FilenameToResource(name, kind);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_FilenameToResource');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_FilenameToResource');
    {$ENDIF}
  end;
  

  function sg_Resources_HasResourceBundle(name: PChar): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_HasResourceBundle');
    {$ENDIF}
    
    try
      result := sgResources.HasResourceBundle(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_HasResourceBundle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_HasResourceBundle');
    {$ENDIF}
  end;
  

  procedure sg_Resources_LoadResourceBundle(name: PChar; showProgress: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_LoadResourceBundle');
    {$ENDIF}
  
    try 
       sgResources.LoadResourceBundle(name, showProgress);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_LoadResourceBundle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_LoadResourceBundle');
    {$ENDIF}
  end;
  

  procedure sg_Resources_LoadResourceBundleNamed(name: PChar; filename: PChar; showProgress: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_LoadResourceBundleNamed');
    {$ENDIF}
  
    try 
       sgResources.LoadResourceBundleNamed(name, filename, showProgress);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_LoadResourceBundleNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_LoadResourceBundleNamed');
    {$ENDIF}
  end;
  

  procedure sg_Resources_PathToOtherResource(filename: PChar; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_PathToOtherResource');
    {$ENDIF}
    
    try
      result_temp := sgResources.PathToResource(filename);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_PathToOtherResource');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_PathToOtherResource');
    {$ENDIF}
  end;
  

  procedure sg_Resources_PathToOtherResourceWithBase(path: PChar; filename: PChar; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_PathToOtherResourceWithBase');
    {$ENDIF}
    
    try
      result_temp := sgResources.PathToResourceWithBase(path, filename);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_PathToOtherResourceWithBase');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_PathToOtherResourceWithBase');
    {$ENDIF}
  end;
  

  procedure sg_Resources_PathToResource(filename: PChar; kind: ResourceKind; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_PathToResource');
    {$ENDIF}
    
    try
      result_temp := sgResources.PathToResource(filename, kind);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_PathToResource');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_PathToResource');
    {$ENDIF}
  end;
  

  procedure sg_Resources_PathToResourceWithBase(path: PChar; filename: PChar; kind: ResourceKind; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_PathToResourceWithBase');
    {$ENDIF}
    
    try
      result_temp := sgResources.PathToResourceWithBase(path, filename, kind);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_PathToResourceWithBase');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_PathToResourceWithBase');
    {$ENDIF}
  end;
  

  procedure sg_Resources_PathToResourceWithSubPaths(filename: PChar; kind: ResourceKind; subPaths: StringPtr; result: PChar; subPaths_len: Longint); cdecl; export;
    var
      subPaths_temp: StringArray;
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_PathToResourceWithSubPaths');
    {$ENDIF}
    
    try
        StringCopyFromPtr(subPaths, subPaths_len, subPaths_temp);
      result_temp := sgResources.PathToResource(filename, kind, subPaths_temp);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_PathToResourceWithSubPaths');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_PathToResourceWithSubPaths');
    {$ENDIF}
  end;
  

  procedure sg_Resources_PathToResourseInSubdir(filename: PChar; subdir: PChar; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_PathToResourseInSubdir');
    {$ENDIF}
    
    try
      result_temp := sgResources.PathToResource(filename, subdir);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_PathToResourseInSubdir');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_PathToResourseInSubdir');
    {$ENDIF}
  end;
  

  procedure sg_Resources_PathToResourseKindInSubdir(filename: PChar; kind: ResourceKind; subdir: PChar; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_PathToResourseKindInSubdir');
    {$ENDIF}
    
    try
      result_temp := sgResources.PathToResource(filename, kind, subdir);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_PathToResourseKindInSubdir');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_PathToResourseKindInSubdir');
    {$ENDIF}
  end;
  

  procedure sg_Resources_RegisterFreeNotifier(fn: FreeNotifier); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_RegisterFreeNotifier');
    {$ENDIF}
  
    try 
       sgResources.RegisterFreeNotifier(fn);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_RegisterFreeNotifier');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_RegisterFreeNotifier');
    {$ENDIF}
  end;
  

  procedure sg_Resources_ReleaseAllResources(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_ReleaseAllResources');
    {$ENDIF}
  
    try 
       sgResources.ReleaseAllResources();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_ReleaseAllResources');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_ReleaseAllResources');
    {$ENDIF}
  end;
  

  procedure sg_Resources_ReleaseResourceBundle(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_ReleaseResourceBundle');
    {$ENDIF}
  
    try 
       sgResources.ReleaseResourceBundle(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_ReleaseResourceBundle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_ReleaseResourceBundle');
    {$ENDIF}
  end;
  

  procedure sg_Resources_SetAppPath(path: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_SetAppPath');
    {$ENDIF}
  
    try 
       sgResources.SetAppPath(path);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_SetAppPath');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_SetAppPath');
    {$ENDIF}
  end;
  

  procedure sg_Resources_SetAppPathWithExe(path: PChar; withExe: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_SetAppPathWithExe');
    {$ENDIF}
  
    try 
       sgResources.SetAppPath(path, withExe);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_SetAppPathWithExe');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_SetAppPathWithExe');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_CallForAllSprites(fn: SpriteFunction); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CallForAllSprites');
    {$ENDIF}
  
    try 
       sgSprites.CallForAllSprites(fn);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CallForAllSprites');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CallForAllSprites');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_CallOnSpriteEvent(handler: SpriteEventHandler); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CallOnSpriteEvent');
    {$ENDIF}
  
    try 
       sgSprites.CallOnSpriteEvent(handler);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CallOnSpriteEvent');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CallOnSpriteEvent');
    {$ENDIF}
  end;
  

  function sg_Sprites_CenterPoint(s: Sprite): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CenterPoint');
    {$ENDIF}
    
    try
      result := sgSprites.CenterPoint(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CenterPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CenterPoint');
    {$ENDIF}
  end;
  

  function sg_Sprites_CreateBasicSprite(layer: Bitmap): Sprite; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateBasicSprite');
    {$ENDIF}
    
    try
      result := sgSprites.CreateSprite(layer);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateBasicSprite');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateBasicSprite');
    {$ENDIF}
  end;
  

  function sg_Sprites_CreateBasicSpriteNamed(name: PChar; layer: Bitmap): Sprite; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateBasicSpriteNamed');
    {$ENDIF}
    
    try
      result := sgSprites.CreateSprite(name, layer);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateBasicSpriteNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateBasicSpriteNamed');
    {$ENDIF}
  end;
  

  function sg_Sprites_CreateBasicSpritePt(layer: Bitmap; pt: Point2D): Sprite; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateBasicSpritePt');
    {$ENDIF}
    
    try
      result := sgSprites.CreateSprite(layer, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateBasicSpritePt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateBasicSpritePt');
    {$ENDIF}
  end;
  

  function sg_Sprites_CreateBasicSpriteXY(layer: Bitmap; x: Single; y: Single): Sprite; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateBasicSpriteXY');
    {$ENDIF}
    
    try
      result := sgSprites.CreateSprite(layer, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateBasicSpriteXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateBasicSpriteXY');
    {$ENDIF}
  end;
  

  function sg_Sprites_CreateLayeredSprite(layers: BitmapPtr; layers_len: Longint): Sprite; cdecl; export;
    var
      layers_temp: BitmapArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateLayeredSprite');
    {$ENDIF}
    
    try
        BmpCopyFromPtr(layers, layers_len, layers_temp);
      result := sgSprites.CreateSprite(layers_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateLayeredSprite');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateLayeredSprite');
    {$ENDIF}
  end;
  

  function sg_Sprites_CreateLayeredSpriteNamed(name: PChar; layers: BitmapPtr; layers_len: Longint): Sprite; cdecl; export;
    var
      layers_temp: BitmapArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateLayeredSpriteNamed');
    {$ENDIF}
    
    try
        BmpCopyFromPtr(layers, layers_len, layers_temp);
      result := sgSprites.CreateSprite(name, layers_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateLayeredSpriteNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateLayeredSpriteNamed');
    {$ENDIF}
  end;
  

  function sg_Sprites_CreateLayeredSpriteWithAnimationScript(layers: BitmapPtr; ani: AnimationScript; layers_len: Longint): Sprite; cdecl; export;
    var
      layers_temp: BitmapArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateLayeredSpriteWithAnimationScript');
    {$ENDIF}
    
    try
        BmpCopyFromPtr(layers, layers_len, layers_temp);
      result := sgSprites.CreateSprite(layers_temp, ani);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateLayeredSpriteWithAnimationScript');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateLayeredSpriteWithAnimationScript');
    {$ENDIF}
  end;
  

  function sg_Sprites_CreateLayeredSpriteWithAnimationScriptNamed(name: PChar; layers: BitmapPtr; ani: AnimationScript; layers_len: Longint): Sprite; cdecl; export;
    var
      layers_temp: BitmapArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateLayeredSpriteWithAnimationScriptNamed');
    {$ENDIF}
    
    try
        BmpCopyFromPtr(layers, layers_len, layers_temp);
      result := sgSprites.CreateSprite(name, layers_temp, ani);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateLayeredSpriteWithAnimationScriptNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateLayeredSpriteWithAnimationScriptNamed');
    {$ENDIF}
  end;
  

  function sg_Sprites_CreateLayeredSpriteWithLayerNames(layers: BitmapPtr; layerNames: StringPtr; layers_len: Longint; layerNames_len: Longint): Sprite; cdecl; export;
    var
      layers_temp: BitmapArray;
      layerNames_temp: StringArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateLayeredSpriteWithLayerNames');
    {$ENDIF}
    
    try
        BmpCopyFromPtr(layers, layers_len, layers_temp);
        StringCopyFromPtr(layerNames, layerNames_len, layerNames_temp);
      result := sgSprites.CreateSprite(layers_temp, layerNames_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateLayeredSpriteWithLayerNames');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateLayeredSpriteWithLayerNames');
    {$ENDIF}
  end;
  

  function sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScript(layers: BitmapPtr; layerNames: StringPtr; ani: AnimationScript; layers_len: Longint; layerNames_len: Longint): Sprite; cdecl; export;
    var
      layers_temp: BitmapArray;
      layerNames_temp: StringArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScript');
    {$ENDIF}
    
    try
        BmpCopyFromPtr(layers, layers_len, layers_temp);
        StringCopyFromPtr(layerNames, layerNames_len, layerNames_temp);
      result := sgSprites.CreateSprite(layers_temp, layerNames_temp, ani);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScript');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScript');
    {$ENDIF}
  end;
  

  function sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScriptNamed(name: PChar; layers: BitmapPtr; layerNames: StringPtr; ani: AnimationScript; layers_len: Longint; layerNames_len: Longint): Sprite; cdecl; export;
    var
      layers_temp: BitmapArray;
      layerNames_temp: StringArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScriptNamed');
    {$ENDIF}
    
    try
        BmpCopyFromPtr(layers, layers_len, layers_temp);
        StringCopyFromPtr(layerNames, layerNames_len, layerNames_temp);
      result := sgSprites.CreateSprite(name, layers_temp, layerNames_temp, ani);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScriptNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScriptNamed');
    {$ENDIF}
  end;
  

  function sg_Sprites_CreateLayeredSpriteWithLayerNamesNamed(name: PChar; layers: BitmapPtr; layerNames: StringPtr; layers_len: Longint; layerNames_len: Longint): Sprite; cdecl; export;
    var
      layers_temp: BitmapArray;
      layerNames_temp: StringArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateLayeredSpriteWithLayerNamesNamed');
    {$ENDIF}
    
    try
        BmpCopyFromPtr(layers, layers_len, layers_temp);
        StringCopyFromPtr(layerNames, layerNames_len, layerNames_temp);
      result := sgSprites.CreateSprite(name, layers_temp, layerNames_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateLayeredSpriteWithLayerNamesNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateLayeredSpriteWithLayerNamesNamed');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_CreateSpritePack(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateSpritePack');
    {$ENDIF}
  
    try 
       sgSprites.CreateSpritePack(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateSpritePack');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateSpritePack');
    {$ENDIF}
  end;
  

  function sg_Sprites_CreateSpriteWithAnimation(layer: Bitmap; ani: AnimationScript): Sprite; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateSpriteWithAnimation');
    {$ENDIF}
    
    try
      result := sgSprites.CreateSprite(layer, ani);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateSpriteWithAnimation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateSpriteWithAnimation');
    {$ENDIF}
  end;
  

  function sg_Sprites_CreateSpriteWithAnimationNamed(name: PChar; layer: Bitmap; ani: AnimationScript): Sprite; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateSpriteWithAnimationNamed');
    {$ENDIF}
    
    try
      result := sgSprites.CreateSprite(name, layer, ani);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateSpriteWithAnimationNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateSpriteWithAnimationNamed');
    {$ENDIF}
  end;
  

  function sg_Sprites_CreateSpriteWithAnimationPt(layer: Bitmap; ani: AnimationScript; pt: Point2D): Sprite; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateSpriteWithAnimationPt');
    {$ENDIF}
    
    try
      result := sgSprites.CreateSprite(layer, ani, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateSpriteWithAnimationPt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateSpriteWithAnimationPt');
    {$ENDIF}
  end;
  

  function sg_Sprites_CreateSpriteWithAnimationXY(layer: Bitmap; ani: AnimationScript; x: Single; y: Single): Sprite; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateSpriteWithAnimationXY');
    {$ENDIF}
    
    try
      result := sgSprites.CreateSprite(layer, ani, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateSpriteWithAnimationXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateSpriteWithAnimationXY');
    {$ENDIF}
  end;
  

  function sg_Sprites_CreateSpriteWithBitmapAndAnimationName(bitmapName: PChar; animationName: PChar): Sprite; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateSpriteWithBitmapAndAnimationName');
    {$ENDIF}
    
    try
      result := sgSprites.CreateSprite(bitmapName, animationName);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateSpriteWithBitmapAndAnimationName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateSpriteWithBitmapAndAnimationName');
    {$ENDIF}
  end;
  

  function sg_Sprites_CreateSpriteWithLayer(layer: Bitmap; layerName: PChar): Sprite; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateSpriteWithLayer');
    {$ENDIF}
    
    try
      result := sgSprites.CreateSprite(layer, layerName);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateSpriteWithLayer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateSpriteWithLayer');
    {$ENDIF}
  end;
  

  function sg_Sprites_CreateSpriteWithLayerAndAnimation(layer: Bitmap; layerName: PChar; ani: AnimationScript): Sprite; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateSpriteWithLayerAndAnimation');
    {$ENDIF}
    
    try
      result := sgSprites.CreateSprite(layer, layerName, ani);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateSpriteWithLayerAndAnimation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateSpriteWithLayerAndAnimation');
    {$ENDIF}
  end;
  

  function sg_Sprites_CreateSpriteWithLayerAndAnimationNamed(name: PChar; layer: Bitmap; layerName: PChar; ani: AnimationScript): Sprite; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateSpriteWithLayerAndAnimationNamed');
    {$ENDIF}
    
    try
      result := sgSprites.CreateSprite(name, layer, layerName, ani);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateSpriteWithLayerAndAnimationNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateSpriteWithLayerAndAnimationNamed');
    {$ENDIF}
  end;
  

  function sg_Sprites_CreateSpriteWithLayerNamed(name: PChar; layer: Bitmap; layerName: PChar): Sprite; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateSpriteWithLayerNamed');
    {$ENDIF}
    
    try
      result := sgSprites.CreateSprite(name, layer, layerName);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateSpriteWithLayerNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateSpriteWithLayerNamed');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_CurrentSpritePack(result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CurrentSpritePack');
    {$ENDIF}
    
    try
      result_temp := sgSprites.CurrentSpritePack();
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CurrentSpritePack');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CurrentSpritePack');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_DrawAllSprites(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_DrawAllSprites');
    {$ENDIF}
  
    try 
       sgSprites.DrawAllSprites();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_DrawAllSprites');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_DrawAllSprites');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_DrawSpriteOffsetPoint(s: Sprite; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_DrawSpriteOffsetPoint');
    {$ENDIF}
  
    try 
       sgSprites.DrawSprite(s, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_DrawSpriteOffsetPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_DrawSpriteOffsetPoint');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_DrawSpriteOffsetXY(s: Sprite; xOffset: Longint; yOffset: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_DrawSpriteOffsetXY');
    {$ENDIF}
  
    try 
       sgSprites.DrawSprite(s, xOffset, yOffset);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_DrawSpriteOffsetXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_DrawSpriteOffsetXY');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_FreeSprite(var s: Sprite); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_FreeSprite');
    {$ENDIF}
  
    try 
       sgSprites.FreeSprite(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_FreeSprite');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_FreeSprite');
    {$ENDIF}
  end;
  

  function sg_Sprites_HasSprite(name: PChar): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_HasSprite');
    {$ENDIF}
    
    try
      result := sgSprites.HasSprite(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_HasSprite');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_HasSprite');
    {$ENDIF}
  end;
  

  function sg_Sprites_HasSpritePack(name: PChar): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_HasSpritePack');
    {$ENDIF}
    
    try
      result := sgSprites.HasSpritePack(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_HasSpritePack');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_HasSpritePack');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_MoveSpritePct(s: Sprite; pct: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_MoveSpritePct');
    {$ENDIF}
  
    try 
       sgSprites.MoveSprite(s, pct);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_MoveSpritePct');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_MoveSpritePct');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_MoveSpriteTo(s: Sprite; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_MoveSpriteTo');
    {$ENDIF}
  
    try 
       sgSprites.MoveSpriteTo(s, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_MoveSpriteTo');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_MoveSpriteTo');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_MoveSpriteVecPct(s: Sprite; var distance: Vector; pct: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_MoveSpriteVecPct');
    {$ENDIF}
  
    try 
       sgSprites.MoveSprite(s, distance, pct);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_MoveSpriteVecPct');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_MoveSpriteVecPct');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_ReleaseAllSprites(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_ReleaseAllSprites');
    {$ENDIF}
  
    try 
       sgSprites.ReleaseAllSprites();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_ReleaseAllSprites');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_ReleaseAllSprites');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_ReleaseSprite(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_ReleaseSprite');
    {$ENDIF}
  
    try 
       sgSprites.ReleaseSprite(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_ReleaseSprite');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_ReleaseSprite');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_ReplayAnimationWithSound(s: Sprite; withSound: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_ReplayAnimationWithSound');
    {$ENDIF}
  
    try 
       sgSprites.SpriteReplayAnimation(s, withSound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_ReplayAnimationWithSound');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_ReplayAnimationWithSound');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SelectSpritePack(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SelectSpritePack');
    {$ENDIF}
  
    try 
       sgSprites.SelectSpritePack(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SelectSpritePack');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SelectSpritePack');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteAddLayer(s: Sprite; newLayer: Bitmap; layerName: PChar): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteAddLayer');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteAddLayer(s, newLayer, layerName);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteAddLayer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteAddLayer');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteAddToVelocity(s: Sprite; var value: Vector); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteAddToVelocity');
    {$ENDIF}
  
    try 
       sgSprites.SpriteAddToVelocity(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteAddToVelocity');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteAddToVelocity');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteAddValue(s: Sprite; name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteAddValue');
    {$ENDIF}
  
    try 
       sgSprites.SpriteAddValue(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteAddValue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteAddValue');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteAddValueWithInitialValue(s: Sprite; name: PChar; initVal: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteAddValueWithInitialValue');
    {$ENDIF}
  
    try 
       sgSprites.SpriteAddValue(s, name, initVal);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteAddValueWithInitialValue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteAddValueWithInitialValue');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteAnimationHasEnded(s: Sprite): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteAnimationHasEnded');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteAnimationHasEnded(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteAnimationHasEnded');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteAnimationHasEnded');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteAnimationName(s: Sprite; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteAnimationName');
    {$ENDIF}
    
    try
      result_temp := sgSprites.SpriteAnimationName(s);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteAnimationName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteAnimationName');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteBringLayerForward(s: Sprite; visibleLayer: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteBringLayerForward');
    {$ENDIF}
  
    try 
       sgSprites.SpriteBringLayerForward(s, visibleLayer);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteBringLayerForward');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteBringLayerForward');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteBringLayerToFront(s: Sprite; visibleLayer: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteBringLayerToFront');
    {$ENDIF}
  
    try 
       sgSprites.SpriteBringLayerToFront(s, visibleLayer);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteBringLayerToFront');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteBringLayerToFront');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteCallOnEvent(s: Sprite; handler: SpriteEventHandler); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteCallOnEvent');
    {$ENDIF}
  
    try 
       sgSprites.SpriteCallOnEvent(s, handler);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteCallOnEvent');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteCallOnEvent');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteCircle(s: Sprite): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteCircle');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteCircle(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteCircle');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteCollisionBitmap(s: Sprite): Bitmap; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteCollisionBitmap');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteCollisionBitmap(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteCollisionBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteCollisionBitmap');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteCollisionCircle(s: Sprite): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteCollisionCircle');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteCollisionCircle(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteCollisionCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteCollisionCircle');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteCollisionKind(s: Sprite): CollisionTestKind; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteCollisionKind');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteCollisionKind(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteCollisionKind');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteCollisionKind');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteCollisionRectangle(s: Sprite): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteCollisionRectangle');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteCollisionRectangle(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteCollisionRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteCollisionRectangle');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteCurrentCell(s: Sprite): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteCurrentCell');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteCurrentCell(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteCurrentCell');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteCurrentCell');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteCurrentCellRectangle(s: Sprite): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteCurrentCellRectangle');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteCurrentCellRectangle(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteCurrentCellRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteCurrentCellRectangle');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteDX(s: Sprite): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteDX');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteDX(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteDX');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteDX');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteDY(s: Sprite): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteDY');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteDY(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteDY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteDY');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteHeading(s: Sprite): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteHeading');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteHeading(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteHeading');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteHeading');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteHeight(s: Sprite): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteHeight');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteHeight(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteHeight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteHeight');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteHideLayer(s: Sprite; id: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteHideLayer');
    {$ENDIF}
  
    try 
       sgSprites.SpriteHideLayer(s, id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteHideLayer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteHideLayer');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteHideLayerNamed(s: Sprite; name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteHideLayerNamed');
    {$ENDIF}
  
    try 
       sgSprites.SpriteHideLayer(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteHideLayerNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteHideLayerNamed');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteLayerAtIdx(s: Sprite; idx: Longint): Bitmap; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerAtIdx');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayer(s, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerAtIdx');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerAtIdx');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteLayerCircle(s: Sprite; idx: Longint): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerCircle');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerCircle(s, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerCircle');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteLayerCount(s: Sprite): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerCount');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerCount(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerCount');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerCount');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteLayerHeight(s: Sprite; idx: Longint): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerHeight');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerHeight(s, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerHeight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerHeight');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteLayerIndex(s: Sprite; name: PChar): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerIndex');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerIndex(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerIndex');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerIndex');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteLayerName(s: Sprite; idx: Longint; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerName');
    {$ENDIF}
    
    try
      result_temp := sgSprites.SpriteLayerName(s, idx);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerName');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteLayerNamed(s: Sprite; name: PChar): Bitmap; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerNamed');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayer(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerNamed');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteLayerNamedCircle(s: Sprite; name: PChar): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerNamedCircle');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerCircle(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerNamedCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerNamedCircle');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteLayerNamedHeight(s: Sprite; name: PChar): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerNamedHeight');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerHeight(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerNamedHeight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerNamedHeight');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteLayerNamedRectangle(s: Sprite; name: PChar): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerNamedRectangle');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerRectangle(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerNamedRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerNamedRectangle');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteLayerNamedWidth(s: Sprite; name: PChar): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerNamedWidth');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerWidth(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerNamedWidth');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerNamedWidth');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteLayerOffset(s: Sprite; idx: Longint): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerOffset');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerOffset(s, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerOffset');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerOffset');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteLayerOffsetNamed(s: Sprite; name: PChar): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerOffsetNamed');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerOffset(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerOffsetNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerOffsetNamed');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteLayerOffsets(s: Sprite; result: Point2DPtr; result_len: Longint); cdecl; export;
    var
      result_temp: Point2DArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerOffsets');
    {$ENDIF}
    
    try
      result_temp := sgSprites.SpriteLayerOffsets(s);
        Point2DCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerOffsets');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerOffsets');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteLayerRectangle(s: Sprite; idx: Longint): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerRectangle');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerRectangle(s, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerRectangle');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteLayerWidth(s: Sprite; idx: Longint): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerWidth');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerWidth(s, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerWidth');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerWidth');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteLayers(s: Sprite; result: BitmapPtr; result_len: Longint); cdecl; export;
    var
      result_temp: BitmapArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayers');
    {$ENDIF}
    
    try
      result_temp := sgSprites.SpriteLayers(s);
        BmpCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayers');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayers');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteMass(s: Sprite): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteMass');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteMass(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteMass');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteMass');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteMoveTo(s: Sprite; var pt: Point2D; takingSeconds: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteMoveTo');
    {$ENDIF}
  
    try 
       sgSprites.SpriteMoveTo(s, pt, takingSeconds);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteMoveTo');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteMoveTo');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteName(sprt: Sprite; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteName');
    {$ENDIF}
    
    try
      result_temp := sgSprites.SpriteName(sprt);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteName');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteNamed(name: PChar): Sprite; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteNamed');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteNamed(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteNamed');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteOffscreen(s: Sprite): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteOffscreen');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteOffscreen(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteOffscreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteOffscreen');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteOnScreenAt(s: Sprite; x: Longint; y: Longint): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteOnScreenAt');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteOnScreenAt(s, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteOnScreenAt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteOnScreenAt');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteOnScreenAtPoint(s: Sprite; var pt: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteOnScreenAtPoint');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteOnScreenAt(s, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteOnScreenAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteOnScreenAtPoint');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpritePosition(s: Sprite): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpritePosition');
    {$ENDIF}
    
    try
      result := sgSprites.SpritePosition(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpritePosition');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpritePosition');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteReplayAnimation(s: Sprite); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteReplayAnimation');
    {$ENDIF}
  
    try 
       sgSprites.SpriteReplayAnimation(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteReplayAnimation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteReplayAnimation');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteRotation(s: Sprite): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteRotation');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteRotation(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteRotation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteRotation');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteScale(s: Sprite): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteScale');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteScale(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteScale');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteScale');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteScreenRectangle(s: Sprite): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteScreenRectangle');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteScreenRectangle(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteScreenRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteScreenRectangle');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteSendLayerBackward(s: Sprite; visibleLayer: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSendLayerBackward');
    {$ENDIF}
  
    try 
       sgSprites.SpriteSendLayerBackward(s, visibleLayer);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSendLayerBackward');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSendLayerBackward');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteSendLayerToBack(s: Sprite; visibleLayer: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSendLayerToBack');
    {$ENDIF}
  
    try 
       sgSprites.SpriteSendLayerToBack(s, visibleLayer);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSendLayerToBack');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSendLayerToBack');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteSetCollisionBitmap(s: Sprite; bmp: Bitmap); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetCollisionBitmap');
    {$ENDIF}
  
    try 
       sgSprites.SpriteSetCollisionBitmap(s, bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetCollisionBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetCollisionBitmap');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteSetCollisionKind(s: Sprite; value: CollisionTestKind); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetCollisionKind');
    {$ENDIF}
  
    try 
       sgSprites.SpriteSetCollisionKind(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetCollisionKind');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetCollisionKind');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteSetDX(s: Sprite; value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetDX');
    {$ENDIF}
  
    try 
       sgSprites.SpriteSetDX(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetDX');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetDX');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteSetDY(s: Sprite; value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetDY');
    {$ENDIF}
  
    try 
       sgSprites.SpriteSetDY(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetDY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetDY');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteSetHeading(s: Sprite; value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetHeading');
    {$ENDIF}
  
    try 
       sgSprites.SpriteSetHeading(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetHeading');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetHeading');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteSetLayerOffset(s: Sprite; idx: Longint; var value: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetLayerOffset');
    {$ENDIF}
  
    try 
       sgSprites.SpriteSetLayerOffset(s, idx, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetLayerOffset');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetLayerOffset');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteSetLayerOffsetNamed(s: Sprite; name: PChar; var value: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetLayerOffsetNamed');
    {$ENDIF}
  
    try 
       sgSprites.SpriteSetLayerOffset(s, name, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetLayerOffsetNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetLayerOffsetNamed');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteSetLayerOffsets(s: Sprite; values: Point2DPtr; values_len: Longint); cdecl; export;
    var
      values_temp: Point2DArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetLayerOffsets');
    {$ENDIF}
  
    try 
        Point2DCopyFromPtr(values, values_len, values_temp);
       sgSprites.SpriteSetLayerOffsets(s, values_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetLayerOffsets');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetLayerOffsets');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteSetMass(s: Sprite; value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetMass');
    {$ENDIF}
  
    try 
       sgSprites.SpriteSetMass(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetMass');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetMass');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteSetPosition(s: Sprite; var value: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetPosition');
    {$ENDIF}
  
    try 
       sgSprites.SpriteSetPosition(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetPosition');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetPosition');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteSetRotation(s: Sprite; value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetRotation');
    {$ENDIF}
  
    try 
       sgSprites.SpriteSetRotation(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetRotation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetRotation');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteSetScale(s: Sprite; value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetScale');
    {$ENDIF}
  
    try 
       sgSprites.SpriteSetScale(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetScale');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetScale');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteSetSpeed(s: Sprite; value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetSpeed');
    {$ENDIF}
  
    try 
       sgSprites.SpriteSetSpeed(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetSpeed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetSpeed');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteSetValue(s: Sprite; idx: Longint; val: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetValue');
    {$ENDIF}
  
    try 
       sgSprites.SpriteSetValue(s, idx, val);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetValue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetValue');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteSetValueNamed(s: Sprite; name: PChar; val: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetValueNamed');
    {$ENDIF}
  
    try 
       sgSprites.SpriteSetValue(s, name, val);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetValueNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetValueNamed');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteSetVelocity(s: Sprite; var value: Vector); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetVelocity');
    {$ENDIF}
  
    try 
       sgSprites.SpriteSetVelocity(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetVelocity');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetVelocity');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteSetX(s: Sprite; value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetX');
    {$ENDIF}
  
    try 
       sgSprites.SpriteSetX(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetX');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetX');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteSetY(s: Sprite; value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetY');
    {$ENDIF}
  
    try 
       sgSprites.SpriteSetY(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetY');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteShowLayer(s: Sprite; id: Longint): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteShowLayer');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteShowLayer(s, id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteShowLayer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteShowLayer');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteShowLayerNamed(s: Sprite; name: PChar): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteShowLayerNamed');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteShowLayer(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteShowLayerNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteShowLayerNamed');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteSpeed(s: Sprite): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSpeed');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteSpeed(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSpeed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSpeed');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteStartAnimation(s: Sprite; idx: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteStartAnimation');
    {$ENDIF}
  
    try 
       sgSprites.SpriteStartAnimation(s, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteStartAnimation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteStartAnimation');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteStartAnimationNamed(s: Sprite; named: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteStartAnimationNamed');
    {$ENDIF}
  
    try 
       sgSprites.SpriteStartAnimation(s, named);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteStartAnimationNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteStartAnimationNamed');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteStartAnimationNamedWithSound(s: Sprite; named: PChar; withSound: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteStartAnimationNamedWithSound');
    {$ENDIF}
  
    try 
       sgSprites.SpriteStartAnimation(s, named, withSound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteStartAnimationNamedWithSound');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteStartAnimationNamedWithSound');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteStartAnimationWithSound(s: Sprite; idx: Longint; withSound: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteStartAnimationWithSound');
    {$ENDIF}
  
    try 
       sgSprites.SpriteStartAnimation(s, idx, withSound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteStartAnimationWithSound');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteStartAnimationWithSound');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteStopCallingOnEvent(s: Sprite; handler: SpriteEventHandler); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteStopCallingOnEvent');
    {$ENDIF}
  
    try 
       sgSprites.SpriteStopCallingOnEvent(s, handler);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteStopCallingOnEvent');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteStopCallingOnEvent');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteToggleLayerNamedVisible(s: Sprite; name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteToggleLayerNamedVisible');
    {$ENDIF}
  
    try 
       sgSprites.SpriteToggleLayerVisible(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteToggleLayerNamedVisible');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteToggleLayerNamedVisible');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteToggleLayerVisible(s: Sprite; id: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteToggleLayerVisible');
    {$ENDIF}
  
    try 
       sgSprites.SpriteToggleLayerVisible(s, id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteToggleLayerVisible');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteToggleLayerVisible');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteValue(s: Sprite; index: Longint): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteValue');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteValue(s, index);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteValue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteValue');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteValueCount(s: Sprite): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteValueCount');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteValueCount(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteValueCount');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteValueCount');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteValueNamed(s: Sprite; name: PChar): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteValueNamed');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteValue(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteValueNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteValueNamed');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteValueNames(s: Sprite; result: StringPtr; result_len: Longint); cdecl; export;
    var
      result_temp: StringArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteValueNames');
    {$ENDIF}
    
    try
      result_temp := sgSprites.SpriteValueNames(s);
        StringCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteValueNames');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteValueNames');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteVelocity(s: Sprite): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteVelocity');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteVelocity(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteVelocity');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteVelocity');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteVisibleIndexOfLayer(s: Sprite; id: Longint): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteVisibleIndexOfLayer');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteVisibleIndexOfLayer(s, id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteVisibleIndexOfLayer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteVisibleIndexOfLayer');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteVisibleIndexOfLayerNamed(s: Sprite; name: PChar): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteVisibleIndexOfLayerNamed');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteVisibleIndexOfLayer(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteVisibleIndexOfLayerNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteVisibleIndexOfLayerNamed');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteVisibleLayer(s: Sprite; idx: Longint): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteVisibleLayer');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteVisibleLayer(s, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteVisibleLayer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteVisibleLayer');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteVisibleLayerCount(s: Sprite): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteVisibleLayerCount');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteVisibleLayerCount(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteVisibleLayerCount');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteVisibleLayerCount');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_SpriteVisibleLayerIds(s: Sprite; result: LongintPtr; result_len: Longint); cdecl; export;
    var
      result_temp: LongintArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteVisibleLayerIds');
    {$ENDIF}
    
    try
      result_temp := sgSprites.SpriteVisibleLayerIds(s);
        LongintCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteVisibleLayerIds');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteVisibleLayerIds');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteWidth(s: Sprite): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteWidth');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteWidth(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteWidth');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteWidth');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteX(s: Sprite): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteX');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteX(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteX');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteX');
    {$ENDIF}
  end;
  

  function sg_Sprites_SpriteY(s: Sprite): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteY');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteY(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteY');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_StopCallingOnSpriteEvent(handler: SpriteEventHandler); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_StopCallingOnSpriteEvent');
    {$ENDIF}
  
    try 
       sgSprites.StopCallingOnSpriteEvent(handler);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_StopCallingOnSpriteEvent');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_StopCallingOnSpriteEvent');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_UpdateAllSprites(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_UpdateAllSprites');
    {$ENDIF}
  
    try 
       sgSprites.UpdateAllSprites();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_UpdateAllSprites');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_UpdateAllSprites');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_UpdateAllSpritesPct(pct: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_UpdateAllSpritesPct');
    {$ENDIF}
  
    try 
       sgSprites.UpdateAllSprites(pct);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_UpdateAllSpritesPct');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_UpdateAllSpritesPct');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_UpdateSpriteAnimationPctWithSound(s: Sprite; pct: Single; withSound: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_UpdateSpriteAnimationPctWithSound');
    {$ENDIF}
  
    try 
       sgSprites.UpdateSpriteAnimation(s, pct, withSound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_UpdateSpriteAnimationPctWithSound');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_UpdateSpriteAnimationPctWithSound');
    {$ENDIF}
  end;
  

  procedure sg_Sprites_UpdateSpritePctWithSound(s: Sprite; pct: Single; withSound: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_UpdateSpritePctWithSound');
    {$ENDIF}
  
    try 
       sgSprites.UpdateSprite(s, pct, withSound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_UpdateSpritePctWithSound');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_UpdateSpritePctWithSound');
    {$ENDIF}
  end;
  

  function sg_Sprites_VectorFromCenterSpriteToPoint(s: Sprite; var pt: Point2D): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_VectorFromCenterSpriteToPoint');
    {$ENDIF}
    
    try
      result := sgSprites.VectorFromCenterSpriteToPoint(s, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_VectorFromCenterSpriteToPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_VectorFromCenterSpriteToPoint');
    {$ENDIF}
  end;
  

  function sg_Sprites_VectorFromTo(s1: Sprite; s2: Sprite): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_VectorFromTo');
    {$ENDIF}
    
    try
      result := sgSprites.VectorFromTo(s1, s2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_VectorFromTo');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_VectorFromTo');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawFramerate(x: Longint; y: Longint; font: Font); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawFramerate');
    {$ENDIF}
  
    try 
       sgText.DrawFramerate(x, y, font);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawFramerate');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawFramerate');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawFramerateFontNamed(x: Longint; y: Longint; name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawFramerateFontNamed');
    {$ENDIF}
  
    try 
       sgText.DrawFramerate(x, y, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawFramerateFontNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawFramerateFontNamed');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawFramerateFontNamedSize(x: Longint; y: Longint; name: PChar; size: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawFramerateFontNamedSize');
    {$ENDIF}
  
    try 
       sgText.DrawFramerate(x, y, name, size);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawFramerateFontNamedSize');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawFramerateFontNamedSize');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawFramerateWithSimpleFont(x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawFramerateWithSimpleFont');
    {$ENDIF}
  
    try 
       sgText.DrawFramerate(x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawFramerateWithSimpleFont');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawFramerateWithSimpleFont');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawSimpleText(theText: PChar; textColor: LongWord; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawSimpleText');
    {$ENDIF}
  
    try 
       sgText.DrawText(theText, textColor, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawSimpleText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawSimpleText');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawSimpleTextOnBitmap(dest: Bitmap; theText: PChar; textColor: LongWord; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawSimpleTextOnBitmap');
    {$ENDIF}
  
    try 
       sgText.DrawText(dest, theText, textColor, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawSimpleTextOnBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawSimpleTextOnBitmap');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawSimpleTextOnScreen(theText: PChar; textColor: LongWord; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawSimpleTextOnScreen');
    {$ENDIF}
  
    try 
       sgText.DrawTextOnScreen(theText, textColor, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawSimpleTextOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawSimpleTextOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawSimpleTextPt(theText: PChar; textColor: LongWord; var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawSimpleTextPt');
    {$ENDIF}
  
    try 
       sgText.DrawText(theText, textColor, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawSimpleTextPt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawSimpleTextPt');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawText(theText: PChar; textColor: LongWord; theFont: Font; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawText');
    {$ENDIF}
  
    try 
       sgText.DrawText(theText, textColor, theFont, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawText');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextAtPoint(theText: PChar; textColor: LongWord; theFont: Font; var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextAtPoint');
    {$ENDIF}
  
    try 
       sgText.DrawText(theText, textColor, theFont, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextAtPoint');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextAtPointWithFontNamed(theText: PChar; textColor: LongWord; name: PChar; var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextAtPointWithFontNamed');
    {$ENDIF}
  
    try 
       sgText.DrawText(theText, textColor, name, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextAtPointWithFontNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextAtPointWithFontNamed');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextAtPointWithFontNamedAndSize(theText: PChar; textColor: LongWord; name: PChar; size: Longint; var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextAtPointWithFontNamedAndSize');
    {$ENDIF}
  
    try 
       sgText.DrawText(theText, textColor, name, size, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextAtPointWithFontNamedAndSize');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextAtPointWithFontNamedAndSize');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextLines(theText: PChar; textColor: LongWord; backColor: LongWord; theFont: Font; align: FontAlignment; x: Single; y: Single; w: Longint; h: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLines');
    {$ENDIF}
  
    try 
       sgText.DrawTextLines(theText, textColor, backColor, theFont, align, x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLines');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLines');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextLinesInRect(theText: PChar; textColor: LongWord; backColor: LongWord; theFont: Font; align: FontAlignment; var withinRect: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLinesInRect');
    {$ENDIF}
  
    try 
       sgText.DrawTextLines(theText, textColor, backColor, theFont, align, withinRect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLinesInRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLinesInRect');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextLinesInRectOnBitmap(dest: Bitmap; theText: PChar; textColor: LongWord; backColor: LongWord; theFont: Font; align: FontAlignment; var withinRect: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLinesInRectOnBitmap');
    {$ENDIF}
  
    try 
       sgText.DrawTextLines(dest, theText, textColor, backColor, theFont, align, withinRect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLinesInRectOnBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLinesInRectOnBitmap');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextLinesInRectOnBitmapWithFontNamed(dest: Bitmap; theText: PChar; textColor: LongWord; backColor: LongWord; name: PChar; align: FontAlignment; var withinRect: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLinesInRectOnBitmapWithFontNamed');
    {$ENDIF}
  
    try 
       sgText.DrawTextLines(dest, theText, textColor, backColor, name, align, withinRect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLinesInRectOnBitmapWithFontNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLinesInRectOnBitmapWithFontNamed');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextLinesInRectOnBitmapWithFontNamedAndSize(dest: Bitmap; theText: PChar; textColor: LongWord; backColor: LongWord; name: PChar; size: Longint; align: FontAlignment; var withinRect: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLinesInRectOnBitmapWithFontNamedAndSize');
    {$ENDIF}
  
    try 
       sgText.DrawTextLines(dest, theText, textColor, backColor, name, size, align, withinRect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLinesInRectOnBitmapWithFontNamedAndSize');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLinesInRectOnBitmapWithFontNamedAndSize');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextLinesInRectOnScreen(theText: PChar; textColor: LongWord; backColor: LongWord; theFont: Font; align: FontAlignment; var withinRect: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLinesInRectOnScreen');
    {$ENDIF}
  
    try 
       sgText.DrawTextLinesOnScreen(theText, textColor, backColor, theFont, align, withinRect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLinesInRectOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLinesInRectOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextLinesInRectOnScreenWithFontNamed(theText: PChar; textColor: LongWord; backColor: LongWord; name: PChar; align: FontAlignment; var withinRect: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLinesInRectOnScreenWithFontNamed');
    {$ENDIF}
  
    try 
       sgText.DrawTextLinesOnScreen(theText, textColor, backColor, name, align, withinRect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLinesInRectOnScreenWithFontNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLinesInRectOnScreenWithFontNamed');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextLinesInRectOnScreenWithFontNamedAndSize(theText: PChar; textColor: LongWord; backColor: LongWord; name: PChar; size: Longint; align: FontAlignment; var withinRect: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLinesInRectOnScreenWithFontNamedAndSize');
    {$ENDIF}
  
    try 
       sgText.DrawTextLinesOnScreen(theText, textColor, backColor, name, size, align, withinRect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLinesInRectOnScreenWithFontNamedAndSize');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLinesInRectOnScreenWithFontNamedAndSize');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextLinesInRectWithFontNamed(theText: PChar; textColor: LongWord; backColor: LongWord; name: PChar; align: FontAlignment; var withinRect: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLinesInRectWithFontNamed');
    {$ENDIF}
  
    try 
       sgText.DrawTextLines(theText, textColor, backColor, name, align, withinRect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLinesInRectWithFontNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLinesInRectWithFontNamed');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextLinesInRectWithFontNamedAndSize(theText: PChar; textColor: LongWord; backColor: LongWord; name: PChar; size: Longint; align: FontAlignment; var withinRect: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLinesInRectWithFontNamedAndSize');
    {$ENDIF}
  
    try 
       sgText.DrawTextLines(theText, textColor, backColor, name, size, align, withinRect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLinesInRectWithFontNamedAndSize');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLinesInRectWithFontNamedAndSize');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextLinesOnBitmap(dest: Bitmap; theText: PChar; textColor: LongWord; backColor: LongWord; theFont: Font; align: FontAlignment; x: Longint; y: Longint; w: Longint; h: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLinesOnBitmap');
    {$ENDIF}
  
    try 
       sgText.DrawTextLines(dest, theText, textColor, backColor, theFont, align, x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLinesOnBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLinesOnBitmap');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextLinesOnBitmapWithFontNamed(dest: Bitmap; theText: PChar; textColor: LongWord; backColor: LongWord; name: PChar; align: FontAlignment; x: Longint; y: Longint; w: Longint; h: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLinesOnBitmapWithFontNamed');
    {$ENDIF}
  
    try 
       sgText.DrawTextLines(dest, theText, textColor, backColor, name, align, x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLinesOnBitmapWithFontNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLinesOnBitmapWithFontNamed');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextLinesOnBitmapWithFontNamedAndSize(dest: Bitmap; theText: PChar; textColor: LongWord; backColor: LongWord; name: PChar; size: Longint; align: FontAlignment; x: Longint; y: Longint; w: Longint; h: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLinesOnBitmapWithFontNamedAndSize');
    {$ENDIF}
  
    try 
       sgText.DrawTextLines(dest, theText, textColor, backColor, name, size, align, x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLinesOnBitmapWithFontNamedAndSize');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLinesOnBitmapWithFontNamedAndSize');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextLinesOnScreen(theText: PChar; textColor: LongWord; backColor: LongWord; theFont: Font; align: FontAlignment; x: Longint; y: Longint; w: Longint; h: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLinesOnScreen');
    {$ENDIF}
  
    try 
       sgText.DrawTextLinesOnScreen(theText, textColor, backColor, theFont, align, x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLinesOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLinesOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextLinesOnScreenWithFontNamed(theText: PChar; textColor: LongWord; backColor: LongWord; name: PChar; align: FontAlignment; x: Longint; y: Longint; w: Longint; h: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLinesOnScreenWithFontNamed');
    {$ENDIF}
  
    try 
       sgText.DrawTextLinesOnScreen(theText, textColor, backColor, name, align, x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLinesOnScreenWithFontNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLinesOnScreenWithFontNamed');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextLinesOnScreenWithFontNamedWithSize(theText: PChar; textColor: LongWord; backColor: LongWord; name: PChar; size: Longint; align: FontAlignment; x: Longint; y: Longint; w: Longint; h: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLinesOnScreenWithFontNamedWithSize');
    {$ENDIF}
  
    try 
       sgText.DrawTextLinesOnScreen(theText, textColor, backColor, name, size, align, x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLinesOnScreenWithFontNamedWithSize');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLinesOnScreenWithFontNamedWithSize');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextLinesWithFontNamed(theText: PChar; textColor: LongWord; backColor: LongWord; name: PChar; align: FontAlignment; x: Single; y: Single; w: Longint; h: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLinesWithFontNamed');
    {$ENDIF}
  
    try 
       sgText.DrawTextLines(theText, textColor, backColor, name, align, x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLinesWithFontNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLinesWithFontNamed');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextLinesWithFontNamedAndSize(theText: PChar; textColor: LongWord; backColor: LongWord; name: PChar; size: Longint; align: FontAlignment; x: Single; y: Single; w: Longint; h: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLinesWithFontNamedAndSize');
    {$ENDIF}
  
    try 
       sgText.DrawTextLines(theText, textColor, backColor, name, size, align, x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLinesWithFontNamedAndSize');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLinesWithFontNamedAndSize');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextOnBitmap(dest: Bitmap; theText: PChar; textColor: LongWord; theFont: Font; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextOnBitmap');
    {$ENDIF}
  
    try 
       sgText.DrawText(dest, theText, textColor, theFont, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextOnBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextOnBitmap');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextOnBitmapAtPoint(dest: Bitmap; theText: PChar; textColor: LongWord; theFont: Font; var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextOnBitmapAtPoint');
    {$ENDIF}
  
    try 
       sgText.DrawText(dest, theText, textColor, theFont, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextOnBitmapAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextOnBitmapAtPoint');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextOnBitmapAtPointWithFontNamed(dest: Bitmap; theText: PChar; textColor: LongWord; name: PChar; var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextOnBitmapAtPointWithFontNamed');
    {$ENDIF}
  
    try 
       sgText.DrawText(dest, theText, textColor, name, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextOnBitmapAtPointWithFontNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextOnBitmapAtPointWithFontNamed');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextOnBitmapAtPointWithFontNamedAndSize(dest: Bitmap; theText: PChar; textColor: LongWord; name: PChar; size: Longint; var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextOnBitmapAtPointWithFontNamedAndSize');
    {$ENDIF}
  
    try 
       sgText.DrawText(dest, theText, textColor, name, size, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextOnBitmapAtPointWithFontNamedAndSize');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextOnBitmapAtPointWithFontNamedAndSize');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextOnBitmapWithFontNamed(dest: Bitmap; theText: PChar; textColor: LongWord; name: PChar; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextOnBitmapWithFontNamed');
    {$ENDIF}
  
    try 
       sgText.DrawText(dest, theText, textColor, name, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextOnBitmapWithFontNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextOnBitmapWithFontNamed');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextOnBitmapWithFontNamedAndSize(dest: Bitmap; theText: PChar; textColor: LongWord; name: PChar; size: Longint; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextOnBitmapWithFontNamedAndSize');
    {$ENDIF}
  
    try 
       sgText.DrawText(dest, theText, textColor, name, size, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextOnBitmapWithFontNamedAndSize');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextOnBitmapWithFontNamedAndSize');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextOnScreen(theText: PChar; textColor: LongWord; theFont: Font; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextOnScreen');
    {$ENDIF}
  
    try 
       sgText.DrawTextOnScreen(theText, textColor, theFont, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextOnScreen');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextOnScreenAtPoint(theText: PChar; textColor: LongWord; theFont: Font; var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextOnScreenAtPoint');
    {$ENDIF}
  
    try 
       sgText.DrawTextOnScreen(theText, textColor, theFont, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextOnScreenAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextOnScreenAtPoint');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextOnScreenAtPointWithFontNamed(theText: PChar; textColor: LongWord; name: PChar; var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextOnScreenAtPointWithFontNamed');
    {$ENDIF}
  
    try 
       sgText.DrawTextOnScreen(theText, textColor, name, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextOnScreenAtPointWithFontNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextOnScreenAtPointWithFontNamed');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextOnScreenAtPointWithFontNamedAndSize(theText: PChar; textColor: LongWord; name: PChar; size: Longint; var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextOnScreenAtPointWithFontNamedAndSize');
    {$ENDIF}
  
    try 
       sgText.DrawTextOnScreen(theText, textColor, name, size, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextOnScreenAtPointWithFontNamedAndSize');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextOnScreenAtPointWithFontNamedAndSize');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextOnScreenWithFontNamed(theText: PChar; textColor: LongWord; name: PChar; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextOnScreenWithFontNamed');
    {$ENDIF}
  
    try 
       sgText.DrawTextOnScreen(theText, textColor, name, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextOnScreenWithFontNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextOnScreenWithFontNamed');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextOnScreenWithFontNamedAndSize(theText: PChar; textColor: LongWord; name: PChar; size: Longint; x: Longint; y: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextOnScreenWithFontNamedAndSize');
    {$ENDIF}
  
    try 
       sgText.DrawTextOnScreen(theText, textColor, name, size, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextOnScreenWithFontNamedAndSize');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextOnScreenWithFontNamedAndSize');
    {$ENDIF}
  end;
  

  function sg_Text_DrawTextToBitmapAtPointWithFontNamedAndSize(font: Font; str: PChar; clrFg: LongWord; backgroundColor: LongWord): Bitmap; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextToBitmapAtPointWithFontNamedAndSize');
    {$ENDIF}
    
    try
      result := sgText.DrawTextTo(font, str, clrFg, backgroundColor);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextToBitmapAtPointWithFontNamedAndSize');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextToBitmapAtPointWithFontNamedAndSize');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextWithFontNamed(theText: PChar; textColor: LongWord; name: PChar; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextWithFontNamed');
    {$ENDIF}
  
    try 
       sgText.DrawText(theText, textColor, name, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextWithFontNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextWithFontNamed');
    {$ENDIF}
  end;
  

  procedure sg_Text_DrawTextWithFontNamedSize(theText: PChar; textColor: LongWord; name: PChar; size: Longint; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextWithFontNamedSize');
    {$ENDIF}
  
    try 
       sgText.DrawText(theText, textColor, name, size, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextWithFontNamedSize');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextWithFontNamedSize');
    {$ENDIF}
  end;
  

  function sg_Text_FontFontStyle(font: Font): FontStyle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_FontFontStyle');
    {$ENDIF}
    
    try
      result := sgText.FontFontStyle(font);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_FontFontStyle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_FontFontStyle');
    {$ENDIF}
  end;
  

  procedure sg_Text_FontNameFor(fontName: PChar; size: Longint; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_FontNameFor');
    {$ENDIF}
    
    try
      result_temp := sgText.FontNameFor(fontName, size);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_FontNameFor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_FontNameFor');
    {$ENDIF}
  end;
  

  function sg_Text_FontNamed(name: PChar): Font; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_FontNamed');
    {$ENDIF}
    
    try
      result := sgText.FontNamed(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_FontNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_FontNamed');
    {$ENDIF}
  end;
  

  function sg_Text_FontNamedWithSize(name: PChar; size: Longint): Font; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_FontNamedWithSize');
    {$ENDIF}
    
    try
      result := sgText.FontNamed(name, size);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_FontNamedWithSize');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_FontNamedWithSize');
    {$ENDIF}
  end;
  

  procedure sg_Text_FontSetStyle(font: Font; value: FontStyle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_FontSetStyle');
    {$ENDIF}
  
    try 
       sgText.FontSetStyle(font, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_FontSetStyle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_FontSetStyle');
    {$ENDIF}
  end;
  

  procedure sg_Text_FreeFont(var fontToFree: Font); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_FreeFont');
    {$ENDIF}
  
    try 
       sgText.FreeFont(fontToFree);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_FreeFont');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_FreeFont');
    {$ENDIF}
  end;
  

  function sg_Text_HasFont(name: PChar): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_HasFont');
    {$ENDIF}
    
    try
      result := sgText.HasFont(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_HasFont');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_HasFont');
    {$ENDIF}
  end;
  

  function sg_Text_LoadFont(fontName: PChar; size: Longint): Font; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_LoadFont');
    {$ENDIF}
    
    try
      result := sgText.LoadFont(fontName, size);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_LoadFont');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_LoadFont');
    {$ENDIF}
  end;
  

  function sg_Text_LoadFontNamed(name: PChar; filename: PChar; size: Longint): Font; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_LoadFontNamed');
    {$ENDIF}
    
    try
      result := sgText.LoadFontNamed(name, filename, size);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_LoadFontNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_LoadFontNamed');
    {$ENDIF}
  end;
  

  procedure sg_Text_ReleaseAllFonts(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_ReleaseAllFonts');
    {$ENDIF}
  
    try 
       sgText.ReleaseAllFonts();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_ReleaseAllFonts');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_ReleaseAllFonts');
    {$ENDIF}
  end;
  

  procedure sg_Text_ReleaseFont(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_ReleaseFont');
    {$ENDIF}
  
    try 
       sgText.ReleaseFont(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_ReleaseFont');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_ReleaseFont');
    {$ENDIF}
  end;
  

  function sg_Text_TextAlignmentFrom(str: PChar): FontAlignment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_TextAlignmentFrom');
    {$ENDIF}
    
    try
      result := sgText.TextAlignmentFrom(str);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_TextAlignmentFrom');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_TextAlignmentFrom');
    {$ENDIF}
  end;
  

  function sg_Text_TextHeight(theFont: Font; theText: PChar): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_TextHeight');
    {$ENDIF}
    
    try
      result := sgText.TextHeight(theFont, theText);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_TextHeight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_TextHeight');
    {$ENDIF}
  end;
  

  function sg_Text_TextWidth(theFont: Font; theText: PChar): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_TextWidth');
    {$ENDIF}
    
    try
      result := sgText.TextWidth(theFont, theText);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_TextWidth');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_TextWidth');
    {$ENDIF}
  end;
  

  function sg_Timers_CreateTimer(): Timer; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_CreateTimer');
    {$ENDIF}
    
    try
      result := sgTimers.CreateTimer();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_CreateTimer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_CreateTimer');
    {$ENDIF}
  end;
  

  function sg_Timers_CreateTimerNamed(name: PChar): Timer; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_CreateTimerNamed');
    {$ENDIF}
    
    try
      result := sgTimers.CreateTimer(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_CreateTimerNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_CreateTimerNamed');
    {$ENDIF}
  end;
  

  procedure sg_Timers_FreeTimer(var toFree: Timer); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_FreeTimer');
    {$ENDIF}
  
    try 
       sgTimers.FreeTimer(toFree);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_FreeTimer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_FreeTimer');
    {$ENDIF}
  end;
  

  procedure sg_Timers_PauseTimer(toPause: Timer); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_PauseTimer');
    {$ENDIF}
  
    try 
       sgTimers.PauseTimer(toPause);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_PauseTimer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_PauseTimer');
    {$ENDIF}
  end;
  

  procedure sg_Timers_PauseTimerNamed(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_PauseTimerNamed');
    {$ENDIF}
  
    try 
       sgTimers.PauseTimer(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_PauseTimerNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_PauseTimerNamed');
    {$ENDIF}
  end;
  

  procedure sg_Timers_ReleaseAllTimers(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_ReleaseAllTimers');
    {$ENDIF}
  
    try 
       sgTimers.ReleaseAllTimers();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_ReleaseAllTimers');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_ReleaseAllTimers');
    {$ENDIF}
  end;
  

  procedure sg_Timers_ReleaseTimer(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_ReleaseTimer');
    {$ENDIF}
  
    try 
       sgTimers.ReleaseTimer(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_ReleaseTimer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_ReleaseTimer');
    {$ENDIF}
  end;
  

  procedure sg_Timers_ResetTimer(tmr: Timer); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_ResetTimer');
    {$ENDIF}
  
    try 
       sgTimers.ResetTimer(tmr);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_ResetTimer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_ResetTimer');
    {$ENDIF}
  end;
  

  procedure sg_Timers_ResetTimerNamed(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_ResetTimerNamed');
    {$ENDIF}
  
    try 
       sgTimers.ResetTimer(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_ResetTimerNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_ResetTimerNamed');
    {$ENDIF}
  end;
  

  procedure sg_Timers_ResumeTimer(toUnpause: Timer); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_ResumeTimer');
    {$ENDIF}
  
    try 
       sgTimers.ResumeTimer(toUnpause);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_ResumeTimer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_ResumeTimer');
    {$ENDIF}
  end;
  

  procedure sg_Timers_ResumeTimerNamed(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_ResumeTimerNamed');
    {$ENDIF}
  
    try 
       sgTimers.ResumeTimer(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_ResumeTimerNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_ResumeTimerNamed');
    {$ENDIF}
  end;
  

  procedure sg_Timers_StartTimer(toStart: Timer); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_StartTimer');
    {$ENDIF}
  
    try 
       sgTimers.StartTimer(toStart);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_StartTimer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_StartTimer');
    {$ENDIF}
  end;
  

  procedure sg_Timers_StartTimerNamed(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_StartTimerNamed');
    {$ENDIF}
  
    try 
       sgTimers.StartTimer(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_StartTimerNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_StartTimerNamed');
    {$ENDIF}
  end;
  

  procedure sg_Timers_StopTimer(toStop: Timer); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_StopTimer');
    {$ENDIF}
  
    try 
       sgTimers.StopTimer(toStop);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_StopTimer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_StopTimer');
    {$ENDIF}
  end;
  

  procedure sg_Timers_StopTimerNamed(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_StopTimerNamed');
    {$ENDIF}
  
    try 
       sgTimers.StopTimer(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_StopTimerNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_StopTimerNamed');
    {$ENDIF}
  end;
  

  function sg_Timers_TimerNamed(name: PChar): Timer; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_TimerNamed');
    {$ENDIF}
    
    try
      result := sgTimers.TimerNamed(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_TimerNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_TimerNamed');
    {$ENDIF}
  end;
  

  function sg_Timers_TimerTicks(toGet: Timer): Longword; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_TimerTicks');
    {$ENDIF}
    
    try
      result := sgTimers.TimerTicks(toGet);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_TimerTicks');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_TimerTicks');
    {$ENDIF}
  end;
  

  function sg_Timers_TimerTicksNamed(name: PChar): Longword; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_TimerTicksNamed');
    {$ENDIF}
    
    try
      result := sgTimers.TimerTicks(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_TimerTicksNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_TimerTicksNamed');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ActivatePanel(p: Panel); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ActivatePanel');
    {$ENDIF}
  
    try 
       sgUserInterface.ActivatePanel(p);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ActivatePanel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ActivatePanel');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ActiveRadioButton(grp: GUIRadioGroup): Region; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ActiveRadioButton');
    {$ENDIF}
    
    try
      result := sgUserInterface.ActiveRadioButton(grp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ActiveRadioButton');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ActiveRadioButton');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ActiveRadioButtonIndex(RadioGroup: GUIRadioGroup): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ActiveRadioButtonIndex');
    {$ENDIF}
    
    try
      result := sgUserInterface.ActiveRadioButtonIndex(RadioGroup);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ActiveRadioButtonIndex');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ActiveRadioButtonIndex');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ActiveRadioButtonIndexFromID(id: PChar): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ActiveRadioButtonIndexFromID');
    {$ENDIF}
    
    try
      result := sgUserInterface.ActiveRadioButtonIndex(id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ActiveRadioButtonIndexFromID');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ActiveRadioButtonIndexFromID');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ActiveRadioButtonIndexOnPanel(pnl: Panel; id: PChar): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ActiveRadioButtonIndexOnPanel');
    {$ENDIF}
    
    try
      result := sgUserInterface.ActiveRadioButtonIndex(pnl, id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ActiveRadioButtonIndexOnPanel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ActiveRadioButtonIndexOnPanel');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ActiveRadioButtonOnPanelWithId(pnl: Panel; id: PChar): Region; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ActiveRadioButtonOnPanelWithId');
    {$ENDIF}
    
    try
      result := sgUserInterface.ActiveRadioButton(pnl, id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ActiveRadioButtonOnPanelWithId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ActiveRadioButtonOnPanelWithId');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ActiveRadioButtonWithID(id: PChar): Region; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ActiveRadioButtonWithID');
    {$ENDIF}
    
    try
      result := sgUserInterface.ActiveRadioButton(id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ActiveRadioButtonWithID');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ActiveRadioButtonWithID');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ActiveTextBoxParent(): Panel; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ActiveTextBoxParent');
    {$ENDIF}
    
    try
      result := sgUserInterface.ActiveTextBoxParent();
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ActiveTextBoxParent');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ActiveTextBoxParent');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ActiveTextIndex(): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ActiveTextIndex');
    {$ENDIF}
    
    try
      result := sgUserInterface.ActiveTextIndex();
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ActiveTextIndex');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ActiveTextIndex');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_AddItemByBitmap(lst: GUIList; img: Bitmap); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_AddItemByBitmap');
    {$ENDIF}
  
    try 
       sgUserInterface.ListAddItem(lst, img);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_AddItemByBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_AddItemByBitmap');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_AddItemByText(lst: GUIList; text: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_AddItemByText');
    {$ENDIF}
  
    try 
       sgUserInterface.ListAddItem(lst, text);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_AddItemByText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_AddItemByText');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_AddItemOnPanelWithIdByText(pnl: Panel; id: PChar; text: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_AddItemOnPanelWithIdByText');
    {$ENDIF}
  
    try 
       sgUserInterface.ListAddItem(pnl, id, text);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_AddItemOnPanelWithIdByText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_AddItemOnPanelWithIdByText');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_AddItemWithIdByBitmap(id: PChar; img: Bitmap); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_AddItemWithIdByBitmap');
    {$ENDIF}
  
    try 
       sgUserInterface.ListAddItem(id, img);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_AddItemWithIdByBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_AddItemWithIdByBitmap');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_AddItemWithIdByText(id: PChar; text: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_AddItemWithIdByText');
    {$ENDIF}
  
    try 
       sgUserInterface.ListAddItem(id, text);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_AddItemWithIdByText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_AddItemWithIdByText');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ButtonClicked(r: Region): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ButtonClicked');
    {$ENDIF}
    
    try
      result := sgUserInterface.ButtonClicked(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ButtonClicked');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ButtonClicked');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ButtonNamedClicked(name: PChar): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ButtonNamedClicked');
    {$ENDIF}
    
    try
      result := sgUserInterface.ButtonClicked(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ButtonNamedClicked');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ButtonNamedClicked');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_CheckBoxSetStateWithId(id: PChar; val: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_CheckBoxSetStateWithId');
    {$ENDIF}
  
    try 
       sgUserInterface.CheckboxSetState(id, val);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_CheckBoxSetStateWithId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_CheckBoxSetStateWithId');
    {$ENDIF}
  end;
  

  function sg_UserInterface_CheckboxFromRegion(r: Region): GUICheckbox; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_CheckboxFromRegion');
    {$ENDIF}
    
    try
      result := sgUserInterface.CheckboxFromRegion(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_CheckboxFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_CheckboxFromRegion');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_CheckboxSetState(chk: GUICheckbox; val: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_CheckboxSetState');
    {$ENDIF}
  
    try 
       sgUserInterface.CheckboxSetState(chk, val);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_CheckboxSetState');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_CheckboxSetState');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_CheckboxSetStateFromRegion(r: Region; val: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_CheckboxSetStateFromRegion');
    {$ENDIF}
  
    try 
       sgUserInterface.CheckboxSetState(r, val);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_CheckboxSetStateFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_CheckboxSetStateFromRegion');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_CheckboxSetStateOnPanel(pnl: Panel; id: PChar; val: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_CheckboxSetStateOnPanel');
    {$ENDIF}
  
    try 
       sgUserInterface.CheckboxSetState(pnl, id, val);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_CheckboxSetStateOnPanel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_CheckboxSetStateOnPanel');
    {$ENDIF}
  end;
  

  function sg_UserInterface_CheckboxState(s: PChar): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_CheckboxState');
    {$ENDIF}
    
    try
      result := sgUserInterface.CheckboxState(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_CheckboxState');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_CheckboxState');
    {$ENDIF}
  end;
  

  function sg_UserInterface_CheckboxStateFromCheckbox(chk: GUICheckbox): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_CheckboxStateFromCheckbox');
    {$ENDIF}
    
    try
      result := sgUserInterface.CheckboxState(chk);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_CheckboxStateFromCheckbox');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_CheckboxStateFromCheckbox');
    {$ENDIF}
  end;
  

  function sg_UserInterface_CheckboxStateFromRegion(r: Region): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_CheckboxStateFromRegion');
    {$ENDIF}
    
    try
      result := sgUserInterface.CheckboxState(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_CheckboxStateFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_CheckboxStateFromRegion');
    {$ENDIF}
  end;
  

  function sg_UserInterface_CheckboxStateOnPanel(p: Panel; s: PChar): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_CheckboxStateOnPanel');
    {$ENDIF}
    
    try
      result := sgUserInterface.CheckboxState(p, s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_CheckboxStateOnPanel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_CheckboxStateOnPanel');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_DeactivatePanel(p: Panel); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_DeactivatePanel');
    {$ENDIF}
  
    try 
       sgUserInterface.DeactivatePanel(p);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_DeactivatePanel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_DeactivatePanel');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_DeactivateTextBox(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_DeactivateTextBox');
    {$ENDIF}
  
    try 
       sgUserInterface.DeactivateTextBox();
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_DeactivateTextBox');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_DeactivateTextBox');
    {$ENDIF}
  end;
  

  function sg_UserInterface_DialogCancelled(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_DialogCancelled');
    {$ENDIF}
    
    try
      result := sgUserInterface.DialogCancelled();
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_DialogCancelled');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_DialogCancelled');
    {$ENDIF}
  end;
  

  function sg_UserInterface_DialogComplete(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_DialogComplete');
    {$ENDIF}
    
    try
      result := sgUserInterface.DialogComplete();
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_DialogComplete');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_DialogComplete');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_DialogPath(result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_DialogPath');
    {$ENDIF}
    
    try
      result_temp := sgUserInterface.DialogPath();
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_DialogPath');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_DialogPath');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_DialogSetPath(fullname: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_DialogSetPath');
    {$ENDIF}
  
    try 
       sgUserInterface.DialogSetPath(fullname);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_DialogSetPath');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_DialogSetPath');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_DrawGUIAsVectors(b: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_DrawGUIAsVectors');
    {$ENDIF}
  
    try 
       sgUserInterface.DrawGUIAsVectors(b);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_DrawGUIAsVectors');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_DrawGUIAsVectors');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_DrawInterface(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_DrawInterface');
    {$ENDIF}
  
    try 
       sgUserInterface.DrawInterface();
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_DrawInterface');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_DrawInterface');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_FinishReadingText(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_FinishReadingText');
    {$ENDIF}
  
    try 
       sgUserInterface.FinishReadingText();
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_FinishReadingText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_FinishReadingText');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_FreePanel(var pnl: Panel); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_FreePanel');
    {$ENDIF}
  
    try 
       sgUserInterface.FreePanel(pnl);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_FreePanel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_FreePanel');
    {$ENDIF}
  end;
  

  function sg_UserInterface_GUIClicked(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_GUIClicked');
    {$ENDIF}
    
    try
      result := sgUserInterface.GUIClicked();
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_GUIClicked');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_GUIClicked');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_GUISetActiveTextbox(t: GUITextbox); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_GUISetActiveTextbox');
    {$ENDIF}
  
    try 
       sgUserInterface.GUISetActiveTextbox(t);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_GUISetActiveTextbox');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_GUISetActiveTextbox');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_GUISetActiveTextboxFromRegion(r: Region); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_GUISetActiveTextboxFromRegion');
    {$ENDIF}
  
    try 
       sgUserInterface.GUISetActiveTextbox(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_GUISetActiveTextboxFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_GUISetActiveTextboxFromRegion');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_GUISetActiveTextboxNamed(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_GUISetActiveTextboxNamed');
    {$ENDIF}
  
    try 
       sgUserInterface.GUISetActiveTextbox(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_GUISetActiveTextboxNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_GUISetActiveTextboxNamed');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_GUISetBackgroundColor(c: LongWord); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_GUISetBackgroundColor');
    {$ENDIF}
  
    try 
       sgUserInterface.GUISetBackgroundColor(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_GUISetBackgroundColor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_GUISetBackgroundColor');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_GUISetBackgroundColorInactive(c: LongWord); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_GUISetBackgroundColorInactive');
    {$ENDIF}
  
    try 
       sgUserInterface.GUISetBackgroundColorInactive(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_GUISetBackgroundColorInactive');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_GUISetBackgroundColorInactive');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_GUISetForegroundColor(c: LongWord); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_GUISetForegroundColor');
    {$ENDIF}
  
    try 
       sgUserInterface.GUISetForegroundColor(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_GUISetForegroundColor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_GUISetForegroundColor');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_GUISetForegroundColorInactive(c: LongWord); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_GUISetForegroundColorInactive');
    {$ENDIF}
  
    try 
       sgUserInterface.GUISetForegroundColorInactive(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_GUISetForegroundColorInactive');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_GUISetForegroundColorInactive');
    {$ENDIF}
  end;
  

  function sg_UserInterface_GUITextBoxOfTextEntered(): GUITextbox; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_GUITextBoxOfTextEntered');
    {$ENDIF}
    
    try
      result := sgUserInterface.GUITextBoxOfTextEntered();
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_GUITextBoxOfTextEntered');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_GUITextBoxOfTextEntered');
    {$ENDIF}
  end;
  

  function sg_UserInterface_GUITextEntryComplete(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_GUITextEntryComplete');
    {$ENDIF}
    
    try
      result := sgUserInterface.GUITextEntryComplete();
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_GUITextEntryComplete');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_GUITextEntryComplete');
    {$ENDIF}
  end;
  

  function sg_UserInterface_GlobalRegionWithID(ID: PChar): Region; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_GlobalRegionWithID');
    {$ENDIF}
    
    try
      result := sgUserInterface.RegionWithID(ID);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_GlobalRegionWithID');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_GlobalRegionWithID');
    {$ENDIF}
  end;
  

  function sg_UserInterface_HasPanel(name: PChar): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_HasPanel');
    {$ENDIF}
    
    try
      result := sgUserInterface.HasPanel(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_HasPanel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_HasPanel');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_HidePanel(p: Panel); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_HidePanel');
    {$ENDIF}
  
    try 
       sgUserInterface.HidePanel(p);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_HidePanel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_HidePanel');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_HidePanelNamed(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_HidePanelNamed');
    {$ENDIF}
  
    try 
       sgUserInterface.HidePanel(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_HidePanelNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_HidePanelNamed');
    {$ENDIF}
  end;
  

  function sg_UserInterface_IndexOfLastUpdatedTextBox(): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_IndexOfLastUpdatedTextBox');
    {$ENDIF}
    
    try
      result := sgUserInterface.IndexOfLastUpdatedTextBox();
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_IndexOfLastUpdatedTextBox');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_IndexOfLastUpdatedTextBox');
    {$ENDIF}
  end;
  

  function sg_UserInterface_IsDragging(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_IsDragging');
    {$ENDIF}
    
    try
      result := sgUserInterface.IsDragging();
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_IsDragging');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_IsDragging');
    {$ENDIF}
  end;
  

  function sg_UserInterface_LabelAlignementFromRegion(r: Region): FontAlignment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_LabelAlignementFromRegion');
    {$ENDIF}
    
    try
      result := sgUserInterface.LabelAlignment(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_LabelAlignementFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_LabelAlignementFromRegion');
    {$ENDIF}
  end;
  

  function sg_UserInterface_LabelAlignment(lbl: GUILabel): FontAlignment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_LabelAlignment');
    {$ENDIF}
    
    try
      result := sgUserInterface.LabelAlignment(lbl);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_LabelAlignment');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_LabelAlignment');
    {$ENDIF}
  end;
  

  function sg_UserInterface_LabelFont(l: GUILabel): Font; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_LabelFont');
    {$ENDIF}
    
    try
      result := sgUserInterface.LabelFont(l);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_LabelFont');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_LabelFont');
    {$ENDIF}
  end;
  

  function sg_UserInterface_LabelFromRegion(r: Region): GUILabel; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_LabelFromRegion');
    {$ENDIF}
    
    try
      result := sgUserInterface.LabelFromRegion(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_LabelFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_LabelFromRegion');
    {$ENDIF}
  end;
  

  function sg_UserInterface_LabelFromRegionGetFont(r: Region): Font; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_LabelFromRegionGetFont');
    {$ENDIF}
    
    try
      result := sgUserInterface.LabelFont(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_LabelFromRegionGetFont');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_LabelFromRegionGetFont');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_LabelFromRegionSetText(r: Region; newString: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_LabelFromRegionSetText');
    {$ENDIF}
  
    try 
       sgUserInterface.LabelSetText(r, newString);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_LabelFromRegionSetText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_LabelFromRegionSetText');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_LabelOnPanelWithIdSetText(pnl: Panel; id: PChar; newString: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_LabelOnPanelWithIdSetText');
    {$ENDIF}
  
    try 
       sgUserInterface.LabelSetText(pnl, id, newString);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_LabelOnPanelWithIdSetText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_LabelOnPanelWithIdSetText');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_LabelSetFont(l: GUILabel; s: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_LabelSetFont');
    {$ENDIF}
  
    try 
       sgUserInterface.LabelSetFont(l, s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_LabelSetFont');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_LabelSetFont');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_LabelSetText(lb: GUILabel; newString: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_LabelSetText');
    {$ENDIF}
  
    try 
       sgUserInterface.LabelSetText(lb, newString);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_LabelSetText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_LabelSetText');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_LabelText(lb: GUILabel; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_LabelText');
    {$ENDIF}
    
    try
      result_temp := sgUserInterface.LabelText(lb);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_LabelText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_LabelText');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_LabelTextFromRegion(r: Region; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_LabelTextFromRegion');
    {$ENDIF}
    
    try
      result_temp := sgUserInterface.LabelText(r);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_LabelTextFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_LabelTextFromRegion');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_LabelTextOnPanelWithId(pnl: Panel; id: PChar; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_LabelTextOnPanelWithId');
    {$ENDIF}
    
    try
      result_temp := sgUserInterface.LabelText(pnl, id);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_LabelTextOnPanelWithId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_LabelTextOnPanelWithId');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_LabelTextWithId(id: PChar; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_LabelTextWithId');
    {$ENDIF}
    
    try
      result_temp := sgUserInterface.LabelText(id);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_LabelTextWithId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_LabelTextWithId');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_LabelWithIdSetText(id: PChar; newString: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_LabelWithIdSetText');
    {$ENDIF}
  
    try 
       sgUserInterface.LabelSetText(id, newString);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_LabelWithIdSetText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_LabelWithIdSetText');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ListActiveItemIndex(lst: GUIList): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListActiveItemIndex');
    {$ENDIF}
    
    try
      result := sgUserInterface.ListActiveItemIndex(lst);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListActiveItemIndex');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListActiveItemIndex');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ListActiveItemIndexFromRegion(r: Region): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListActiveItemIndexFromRegion');
    {$ENDIF}
    
    try
      result := sgUserInterface.ListActiveItemIndex(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListActiveItemIndexFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListActiveItemIndexFromRegion');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ListActiveItemIndexOnPanelWithId(pnl: Panel; id: PChar): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListActiveItemIndexOnPanelWithId');
    {$ENDIF}
    
    try
      result := sgUserInterface.ListActiveItemIndex(pnl, id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListActiveItemIndexOnPanelWithId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListActiveItemIndexOnPanelWithId');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ListActiveItemIndexWithId(id: PChar): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListActiveItemIndexWithId');
    {$ENDIF}
    
    try
      result := sgUserInterface.ListActiveItemIndex(id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListActiveItemIndexWithId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListActiveItemIndexWithId');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListActiveItemText(list: GUIList; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListActiveItemText');
    {$ENDIF}
    
    try
      result_temp := sgUserInterface.ListActiveItemText(list);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListActiveItemText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListActiveItemText');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListActiveItemTextFromRegion(r: Region; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListActiveItemTextFromRegion');
    {$ENDIF}
    
    try
      result_temp := sgUserInterface.ListActiveItemText(r);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListActiveItemTextFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListActiveItemTextFromRegion');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListActiveItemTextOnPanelWithId(pnl: Panel; ID: PChar; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListActiveItemTextOnPanelWithId');
    {$ENDIF}
    
    try
      result_temp := sgUserInterface.ListActiveItemText(pnl, ID);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListActiveItemTextOnPanelWithId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListActiveItemTextOnPanelWithId');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListAddBitmapAndTextItem(lst: GUIList; img: Bitmap; text: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListAddBitmapAndTextItem');
    {$ENDIF}
  
    try 
       sgUserInterface.ListAddItem(lst, img, text);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListAddBitmapAndTextItem');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListAddBitmapAndTextItem');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListAddBitmapAndTextItemFromRegion(r: Region; img: Bitmap; text: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListAddBitmapAndTextItemFromRegion');
    {$ENDIF}
  
    try 
       sgUserInterface.ListAddItem(r, img, text);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListAddBitmapAndTextItemFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListAddBitmapAndTextItemFromRegion');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListAddItemBitmap(pnl: Panel; id: PChar; img: Bitmap); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListAddItemBitmap');
    {$ENDIF}
  
    try 
       sgUserInterface.ListAddItem(pnl, id, img);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListAddItemBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListAddItemBitmap');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListAddItemByBitmapFromRegion(r: Region; img: Bitmap); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListAddItemByBitmapFromRegion');
    {$ENDIF}
  
    try 
       sgUserInterface.ListAddItem(r, img);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListAddItemByBitmapFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListAddItemByBitmapFromRegion');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListAddItemByTextFromRegion(r: Region; text: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListAddItemByTextFromRegion');
    {$ENDIF}
  
    try 
       sgUserInterface.ListAddItem(r, text);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListAddItemByTextFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListAddItemByTextFromRegion');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListAddItemWithCell(lst: GUIList; var img: BitmapCell); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListAddItemWithCell');
    {$ENDIF}
  
    try 
       sgUserInterface.ListAddItem(lst, img);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListAddItemWithCell');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListAddItemWithCell');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListAddItemWithCellAndText(lst: GUIList; var img: BitmapCell; text: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListAddItemWithCellAndText');
    {$ENDIF}
  
    try 
       sgUserInterface.ListAddItem(lst, img, text);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListAddItemWithCellAndText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListAddItemWithCellAndText');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListAddItemWithCellAndTextFromRegion(r: Region; var img: BitmapCell; text: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListAddItemWithCellAndTextFromRegion');
    {$ENDIF}
  
    try 
       sgUserInterface.ListAddItem(r, img, text);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListAddItemWithCellAndTextFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListAddItemWithCellAndTextFromRegion');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListAddItemWithCellFromRegion(r: Region; var img: BitmapCell); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListAddItemWithCellFromRegion');
    {$ENDIF}
  
    try 
       sgUserInterface.ListAddItem(r, img);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListAddItemWithCellFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListAddItemWithCellFromRegion');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ListBitmapCellIndex(lst: GUIList; var img: BitmapCell): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListBitmapCellIndex');
    {$ENDIF}
    
    try
      result := sgUserInterface.ListBitmapIndex(lst, img);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListBitmapCellIndex');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListBitmapCellIndex');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ListBitmapIndex(lst: GUIList; img: Bitmap): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListBitmapIndex');
    {$ENDIF}
    
    try
      result := sgUserInterface.ListBitmapIndex(lst, img);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListBitmapIndex');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListBitmapIndex');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListClearItems(lst: GUIList); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListClearItems');
    {$ENDIF}
  
    try 
       sgUserInterface.ListClearItems(lst);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListClearItems');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListClearItems');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListClearItemsFromRegion(r: Region); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListClearItemsFromRegion');
    {$ENDIF}
  
    try 
       sgUserInterface.ListClearItems(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListClearItemsFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListClearItemsFromRegion');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListClearItemsGivenPanelWithId(pnl: Panel; id: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListClearItemsGivenPanelWithId');
    {$ENDIF}
  
    try 
       sgUserInterface.ListClearItems(pnl, id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListClearItemsGivenPanelWithId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListClearItemsGivenPanelWithId');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ListFont(lst: GUIList): Font; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListFont');
    {$ENDIF}
    
    try
      result := sgUserInterface.ListFont(lst);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListFont');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListFont');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ListFontAlignment(lst: GUIList): FontAlignment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListFontAlignment');
    {$ENDIF}
    
    try
      result := sgUserInterface.ListFontAlignment(lst);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListFontAlignment');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListFontAlignment');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ListFontAlignmentFromRegion(r: Region): FontAlignment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListFontAlignmentFromRegion');
    {$ENDIF}
    
    try
      result := sgUserInterface.ListFontAlignment(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListFontAlignmentFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListFontAlignmentFromRegion');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ListFontFromRegion(r: Region): Font; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListFontFromRegion');
    {$ENDIF}
    
    try
      result := sgUserInterface.ListFont(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListFontFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListFontFromRegion');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ListFromRegion(r: Region): GUIList; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListFromRegion');
    {$ENDIF}
    
    try
      result := sgUserInterface.ListFromRegion(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListFromRegion');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ListItemCount(lst: GUIList): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListItemCount');
    {$ENDIF}
    
    try
      result := sgUserInterface.ListItemCount(lst);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListItemCount');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListItemCount');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ListItemCountFromRegion(r: Region): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListItemCountFromRegion');
    {$ENDIF}
    
    try
      result := sgUserInterface.ListItemCount(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListItemCountFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListItemCountFromRegion');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ListItemCountOnPanelWithId(pnl: Panel; id: PChar): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListItemCountOnPanelWithId');
    {$ENDIF}
    
    try
      result := sgUserInterface.ListItemCount(pnl, id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListItemCountOnPanelWithId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListItemCountOnPanelWithId');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ListItemCountWithId(id: PChar): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListItemCountWithId');
    {$ENDIF}
    
    try
      result := sgUserInterface.ListItemCount(id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListItemCountWithId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListItemCountWithId');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListItemText(lst: GUIList; idx: Longint; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListItemText');
    {$ENDIF}
    
    try
      result_temp := sgUserInterface.ListItemText(lst, idx);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListItemText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListItemText');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListItemTextFromId(id: PChar; idx: Longint; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListItemTextFromId');
    {$ENDIF}
    
    try
      result_temp := sgUserInterface.ListItemText(id, idx);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListItemTextFromId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListItemTextFromId');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListItemTextFromRegion(r: Region; idx: Longint; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListItemTextFromRegion');
    {$ENDIF}
    
    try
      result_temp := sgUserInterface.ListItemText(r, idx);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListItemTextFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListItemTextFromRegion');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListItemTextOnPanelWithId(pnl: Panel; id: PChar; idx: Longint; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListItemTextOnPanelWithId');
    {$ENDIF}
    
    try
      result_temp := sgUserInterface.ListItemText(pnl, id, idx);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListItemTextOnPanelWithId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListItemTextOnPanelWithId');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ListLargestStartIndex(lst: GUIList): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListLargestStartIndex');
    {$ENDIF}
    
    try
      result := sgUserInterface.ListLargestStartIndex(lst);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListLargestStartIndex');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListLargestStartIndex');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListOnPanelWithIdAddBitmapWithTextItem(pnl: Panel; id: PChar; img: Bitmap; text: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListOnPanelWithIdAddBitmapWithTextItem');
    {$ENDIF}
  
    try 
       sgUserInterface.ListAddItem(pnl, id, img, text);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListOnPanelWithIdAddBitmapWithTextItem');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListOnPanelWithIdAddBitmapWithTextItem');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListOnPanelWithIdAddItemWithCell(pnl: Panel; id: PChar; var img: BitmapCell); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListOnPanelWithIdAddItemWithCell');
    {$ENDIF}
  
    try 
       sgUserInterface.ListAddItem(pnl, id, img);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListOnPanelWithIdAddItemWithCell');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListOnPanelWithIdAddItemWithCell');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListOnPanelWithIdAddItemWithCellAndText(pnl: Panel; id: PChar; var img: BitmapCell; text: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListOnPanelWithIdAddItemWithCellAndText');
    {$ENDIF}
  
    try 
       sgUserInterface.ListAddItem(pnl, id, img, text);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListOnPanelWithIdAddItemWithCellAndText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListOnPanelWithIdAddItemWithCellAndText');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListRemoveActiveItemFromId(id: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListRemoveActiveItemFromId');
    {$ENDIF}
  
    try 
       sgUserInterface.ListRemoveActiveItem(id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListRemoveActiveItemFromId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListRemoveActiveItemFromId');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListRemoveActiveItemFromRegion(r: Region); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListRemoveActiveItemFromRegion');
    {$ENDIF}
  
    try 
       sgUserInterface.ListRemoveActiveItem(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListRemoveActiveItemFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListRemoveActiveItemFromRegion');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListRemoveActiveItemOnPanelWithId(pnl: Panel; id: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListRemoveActiveItemOnPanelWithId');
    {$ENDIF}
  
    try 
       sgUserInterface.ListRemoveActiveItem(pnl, id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListRemoveActiveItemOnPanelWithId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListRemoveActiveItemOnPanelWithId');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListRemoveItem(lst: GUIList; idx: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListRemoveItem');
    {$ENDIF}
  
    try 
       sgUserInterface.ListRemoveItem(lst, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListRemoveItem');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListRemoveItem');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListRemoveItemFromWithId(id: PChar; idx: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListRemoveItemFromWithId');
    {$ENDIF}
  
    try 
       sgUserInterface.ListRemoveItem(id, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListRemoveItemFromWithId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListRemoveItemFromWithId');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListRemoveItemOnPanelWithId(pnl: Panel; id: PChar; idx: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListRemoveItemOnPanelWithId');
    {$ENDIF}
  
    try 
       sgUserInterface.ListRemoveItem(pnl, id, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListRemoveItemOnPanelWithId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListRemoveItemOnPanelWithId');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ListScrollIncrement(lst: GUIList): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListScrollIncrement');
    {$ENDIF}
    
    try
      result := sgUserInterface.ListScrollIncrement(lst);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListScrollIncrement');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListScrollIncrement');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListSet(pnl: Panel; id: PChar; idx: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListSet');
    {$ENDIF}
  
    try 
       sgUserInterface.ListSetActiveItemIndex(pnl, id, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListSet');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListSet');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListSetActiveItemIndex(lst: GUIList; idx: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListSetActiveItemIndex');
    {$ENDIF}
  
    try 
       sgUserInterface.ListSetActiveItemIndex(lst, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListSetActiveItemIndex');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListSetActiveItemIndex');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListSetActiveItemIndexWithId(id: PChar; idx: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListSetActiveItemIndexWithId');
    {$ENDIF}
  
    try 
       sgUserInterface.ListSetActiveItemIndex(id, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListSetActiveItemIndexWithId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListSetActiveItemIndexWithId');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListSetFont(lst: GUIList; f: Font); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListSetFont');
    {$ENDIF}
  
    try 
       sgUserInterface.ListSetFont(lst, f);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListSetFont');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListSetFont');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListSetFontAlignment(lst: GUIList; align: FontAlignment); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListSetFontAlignment');
    {$ENDIF}
  
    try 
       sgUserInterface.ListSetFontAlignment(lst, align);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListSetFontAlignment');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListSetFontAlignment');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListSetFontAlignmentFromRegion(r: Region; align: FontAlignment); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListSetFontAlignmentFromRegion');
    {$ENDIF}
  
    try 
       sgUserInterface.ListSetFontAlignment(r, align);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListSetFontAlignmentFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListSetFontAlignmentFromRegion');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListSetStartingAt(lst: GUIList; idx: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListSetStartingAt');
    {$ENDIF}
  
    try 
       sgUserInterface.ListSetStartAt(lst, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListSetStartingAt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListSetStartingAt');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListSetStartingAtFromRegion(r: Region; idx: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListSetStartingAtFromRegion');
    {$ENDIF}
  
    try 
       sgUserInterface.ListSetStartAt(r, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListSetStartingAtFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListSetStartingAtFromRegion');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ListStartAt(lst: GUIList): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListStartAt');
    {$ENDIF}
    
    try
      result := sgUserInterface.ListStartAt(lst);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListStartAt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListStartAt');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ListStartingAtFromRegion(r: Region): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListStartingAtFromRegion');
    {$ENDIF}
    
    try
      result := sgUserInterface.ListStartAt(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListStartingAtFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListStartingAtFromRegion');
    {$ENDIF}
  end;
  

  function sg_UserInterface_ListTextIndex(lst: GUIList; value: PChar): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListTextIndex');
    {$ENDIF}
    
    try
      result := sgUserInterface.ListTextIndex(lst, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListTextIndex');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListTextIndex');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListWithIDAddBitmapWithTextItem(id: PChar; img: Bitmap; text: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListWithIDAddBitmapWithTextItem');
    {$ENDIF}
  
    try 
       sgUserInterface.ListAddItem(id, img, text);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListWithIDAddBitmapWithTextItem');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListWithIDAddBitmapWithTextItem');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListWithIdActiveItemText(ID: PChar; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListWithIdActiveItemText');
    {$ENDIF}
    
    try
      result_temp := sgUserInterface.ListActiveItemText(ID);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListWithIdActiveItemText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListWithIdActiveItemText');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListWithIdAddItemWithCell(id: PChar; var img: BitmapCell); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListWithIdAddItemWithCell');
    {$ENDIF}
  
    try 
       sgUserInterface.ListAddItem(id, img);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListWithIdAddItemWithCell');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListWithIdAddItemWithCell');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListWithIdAddItemWithCellAndText(id: PChar; var img: BitmapCell; text: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListWithIdAddItemWithCellAndText');
    {$ENDIF}
  
    try 
       sgUserInterface.ListAddItem(id, img, text);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListWithIdAddItemWithCellAndText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListWithIdAddItemWithCellAndText');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ListclearItemsWithId(id: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ListclearItemsWithId');
    {$ENDIF}
  
    try 
       sgUserInterface.ListClearItems(id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ListclearItemsWithId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ListclearItemsWithId');
    {$ENDIF}
  end;
  

  function sg_UserInterface_LoadPanel(filename: PChar): Panel; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_LoadPanel');
    {$ENDIF}
    
    try
      result := sgUserInterface.LoadPanel(filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_LoadPanel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_LoadPanel');
    {$ENDIF}
  end;
  

  function sg_UserInterface_LoadPanelNamed(name: PChar; filename: PChar): Panel; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_LoadPanelNamed');
    {$ENDIF}
    
    try
      result := sgUserInterface.LoadPanelNamed(name, filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_LoadPanelNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_LoadPanelNamed');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_MovePanel(p: Panel; var mvmt: Vector); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_MovePanel');
    {$ENDIF}
  
    try 
       sgUserInterface.MovePanel(p, mvmt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_MovePanel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_MovePanel');
    {$ENDIF}
  end;
  

  function sg_UserInterface_NewPanel(pnlName: PChar): Panel; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_NewPanel');
    {$ENDIF}
    
    try
      result := sgUserInterface.NewPanel(pnlName);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_NewPanel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_NewPanel');
    {$ENDIF}
  end;
  

  function sg_UserInterface_PanelActive(pnl: Panel): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_PanelActive');
    {$ENDIF}
    
    try
      result := sgUserInterface.PanelActive(pnl);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_PanelActive');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_PanelActive');
    {$ENDIF}
  end;
  

  function sg_UserInterface_PanelAtPoint(var pt: Point2D): Panel; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_PanelAtPoint');
    {$ENDIF}
    
    try
      result := sgUserInterface.PanelAtPoint(pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_PanelAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_PanelAtPoint');
    {$ENDIF}
  end;
  

  function sg_UserInterface_PanelClicked(): Panel; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_PanelClicked');
    {$ENDIF}
    
    try
      result := sgUserInterface.PanelClicked();
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_PanelClicked');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_PanelClicked');
    {$ENDIF}
  end;
  

  function sg_UserInterface_PanelDraggable(p: Panel): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_PanelDraggable');
    {$ENDIF}
    
    try
      result := sgUserInterface.PanelDraggable(p);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_PanelDraggable');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_PanelDraggable');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_PanelFilename(pnl: Panel; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_PanelFilename');
    {$ENDIF}
    
    try
      result_temp := sgUserInterface.PanelFilename(pnl);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_PanelFilename');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_PanelFilename');
    {$ENDIF}
  end;
  

  function sg_UserInterface_PanelHeight(p: Panel): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_PanelHeight');
    {$ENDIF}
    
    try
      result := sgUserInterface.PanelHeight(p);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_PanelHeight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_PanelHeight');
    {$ENDIF}
  end;
  

  function sg_UserInterface_PanelIsDragging(pnl: Panel): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_PanelIsDragging');
    {$ENDIF}
    
    try
      result := sgUserInterface.IsDragging(pnl);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_PanelIsDragging');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_PanelIsDragging');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_PanelName(pnl: Panel; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_PanelName');
    {$ENDIF}
    
    try
      result_temp := sgUserInterface.PanelName(pnl);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_PanelName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_PanelName');
    {$ENDIF}
  end;
  

  function sg_UserInterface_PanelNamed(name: PChar): Panel; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_PanelNamed');
    {$ENDIF}
    
    try
      result := sgUserInterface.PanelNamed(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_PanelNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_PanelNamed');
    {$ENDIF}
  end;
  

  function sg_UserInterface_PanelNamedHeight(name: PChar): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_PanelNamedHeight');
    {$ENDIF}
    
    try
      result := sgUserInterface.PanelHeight(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_PanelNamedHeight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_PanelNamedHeight');
    {$ENDIF}
  end;
  

  function sg_UserInterface_PanelNamedWidth(name: PChar): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_PanelNamedWidth');
    {$ENDIF}
    
    try
      result := sgUserInterface.PanelWidth(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_PanelNamedWidth');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_PanelNamedWidth');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_PanelSetDraggable(p: Panel; b: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_PanelSetDraggable');
    {$ENDIF}
  
    try 
       sgUserInterface.PanelSetDraggable(p, b);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_PanelSetDraggable');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_PanelSetDraggable');
    {$ENDIF}
  end;
  

  function sg_UserInterface_PanelVisible(p: Panel): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_PanelVisible');
    {$ENDIF}
    
    try
      result := sgUserInterface.PanelVisible(p);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_PanelVisible');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_PanelVisible');
    {$ENDIF}
  end;
  

  function sg_UserInterface_PanelWasClicked(pnl: Panel): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_PanelWasClicked');
    {$ENDIF}
    
    try
      result := sgUserInterface.PanelClicked(pnl);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_PanelWasClicked');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_PanelWasClicked');
    {$ENDIF}
  end;
  

  function sg_UserInterface_PanelWidth(p: Panel): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_PanelWidth');
    {$ENDIF}
    
    try
      result := sgUserInterface.PanelWidth(p);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_PanelWidth');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_PanelWidth');
    {$ENDIF}
  end;
  

  function sg_UserInterface_PanelX(p: Panel): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_PanelX');
    {$ENDIF}
    
    try
      result := sgUserInterface.PanelX(p);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_PanelX');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_PanelX');
    {$ENDIF}
  end;
  

  function sg_UserInterface_PanelY(p: Panel): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_PanelY');
    {$ENDIF}
    
    try
      result := sgUserInterface.PanelY(p);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_PanelY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_PanelY');
    {$ENDIF}
  end;
  

  function sg_UserInterface_PointInRegion(var pt: Point2D; p: Panel): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_PointInRegion');
    {$ENDIF}
    
    try
      result := sgUserInterface.PointInRegion(pt, p);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_PointInRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_PointInRegion');
    {$ENDIF}
  end;
  

  function sg_UserInterface_PointInRegionWithKind(var pt: Point2D; p: Panel; kind: GUIElementKind): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_PointInRegionWithKind');
    {$ENDIF}
    
    try
      result := sgUserInterface.PointInRegion(pt, p, kind);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_PointInRegionWithKind');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_PointInRegionWithKind');
    {$ENDIF}
  end;
  

  function sg_UserInterface_RadioGroupFromId(id: PChar): GUIRadioGroup; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_RadioGroupFromId');
    {$ENDIF}
    
    try
      result := sgUserInterface.RadioGroupFromId(id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_RadioGroupFromId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_RadioGroupFromId');
    {$ENDIF}
  end;
  

  function sg_UserInterface_RadioGroupFromRegion(r: Region): GUIRadioGroup; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_RadioGroupFromRegion');
    {$ENDIF}
    
    try
      result := sgUserInterface.RadioGroupFromRegion(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_RadioGroupFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_RadioGroupFromRegion');
    {$ENDIF}
  end;
  

  function sg_UserInterface_RadioGroupOnPanelWidthId(pnl: Panel; id: PChar): GUIRadioGroup; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_RadioGroupOnPanelWidthId');
    {$ENDIF}
    
    try
      result := sgUserInterface.RadioGroupFromId(pnl, id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_RadioGroupOnPanelWidthId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_RadioGroupOnPanelWidthId');
    {$ENDIF}
  end;
  

  function sg_UserInterface_RegionActive(forRegion: Region): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_RegionActive');
    {$ENDIF}
    
    try
      result := sgUserInterface.RegionActive(forRegion);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_RegionActive');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_RegionActive');
    {$ENDIF}
  end;
  

  function sg_UserInterface_RegionAtPoint(p: Panel; var pt: Point2D): Region; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_RegionAtPoint');
    {$ENDIF}
    
    try
      result := sgUserInterface.RegionAtPoint(p, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_RegionAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_RegionAtPoint');
    {$ENDIF}
  end;
  

  function sg_UserInterface_RegionClicked(): Region; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_RegionClicked');
    {$ENDIF}
    
    try
      result := sgUserInterface.RegionClicked();
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_RegionClicked');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_RegionClicked');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_RegionClickedID(result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_RegionClickedID');
    {$ENDIF}
    
    try
      result_temp := sgUserInterface.RegionClickedID();
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_RegionClickedID');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_RegionClickedID');
    {$ENDIF}
  end;
  

  function sg_UserInterface_RegionHeight(r: Region): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_RegionHeight');
    {$ENDIF}
    
    try
      result := sgUserInterface.RegionHeight(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_RegionHeight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_RegionHeight');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_RegionID(r: Region; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_RegionID');
    {$ENDIF}
    
    try
      result_temp := sgUserInterface.RegionID(r);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_RegionID');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_RegionID');
    {$ENDIF}
  end;
  

  function sg_UserInterface_RegionOfLastUpdatedTextBox(): Region; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_RegionOfLastUpdatedTextBox');
    {$ENDIF}
    
    try
      result := sgUserInterface.RegionOfLastUpdatedTextBox();
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_RegionOfLastUpdatedTextBox');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_RegionOfLastUpdatedTextBox');
    {$ENDIF}
  end;
  

  function sg_UserInterface_RegionPanel(r: Region): Panel; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_RegionPanel');
    {$ENDIF}
    
    try
      result := sgUserInterface.RegionPanel(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_RegionPanel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_RegionPanel');
    {$ENDIF}
  end;
  

  function sg_UserInterface_RegionWidth(r: Region): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_RegionWidth');
    {$ENDIF}
    
    try
      result := sgUserInterface.RegionWidth(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_RegionWidth');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_RegionWidth');
    {$ENDIF}
  end;
  

  function sg_UserInterface_RegionWithID(pnl: Panel; ID: PChar): Region; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_RegionWithID');
    {$ENDIF}
    
    try
      result := sgUserInterface.RegionWithID(pnl, ID);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_RegionWithID');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_RegionWithID');
    {$ENDIF}
  end;
  

  function sg_UserInterface_RegionX(r: Region): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_RegionX');
    {$ENDIF}
    
    try
      result := sgUserInterface.RegionX(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_RegionX');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_RegionX');
    {$ENDIF}
  end;
  

  function sg_UserInterface_RegionY(r: Region): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_RegionY');
    {$ENDIF}
    
    try
      result := sgUserInterface.RegionY(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_RegionY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_RegionY');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_RegisterEventCallback(r: Region; callback: GUIEventCallback); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_RegisterEventCallback');
    {$ENDIF}
  
    try 
       sgUserInterface.RegisterEventCallback(r, callback);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_RegisterEventCallback');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_RegisterEventCallback');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ReleaseAllPanels(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ReleaseAllPanels');
    {$ENDIF}
  
    try 
       sgUserInterface.ReleaseAllPanels();
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ReleaseAllPanels');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ReleaseAllPanels');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ReleasePanel(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ReleasePanel');
    {$ENDIF}
  
    try 
       sgUserInterface.ReleasePanel(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ReleasePanel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ReleasePanel');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_SelectRadioButton(r: Region); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_SelectRadioButton');
    {$ENDIF}
  
    try 
       sgUserInterface.SelectRadioButton(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_SelectRadioButton');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_SelectRadioButton');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_SelectRadioButtonFromRadioGroupAndIndex(rGroup: GUIRadioGroup; idx: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_SelectRadioButtonFromRadioGroupAndIndex');
    {$ENDIF}
  
    try 
       sgUserInterface.SelectRadioButton(rGroup, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_SelectRadioButtonFromRadioGroupAndIndex');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_SelectRadioButtonFromRadioGroupAndIndex');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_SelectRadioButtonFromRadioGroupAndRegion(rGroup: GUIRadioGroup; r: Region); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_SelectRadioButtonFromRadioGroupAndRegion');
    {$ENDIF}
  
    try 
       sgUserInterface.SelectRadioButton(rGroup, r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_SelectRadioButtonFromRadioGroupAndRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_SelectRadioButtonFromRadioGroupAndRegion');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_SelectRadioButtonOnPanelWithId(pnl: Panel; id: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_SelectRadioButtonOnPanelWithId');
    {$ENDIF}
  
    try 
       sgUserInterface.SelectRadioButton(pnl, id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_SelectRadioButtonOnPanelWithId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_SelectRadioButtonOnPanelWithId');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_SelectRadioButtonWithID(id: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_SelectRadioButtonWithID');
    {$ENDIF}
  
    try 
       sgUserInterface.SelectRadioButton(id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_SelectRadioButtonWithID');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_SelectRadioButtonWithID');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_SetLabelAlignment(tb: GUILabel; align: FontAlignment); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_SetLabelAlignment');
    {$ENDIF}
  
    try 
       sgUserInterface.LabelSetAlignment(tb, align);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_SetLabelAlignment');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_SetLabelAlignment');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_SetLabelAlignmentFromRegion(r: Region; align: FontAlignment); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_SetLabelAlignmentFromRegion');
    {$ENDIF}
  
    try 
       sgUserInterface.LabelSetAlignment(r, align);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_SetLabelAlignmentFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_SetLabelAlignmentFromRegion');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_SetRegionActive(forRegion: Region; b: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_SetRegionActive');
    {$ENDIF}
  
    try 
       sgUserInterface.SetRegionActive(forRegion, b);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_SetRegionActive');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_SetRegionActive');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ShowOpenDialog(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ShowOpenDialog');
    {$ENDIF}
  
    try 
       sgUserInterface.ShowOpenDialog();
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ShowOpenDialog');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ShowOpenDialog');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ShowOpenDialogWithType(select: FileDialogSelectType); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ShowOpenDialogWithType');
    {$ENDIF}
  
    try 
       sgUserInterface.ShowOpenDialog(select);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ShowOpenDialogWithType');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ShowOpenDialogWithType');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ShowPanel(p: Panel); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ShowPanel');
    {$ENDIF}
  
    try 
       sgUserInterface.ShowPanel(p);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ShowPanel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ShowPanel');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ShowPanelDialog(p: Panel); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ShowPanelDialog');
    {$ENDIF}
  
    try 
       sgUserInterface.ShowPanelDialog(p);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ShowPanelDialog');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ShowPanelDialog');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ShowPanelNamed(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ShowPanelNamed');
    {$ENDIF}
  
    try 
       sgUserInterface.ShowPanel(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ShowPanelNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ShowPanelNamed');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ShowSaveDialog(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ShowSaveDialog');
    {$ENDIF}
  
    try 
       sgUserInterface.ShowSaveDialog();
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ShowSaveDialog');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ShowSaveDialog');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ShowSaveDialogWithType(select: FileDialogSelectType); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ShowSaveDialogWithType');
    {$ENDIF}
  
    try 
       sgUserInterface.ShowSaveDialog(select);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ShowSaveDialogWithType');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ShowSaveDialogWithType');
    {$ENDIF}
  end;
  

  function sg_UserInterface_TextBoxAlignmentFromRegion(r: Region): FontAlignment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextBoxAlignmentFromRegion');
    {$ENDIF}
    
    try
      result := sgUserInterface.TextboxAlignment(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextBoxAlignmentFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextBoxAlignmentFromRegion');
    {$ENDIF}
  end;
  

  function sg_UserInterface_TextBoxFont(tb: GUITextbox): Font; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextBoxFont');
    {$ENDIF}
    
    try
      result := sgUserInterface.TextBoxFont(tb);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextBoxFont');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextBoxFont');
    {$ENDIF}
  end;
  

  function sg_UserInterface_TextBoxFontFromRegion(r: Region): Font; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextBoxFontFromRegion');
    {$ENDIF}
    
    try
      result := sgUserInterface.TextBoxFont(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextBoxFontFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextBoxFontFromRegion');
    {$ENDIF}
  end;
  

  function sg_UserInterface_TextBoxFromID(id: PChar): GUITextbox; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextBoxFromID');
    {$ENDIF}
    
    try
      result := sgUserInterface.TextBoxFromID(id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextBoxFromID');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextBoxFromID');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_TextBoxSetAlignmentFromRegion(r: Region; align: FontAlignment); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextBoxSetAlignmentFromRegion');
    {$ENDIF}
  
    try 
       sgUserInterface.TextboxSetAlignment(r, align);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextBoxSetAlignmentFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextBoxSetAlignmentFromRegion');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_TextBoxText(tb: GUITextbox; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextBoxText');
    {$ENDIF}
    
    try
      result_temp := sgUserInterface.TextBoxText(tb);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextBoxText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextBoxText');
    {$ENDIF}
  end;
  

  function sg_UserInterface_TextboxAlignment(tb: GUITextbox): FontAlignment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextboxAlignment');
    {$ENDIF}
    
    try
      result := sgUserInterface.TextboxAlignment(tb);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextboxAlignment');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextboxAlignment');
    {$ENDIF}
  end;
  

  function sg_UserInterface_TextboxFromRegion(r: Region): GUITextbox; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextboxFromRegion');
    {$ENDIF}
    
    try
      result := sgUserInterface.TextBoxFromRegion(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextboxFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextboxFromRegion');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_TextboxSetAlignment(tb: GUITextbox; align: FontAlignment); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextboxSetAlignment');
    {$ENDIF}
  
    try 
       sgUserInterface.TextboxSetAlignment(tb, align);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextboxSetAlignment');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextboxSetAlignment');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_TextboxSetFont(Tb: GUITextbox; f: Font); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextboxSetFont');
    {$ENDIF}
  
    try 
       sgUserInterface.TextboxSetFont(Tb, f);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextboxSetFont');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextboxSetFont');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_TextboxSetText(tb: GUITextbox; s: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextboxSetText');
    {$ENDIF}
  
    try 
       sgUserInterface.TextboxSetText(tb, s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextboxSetText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextboxSetText');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_TextboxSetTextFromId(id: PChar; s: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextboxSetTextFromId');
    {$ENDIF}
  
    try 
       sgUserInterface.TextboxSetText(id, s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextboxSetTextFromId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextboxSetTextFromId');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_TextboxSetTextFromRegion(r: Region; s: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextboxSetTextFromRegion');
    {$ENDIF}
  
    try 
       sgUserInterface.TextboxSetText(r, s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextboxSetTextFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextboxSetTextFromRegion');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_TextboxSetTextOnPanelAndId(pnl: Panel; id: PChar; s: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextboxSetTextOnPanelAndId');
    {$ENDIF}
  
    try 
       sgUserInterface.TextboxSetText(pnl, id, s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextboxSetTextOnPanelAndId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextboxSetTextOnPanelAndId');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_TextboxSetTextToInt(tb: GUITextbox; i: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextboxSetTextToInt');
    {$ENDIF}
  
    try 
       sgUserInterface.TextboxSetText(tb, i);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextboxSetTextToInt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextboxSetTextToInt');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_TextboxSetTextToIntFromRegion(r: Region; i: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextboxSetTextToIntFromRegion');
    {$ENDIF}
  
    try 
       sgUserInterface.TextboxSetText(r, i);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextboxSetTextToIntFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextboxSetTextToIntFromRegion');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_TextboxSetTextToIntOnPanelWithId(pnl: Panel; id: PChar; i: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextboxSetTextToIntOnPanelWithId');
    {$ENDIF}
  
    try 
       sgUserInterface.TextboxSetText(pnl, id, i);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextboxSetTextToIntOnPanelWithId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextboxSetTextToIntOnPanelWithId');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_TextboxSetTextToIntWithId(id: PChar; i: Longint); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextboxSetTextToIntWithId');
    {$ENDIF}
  
    try 
       sgUserInterface.TextboxSetText(id, i);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextboxSetTextToIntWithId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextboxSetTextToIntWithId');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_TextboxSetTextToSingle(tb: GUITextbox; single: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextboxSetTextToSingle');
    {$ENDIF}
  
    try 
       sgUserInterface.TextboxSetText(tb, single);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextboxSetTextToSingle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextboxSetTextToSingle');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_TextboxSetTextToSingleFromId(id: PChar; single: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextboxSetTextToSingleFromId');
    {$ENDIF}
  
    try 
       sgUserInterface.TextboxSetText(id, single);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextboxSetTextToSingleFromId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextboxSetTextToSingleFromId');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_TextboxSetTextToSingleFromRegion(r: Region; single: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextboxSetTextToSingleFromRegion');
    {$ENDIF}
  
    try 
       sgUserInterface.TextboxSetText(r, single);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextboxSetTextToSingleFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextboxSetTextToSingleFromRegion');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_TextboxSetTextToSingleOnPanel(pnl: Panel; id: PChar; single: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextboxSetTextToSingleOnPanel');
    {$ENDIF}
  
    try 
       sgUserInterface.TextboxSetText(pnl, id, single);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextboxSetTextToSingleOnPanel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextboxSetTextToSingleOnPanel');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_TextboxTextFromRegion(r: Region; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextboxTextFromRegion');
    {$ENDIF}
    
    try
      result_temp := sgUserInterface.TextBoxText(r);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextboxTextFromRegion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextboxTextFromRegion');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_TextboxTextOnPanelWithId(pnl: Panel; id: PChar; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextboxTextOnPanelWithId');
    {$ENDIF}
    
    try
      result_temp := sgUserInterface.TextBoxText(pnl, id);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextboxTextOnPanelWithId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextboxTextOnPanelWithId');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_TextboxTextWithId(id: PChar; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_TextboxTextWithId');
    {$ENDIF}
    
    try
      result_temp := sgUserInterface.TextBoxText(id);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_TextboxTextWithId');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_TextboxTextWithId');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ToggleActivatePanel(p: Panel); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ToggleActivatePanel');
    {$ENDIF}
  
    try 
       sgUserInterface.ToggleActivatePanel(p);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ToggleActivatePanel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ToggleActivatePanel');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ToggleCheckboxState(c: GUICheckbox); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ToggleCheckboxState');
    {$ENDIF}
  
    try 
       sgUserInterface.ToggleCheckboxState(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ToggleCheckboxState');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ToggleCheckboxState');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ToggleCheckboxStateFromID(id: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ToggleCheckboxStateFromID');
    {$ENDIF}
  
    try 
       sgUserInterface.ToggleCheckboxState(id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ToggleCheckboxStateFromID');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ToggleCheckboxStateFromID');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ToggleCheckboxStateOnPanel(pnl: Panel; id: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ToggleCheckboxStateOnPanel');
    {$ENDIF}
  
    try 
       sgUserInterface.ToggleCheckboxState(pnl, id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ToggleCheckboxStateOnPanel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ToggleCheckboxStateOnPanel');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ToggleRegionActive(forRegion: Region); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ToggleRegionActive');
    {$ENDIF}
  
    try 
       sgUserInterface.ToggleRegionActive(forRegion);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ToggleRegionActive');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ToggleRegionActive');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_ToggleShowPanel(p: Panel); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_ToggleShowPanel');
    {$ENDIF}
  
    try 
       sgUserInterface.ToggleShowPanel(p);
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_ToggleShowPanel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_ToggleShowPanel');
    {$ENDIF}
  end;
  

  procedure sg_UserInterface_UpdateInterface(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_UserInterface_UpdateInterface');
    {$ENDIF}
  
    try 
       sgUserInterface.UpdateInterface();
    Except on exc: Exception do 
      TrapException(exc, 'sg_UserInterface_UpdateInterface');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_UserInterface_UpdateInterface');
    {$ENDIF}
  end;
  

  procedure sg_Utils_CalculateFramerate(average: PChar; highest: PChar; lowest: PChar; out textColor: LongWord); cdecl; export;
    var
      average_temp: String;
      highest_temp: String;
      lowest_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Utils_CalculateFramerate');
    {$ENDIF}
  
    try 
       sgUtils.CalculateFramerate(average_temp, highest_temp, lowest_temp, textColor);
        StrCopy(average, PChar(average_temp));
        StrCopy(highest, PChar(highest_temp));
        StrCopy(lowest, PChar(lowest_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Utils_CalculateFramerate');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Utils_CalculateFramerate');
    {$ENDIF}
  end;
  

  procedure sg_Utils_Delay(time: Longword); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Utils_Delay');
    {$ENDIF}
  
    try 
       sgUtils.Delay(time);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Utils_Delay');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Utils_Delay');
    {$ENDIF}
  end;
  

  procedure sg_Utils_ExceptionMessage(result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Utils_ExceptionMessage');
    {$ENDIF}
    
    try
      result_temp := sgUtils.ExceptionMessage();
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Utils_ExceptionMessage');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Utils_ExceptionMessage');
    {$ENDIF}
  end;
  

  function sg_Utils_ExceptionOccured(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Utils_ExceptionOccured');
    {$ENDIF}
    
    try
      result := sgUtils.ExceptionOccured();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Utils_ExceptionOccured');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Utils_ExceptionOccured');
    {$ENDIF}
  end;
  

  function sg_Utils_GetFramerate(): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Utils_GetFramerate');
    {$ENDIF}
    
    try
      result := sgUtils.GetFramerate();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Utils_GetFramerate');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Utils_GetFramerate');
    {$ENDIF}
  end;
  

  function sg_Utils_GetTicks(): Longword; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Utils_GetTicks');
    {$ENDIF}
    
    try
      result := sgUtils.GetTicks();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Utils_GetTicks');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Utils_GetTicks');
    {$ENDIF}
  end;
  

  function sg_Utils_Rnd(): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Utils_Rnd');
    {$ENDIF}
    
    try
      result := sgUtils.Rnd();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Utils_Rnd');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Utils_Rnd');
    {$ENDIF}
  end;
  

  function sg_Utils_RndUpto(ubound: Longint): Longint; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Utils_RndUpto');
    {$ENDIF}
    
    try
      result := sgUtils.Rnd(ubound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Utils_RndUpto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Utils_RndUpto');
    {$ENDIF}
  end;
  

  procedure sg_Utils_SwinGameVersion(result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Utils_SwinGameVersion');
    {$ENDIF}
    
    try
      result_temp := sgUtils.SwinGameVersion();
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Utils_SwinGameVersion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Utils_SwinGameVersion');
    {$ENDIF}
  end;
  

  
    exports
    sg_Audio_LoadSoundEffectNamed name {$IFDEF DARWIN}'_sg_Audio_LoadSoundEffectNamed'{$ELSE}'sg_Audio_LoadSoundEffectNamed'{$ENDIF},
    sg_Physics_BitmapPointPtCollision name {$IFDEF DARWIN}'_sg_Physics_BitmapPointPtCollision'{$ELSE}'sg_Physics_BitmapPointPtCollision'{$ENDIF},
    sg_Graphics_ColorLawnGreen name {$IFDEF DARWIN}'_sg_Graphics_ColorLawnGreen'{$ELSE}'sg_Graphics_ColorLawnGreen'{$ENDIF},
    sg_UserInterface_ListScrollIncrement name {$IFDEF DARWIN}'_sg_UserInterface_ListScrollIncrement'{$ELSE}'sg_UserInterface_ListScrollIncrement'{$ENDIF},
    sg_Images_BitmapHeight name {$IFDEF DARWIN}'_sg_Images_BitmapHeight'{$ELSE}'sg_Images_BitmapHeight'{$ENDIF},
    sg_Text_DrawTextAtPointWithFontNamed name {$IFDEF DARWIN}'_sg_Text_DrawTextAtPointWithFontNamed'{$ELSE}'sg_Text_DrawTextAtPointWithFontNamed'{$ENDIF},
    sg_UserInterface_LoadPanelNamed name {$IFDEF DARWIN}'_sg_UserInterface_LoadPanelNamed'{$ELSE}'sg_UserInterface_LoadPanelNamed'{$ENDIF},
    sg_Characters_DrawCharacterWithStationary name {$IFDEF DARWIN}'_sg_Characters_DrawCharacterWithStationary'{$ELSE}'sg_Characters_DrawCharacterWithStationary'{$ENDIF},
    sg_Timers_TimerNamed name {$IFDEF DARWIN}'_sg_Timers_TimerNamed'{$ELSE}'sg_Timers_TimerNamed'{$ENDIF},
    sg_Sprites_CreateLayeredSprite name {$IFDEF DARWIN}'_sg_Sprites_CreateLayeredSprite'{$ELSE}'sg_Sprites_CreateLayeredSprite'{$ENDIF},
    sg_Graphics_ColorNavajoWhite name {$IFDEF DARWIN}'_sg_Graphics_ColorNavajoWhite'{$ELSE}'sg_Graphics_ColorNavajoWhite'{$ENDIF},
    sg_UserInterface_ShowSaveDialogWithType name {$IFDEF DARWIN}'_sg_UserInterface_ShowSaveDialogWithType'{$ELSE}'sg_UserInterface_ShowSaveDialogWithType'{$ENDIF},
    sg_Input_SetAccelerometerThreshold name {$IFDEF DARWIN}'_sg_Input_SetAccelerometerThreshold'{$ELSE}'sg_Input_SetAccelerometerThreshold'{$ENDIF},
    sg_Characters_CharacterAngleAt name {$IFDEF DARWIN}'_sg_Characters_CharacterAngleAt'{$ELSE}'sg_Characters_CharacterAngleAt'{$ENDIF},
    sg_Geometry_RectangleCenterLeft name {$IFDEF DARWIN}'_sg_Geometry_RectangleCenterLeft'{$ELSE}'sg_Geometry_RectangleCenterLeft'{$ENDIF},
    sg_Networking_ReadLastMessage name {$IFDEF DARWIN}'_sg_Networking_ReadLastMessage'{$ELSE}'sg_Networking_ReadLastMessage'{$ENDIF},
    sg_Sprites_CreateLayeredSpriteWithLayerNames name {$IFDEF DARWIN}'_sg_Sprites_CreateLayeredSpriteWithLayerNames'{$ELSE}'sg_Sprites_CreateLayeredSpriteWithLayerNames'{$ENDIF},
    sg_Geometry_VectorInRectXY name {$IFDEF DARWIN}'_sg_Geometry_VectorInRectXY'{$ELSE}'sg_Geometry_VectorInRectXY'{$ENDIF},
    sg_Sprites_SpriteVisibleLayerIds name {$IFDEF DARWIN}'_sg_Sprites_SpriteVisibleLayerIds'{$ELSE}'sg_Sprites_SpriteVisibleLayerIds'{$ENDIF},
    sg_Images_BitmapWidthForCell name {$IFDEF DARWIN}'_sg_Images_BitmapWidthForCell'{$ELSE}'sg_Images_BitmapWidthForCell'{$ENDIF},
    sg_Images_SetupBitmapForCollisions name {$IFDEF DARWIN}'_sg_Images_SetupBitmapForCollisions'{$ELSE}'sg_Images_SetupBitmapForCollisions'{$ENDIF},
    sg_Graphics_ColorDarkGoldenrod name {$IFDEF DARWIN}'_sg_Graphics_ColorDarkGoldenrod'{$ELSE}'sg_Graphics_ColorDarkGoldenrod'{$ENDIF},
    sg_Graphics_DrawOrFillCircleOnto name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillCircleOnto'{$ELSE}'sg_Graphics_DrawOrFillCircleOnto'{$ENDIF},
    sg_Sprites_SpriteLayerName name {$IFDEF DARWIN}'_sg_Sprites_SpriteLayerName'{$ELSE}'sg_Sprites_SpriteLayerName'{$ENDIF},
    sg_Networking_CloseTCPHostSocket name {$IFDEF DARWIN}'_sg_Networking_CloseTCPHostSocket'{$ELSE}'sg_Networking_CloseTCPHostSocket'{$ENDIF},
    sg_Geometry_CalculateAngleBetweenSprites name {$IFDEF DARWIN}'_sg_Geometry_CalculateAngleBetweenSprites'{$ELSE}'sg_Geometry_CalculateAngleBetweenSprites'{$ENDIF},
    sg_Characters_CharacterAngleMinAt name {$IFDEF DARWIN}'_sg_Characters_CharacterAngleMinAt'{$ELSE}'sg_Characters_CharacterAngleMinAt'{$ENDIF},
    sg_Images_DrawBitmap name {$IFDEF DARWIN}'_sg_Images_DrawBitmap'{$ELSE}'sg_Images_DrawBitmap'{$ENDIF},
    sg_Graphics_DrawLineSegmentOnto name {$IFDEF DARWIN}'_sg_Graphics_DrawLineSegmentOnto'{$ELSE}'sg_Graphics_DrawLineSegmentOnto'{$ENDIF},
    sg_Graphics_ColorDarkSalmon name {$IFDEF DARWIN}'_sg_Graphics_ColorDarkSalmon'{$ELSE}'sg_Graphics_ColorDarkSalmon'{$ENDIF},
    sg_Geometry_ClosestPointOnLine name {$IFDEF DARWIN}'_sg_Geometry_ClosestPointOnLine'{$ELSE}'sg_Geometry_ClosestPointOnLine'{$ENDIF},
    sg_Input_AnyKeyPressed name {$IFDEF DARWIN}'_sg_Input_AnyKeyPressed'{$ELSE}'sg_Input_AnyKeyPressed'{$ENDIF},
    sg_UserInterface_CheckboxStateOnPanel name {$IFDEF DARWIN}'_sg_UserInterface_CheckboxStateOnPanel'{$ELSE}'sg_UserInterface_CheckboxStateOnPanel'{$ENDIF},
    sg_Text_DrawTextLinesInRectOnScreenWithFontNamedAndSize name {$IFDEF DARWIN}'_sg_Text_DrawTextLinesInRectOnScreenWithFontNamedAndSize'{$ELSE}'sg_Text_DrawTextLinesInRectOnScreenWithFontNamedAndSize'{$ENDIF},
    sg_Utils_RndUpto name {$IFDEF DARWIN}'_sg_Utils_RndUpto'{$ELSE}'sg_Utils_RndUpto'{$ENDIF},
    sg_Geometry_PointAt name {$IFDEF DARWIN}'_sg_Geometry_PointAt'{$ELSE}'sg_Geometry_PointAt'{$ENDIF},
    sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScriptNamed name {$IFDEF DARWIN}'_sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScriptNamed'{$ELSE}'sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScriptNamed'{$ENDIF},
    sg_Graphics_DrawPixelOnto name {$IFDEF DARWIN}'_sg_Graphics_DrawPixelOnto'{$ELSE}'sg_Graphics_DrawPixelOnto'{$ENDIF},
    sg_Animations_CreateAnimation name {$IFDEF DARWIN}'_sg_Animations_CreateAnimation'{$ELSE}'sg_Animations_CreateAnimation'{$ENDIF},
    sg_Geometry_TangentPoints name {$IFDEF DARWIN}'_sg_Geometry_TangentPoints'{$ELSE}'sg_Geometry_TangentPoints'{$ENDIF},
    sg_Audio_FreeSoundEffect name {$IFDEF DARWIN}'_sg_Audio_FreeSoundEffect'{$ELSE}'sg_Audio_FreeSoundEffect'{$ENDIF},
    sg_Sprites_CallOnSpriteEvent name {$IFDEF DARWIN}'_sg_Sprites_CallOnSpriteEvent'{$ELSE}'sg_Sprites_CallOnSpriteEvent'{$ENDIF},
    sg_UserInterface_ListBitmapCellIndex name {$IFDEF DARWIN}'_sg_UserInterface_ListBitmapCellIndex'{$ELSE}'sg_UserInterface_ListBitmapCellIndex'{$ENDIF},
    sg_Graphics_DrawOrFillEllipseOnScreen name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillEllipseOnScreen'{$ELSE}'sg_Graphics_DrawOrFillEllipseOnScreen'{$ENDIF},
    sg_Text_DrawTextLinesInRectOnScreen name {$IFDEF DARWIN}'_sg_Text_DrawTextLinesInRectOnScreen'{$ELSE}'sg_Text_DrawTextLinesInRectOnScreen'{$ENDIF},
    sg_UserInterface_ActiveRadioButtonIndexOnPanel name {$IFDEF DARWIN}'_sg_UserInterface_ActiveRadioButtonIndexOnPanel'{$ELSE}'sg_UserInterface_ActiveRadioButtonIndexOnPanel'{$ENDIF},
    sg_Graphics_PushClipRectForBitmap name {$IFDEF DARWIN}'_sg_Graphics_PushClipRectForBitmap'{$ELSE}'sg_Graphics_PushClipRectForBitmap'{$ENDIF},
    sg_Physics_CellBitmapCollision name {$IFDEF DARWIN}'_sg_Physics_CellBitmapCollision'{$ELSE}'sg_Physics_CellBitmapCollision'{$ENDIF},
    sg_Graphics_ColorMediumAquamarine name {$IFDEF DARWIN}'_sg_Graphics_ColorMediumAquamarine'{$ELSE}'sg_Graphics_ColorMediumAquamarine'{$ENDIF},
    sg_Images_DrawBitmapCellAtPoint name {$IFDEF DARWIN}'_sg_Images_DrawBitmapCellAtPoint'{$ELSE}'sg_Images_DrawBitmapCellAtPoint'{$ENDIF},
    sg_Sprites_SpriteBringLayerToFront name {$IFDEF DARWIN}'_sg_Sprites_SpriteBringLayerToFront'{$ELSE}'sg_Sprites_SpriteBringLayerToFront'{$ENDIF},
    sg_Input_MouseClicked name {$IFDEF DARWIN}'_sg_Input_MouseClicked'{$ELSE}'sg_Input_MouseClicked'{$ENDIF},
    sg_Graphics_ColorBeige name {$IFDEF DARWIN}'_sg_Graphics_ColorBeige'{$ELSE}'sg_Graphics_ColorBeige'{$ENDIF},
    sg_Graphics_RGBAFloatColor name {$IFDEF DARWIN}'_sg_Graphics_RGBAFloatColor'{$ELSE}'sg_Graphics_RGBAFloatColor'{$ENDIF},
    sg_Graphics_DrawOrFillTriangleStructOnScreen name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillTriangleStructOnScreen'{$ELSE}'sg_Graphics_DrawOrFillTriangleStructOnScreen'{$ENDIF},
    sg_Sprites_CreateLayeredSpriteWithAnimationScriptNamed name {$IFDEF DARWIN}'_sg_Sprites_CreateLayeredSpriteWithAnimationScriptNamed'{$ELSE}'sg_Sprites_CreateLayeredSpriteWithAnimationScriptNamed'{$ENDIF},
    sg_Images_BitmapCellCircleXY name {$IFDEF DARWIN}'_sg_Images_BitmapCellCircleXY'{$ELSE}'sg_Images_BitmapCellCircleXY'{$ENDIF},
    sg_UserInterface_TextboxSetTextToSingleFromId name {$IFDEF DARWIN}'_sg_UserInterface_TextboxSetTextToSingleFromId'{$ELSE}'sg_UserInterface_TextboxSetTextToSingleFromId'{$ENDIF},
    sg_Graphics_DrawOrFillEllipseInRectOnScreen name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillEllipseInRectOnScreen'{$ELSE}'sg_Graphics_DrawOrFillEllipseInRectOnScreen'{$ENDIF},
    sg_Sprites_SpriteLayerNamedCircle name {$IFDEF DARWIN}'_sg_Sprites_SpriteLayerNamedCircle'{$ELSE}'sg_Sprites_SpriteLayerNamedCircle'{$ENDIF},
    sg_Geometry_CreateVectorFromPointToRect name {$IFDEF DARWIN}'_sg_Geometry_CreateVectorFromPointToRect'{$ELSE}'sg_Geometry_CreateVectorFromPointToRect'{$ENDIF},
    sg_Images_LoadBitmapWithTransparentColor name {$IFDEF DARWIN}'_sg_Images_LoadBitmapWithTransparentColor'{$ELSE}'sg_Images_LoadBitmapWithTransparentColor'{$ENDIF},
    sg_Audio_MusicPlaying name {$IFDEF DARWIN}'_sg_Audio_MusicPlaying'{$ELSE}'sg_Audio_MusicPlaying'{$ENDIF},
    sg_Graphics_ColorPapayaWhip name {$IFDEF DARWIN}'_sg_Graphics_ColorPapayaWhip'{$ELSE}'sg_Graphics_ColorPapayaWhip'{$ENDIF},
    sg_UserInterface_ToggleShowPanel name {$IFDEF DARWIN}'_sg_UserInterface_ToggleShowPanel'{$ELSE}'sg_UserInterface_ToggleShowPanel'{$ENDIF},
    sg_Geometry_CalculateAngleBetween name {$IFDEF DARWIN}'_sg_Geometry_CalculateAngleBetween'{$ELSE}'sg_Geometry_CalculateAngleBetween'{$ENDIF},
    sg_Geometry_RectangleAfterMove name {$IFDEF DARWIN}'_sg_Geometry_RectangleAfterMove'{$ELSE}'sg_Geometry_RectangleAfterMove'{$ENDIF},
    sg_Sprites_SpriteHideLayerNamed name {$IFDEF DARWIN}'_sg_Sprites_SpriteHideLayerNamed'{$ELSE}'sg_Sprites_SpriteHideLayerNamed'{$ENDIF},
    sg_Geometry_SubtractVectors name {$IFDEF DARWIN}'_sg_Geometry_SubtractVectors'{$ELSE}'sg_Geometry_SubtractVectors'{$ENDIF},
    sg_Physics_CollideCircleRectangle name {$IFDEF DARWIN}'_sg_Physics_CollideCircleRectangle'{$ELSE}'sg_Physics_CollideCircleRectangle'{$ENDIF},
    sg_Networking_CreateUDPHost name {$IFDEF DARWIN}'_sg_Networking_CreateUDPHost'{$ELSE}'sg_Networking_CreateUDPHost'{$ENDIF},
    sg_Text_DrawTextWithFontNamedSize name {$IFDEF DARWIN}'_sg_Text_DrawTextWithFontNamedSize'{$ELSE}'sg_Text_DrawTextWithFontNamedSize'{$ENDIF},
    sg_UserInterface_ListItemCountOnPanelWithId name {$IFDEF DARWIN}'_sg_UserInterface_ListItemCountOnPanelWithId'{$ELSE}'sg_UserInterface_ListItemCountOnPanelWithId'{$ENDIF},
    sg_Input_HideMouse name {$IFDEF DARWIN}'_sg_Input_HideMouse'{$ELSE}'sg_Input_HideMouse'{$ENDIF},
    sg_Sprites_SpriteSetDY name {$IFDEF DARWIN}'_sg_Sprites_SpriteSetDY'{$ELSE}'sg_Sprites_SpriteSetDY'{$ENDIF},
    sg_Physics_BitmapPartPointXYCollision name {$IFDEF DARWIN}'_sg_Physics_BitmapPartPointXYCollision'{$ELSE}'sg_Physics_BitmapPartPointXYCollision'{$ENDIF},
    sg_UserInterface_ToggleCheckboxStateOnPanel name {$IFDEF DARWIN}'_sg_UserInterface_ToggleCheckboxStateOnPanel'{$ELSE}'sg_UserInterface_ToggleCheckboxStateOnPanel'{$ENDIF},
    sg_Networking_UDPMessageReceived name {$IFDEF DARWIN}'_sg_Networking_UDPMessageReceived'{$ELSE}'sg_Networking_UDPMessageReceived'{$ENDIF},
    sg_Sprites_SpriteAddToVelocity name {$IFDEF DARWIN}'_sg_Sprites_SpriteAddToVelocity'{$ELSE}'sg_Sprites_SpriteAddToVelocity'{$ENDIF},
    sg_Graphics_ColorSteelBlue name {$IFDEF DARWIN}'_sg_Graphics_ColorSteelBlue'{$ELSE}'sg_Graphics_ColorSteelBlue'{$ENDIF},
    sg_UserInterface_LabelTextOnPanelWithId name {$IFDEF DARWIN}'_sg_UserInterface_LabelTextOnPanelWithId'{$ELSE}'sg_UserInterface_LabelTextOnPanelWithId'{$ENDIF},
    sg_Graphics_ColorLightSalmon name {$IFDEF DARWIN}'_sg_Graphics_ColorLightSalmon'{$ELSE}'sg_Graphics_ColorLightSalmon'{$ENDIF},
    sg_Graphics_DrawLineSegmentOnScreen name {$IFDEF DARWIN}'_sg_Graphics_DrawLineSegmentOnScreen'{$ELSE}'sg_Graphics_DrawLineSegmentOnScreen'{$ENDIF},
    sg_Utils_Delay name {$IFDEF DARWIN}'_sg_Utils_Delay'{$ELSE}'sg_Utils_Delay'{$ENDIF},
    sg_Camera_CameraPos name {$IFDEF DARWIN}'_sg_Camera_CameraPos'{$ELSE}'sg_Camera_CameraPos'{$ENDIF},
    sg_Images_ReleaseAllBitmaps name {$IFDEF DARWIN}'_sg_Images_ReleaseAllBitmaps'{$ELSE}'sg_Images_ReleaseAllBitmaps'{$ENDIF},
    sg_UserInterface_ListAddItemByTextFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_ListAddItemByTextFromRegion'{$ELSE}'sg_UserInterface_ListAddItemByTextFromRegion'{$ENDIF},
    sg_Audio_FadeMusicOut name {$IFDEF DARWIN}'_sg_Audio_FadeMusicOut'{$ELSE}'sg_Audio_FadeMusicOut'{$ENDIF},
    sg_Sprites_SpriteHeight name {$IFDEF DARWIN}'_sg_Sprites_SpriteHeight'{$ELSE}'sg_Sprites_SpriteHeight'{$ENDIF},
    sg_Geometry_LineFromPointToPoint name {$IFDEF DARWIN}'_sg_Geometry_LineFromPointToPoint'{$ELSE}'sg_Geometry_LineFromPointToPoint'{$ENDIF},
    sg_Graphics_ColorOldLace name {$IFDEF DARWIN}'_sg_Graphics_ColorOldLace'{$ELSE}'sg_Graphics_ColorOldLace'{$ENDIF},
    sg_Geometry_PointAdd name {$IFDEF DARWIN}'_sg_Geometry_PointAdd'{$ELSE}'sg_Geometry_PointAdd'{$ENDIF},
    sg_Text_DrawTextOnScreenAtPointWithFontNamed name {$IFDEF DARWIN}'_sg_Text_DrawTextOnScreenAtPointWithFontNamed'{$ELSE}'sg_Text_DrawTextOnScreenAtPointWithFontNamed'{$ENDIF},
    sg_UserInterface_CheckboxStateFromCheckbox name {$IFDEF DARWIN}'_sg_UserInterface_CheckboxStateFromCheckbox'{$ELSE}'sg_UserInterface_CheckboxStateFromCheckbox'{$ENDIF},
    sg_UserInterface_PanelFilename name {$IFDEF DARWIN}'_sg_UserInterface_PanelFilename'{$ELSE}'sg_UserInterface_PanelFilename'{$ENDIF},
    sg_Geometry_RectangleFromLine name {$IFDEF DARWIN}'_sg_Geometry_RectangleFromLine'{$ELSE}'sg_Geometry_RectangleFromLine'{$ENDIF},
    sg_Animations_AnimationIndex name {$IFDEF DARWIN}'_sg_Animations_AnimationIndex'{$ELSE}'sg_Animations_AnimationIndex'{$ENDIF},
    sg_Graphics_ColorThistle name {$IFDEF DARWIN}'_sg_Graphics_ColorThistle'{$ELSE}'sg_Graphics_ColorThistle'{$ENDIF},
    sg_Audio_CloseAudio name {$IFDEF DARWIN}'_sg_Audio_CloseAudio'{$ELSE}'sg_Audio_CloseAudio'{$ENDIF},
    sg_Audio_MusicName name {$IFDEF DARWIN}'_sg_Audio_MusicName'{$ELSE}'sg_Audio_MusicName'{$ENDIF},
    sg_Graphics_ColorOrange name {$IFDEF DARWIN}'_sg_Graphics_ColorOrange'{$ELSE}'sg_Graphics_ColorOrange'{$ENDIF},
    sg_Sprites_SpriteSetMass name {$IFDEF DARWIN}'_sg_Sprites_SpriteSetMass'{$ELSE}'sg_Sprites_SpriteSetMass'{$ENDIF},
    sg_Sprites_SpriteSpeed name {$IFDEF DARWIN}'_sg_Sprites_SpriteSpeed'{$ELSE}'sg_Sprites_SpriteSpeed'{$ENDIF},
    sg_UserInterface_ListSetStartingAt name {$IFDEF DARWIN}'_sg_UserInterface_ListSetStartingAt'{$ELSE}'sg_UserInterface_ListSetStartingAt'{$ENDIF},
    sg_UserInterface_DeactivatePanel name {$IFDEF DARWIN}'_sg_UserInterface_DeactivatePanel'{$ELSE}'sg_UserInterface_DeactivatePanel'{$ENDIF},
    sg_UserInterface_ListSetActiveItemIndexWithId name {$IFDEF DARWIN}'_sg_UserInterface_ListSetActiveItemIndexWithId'{$ELSE}'sg_UserInterface_ListSetActiveItemIndexWithId'{$ENDIF},
    sg_Geometry_DistantPointOnCircleHeading name {$IFDEF DARWIN}'_sg_Geometry_DistantPointOnCircleHeading'{$ELSE}'sg_Geometry_DistantPointOnCircleHeading'{$ENDIF},
    sg_Graphics_ColorMediumSlateBlue name {$IFDEF DARWIN}'_sg_Graphics_ColorMediumSlateBlue'{$ELSE}'sg_Graphics_ColorMediumSlateBlue'{$ENDIF},
    sg_Images_SaveBitmap name {$IFDEF DARWIN}'_sg_Images_SaveBitmap'{$ELSE}'sg_Images_SaveBitmap'{$ENDIF},
    sg_Timers_ResumeTimer name {$IFDEF DARWIN}'_sg_Timers_ResumeTimer'{$ELSE}'sg_Timers_ResumeTimer'{$ENDIF},
    sg_Camera_CameraX name {$IFDEF DARWIN}'_sg_Camera_CameraX'{$ELSE}'sg_Camera_CameraX'{$ENDIF},
    sg_Graphics_ColorSkyBlue name {$IFDEF DARWIN}'_sg_Graphics_ColorSkyBlue'{$ELSE}'sg_Graphics_ColorSkyBlue'{$ENDIF},
    sg_Sprites_UpdateSpriteAnimationPctWithSound name {$IFDEF DARWIN}'_sg_Sprites_UpdateSpriteAnimationPctWithSound'{$ELSE}'sg_Sprites_UpdateSpriteAnimationPctWithSound'{$ENDIF},
    sg_Geometry_CreateVectorFromPointPtToRectangle name {$IFDEF DARWIN}'_sg_Geometry_CreateVectorFromPointPtToRectangle'{$ELSE}'sg_Geometry_CreateVectorFromPointPtToRectangle'{$ENDIF},
    sg_Text_FontNamed name {$IFDEF DARWIN}'_sg_Text_FontNamed'{$ELSE}'sg_Text_FontNamed'{$ENDIF},
    sg_Graphics_ColorHoneydew name {$IFDEF DARWIN}'_sg_Graphics_ColorHoneydew'{$ELSE}'sg_Graphics_ColorHoneydew'{$ENDIF},
    sg_Graphics_DrawLine name {$IFDEF DARWIN}'_sg_Graphics_DrawLine'{$ELSE}'sg_Graphics_DrawLine'{$ENDIF},
    sg_Graphics_ColorSeaShell name {$IFDEF DARWIN}'_sg_Graphics_ColorSeaShell'{$ELSE}'sg_Graphics_ColorSeaShell'{$ENDIF},
    sg_Graphics_ColorNavy name {$IFDEF DARWIN}'_sg_Graphics_ColorNavy'{$ELSE}'sg_Graphics_ColorNavy'{$ENDIF},
    sg_UserInterface_PanelSetDraggable name {$IFDEF DARWIN}'_sg_UserInterface_PanelSetDraggable'{$ELSE}'sg_UserInterface_PanelSetDraggable'{$ENDIF},
    sg_Sprites_SelectSpritePack name {$IFDEF DARWIN}'_sg_Sprites_SelectSpritePack'{$ELSE}'sg_Sprites_SelectSpritePack'{$ENDIF},
    sg_Animations_FreeAnimation name {$IFDEF DARWIN}'_sg_Animations_FreeAnimation'{$ELSE}'sg_Animations_FreeAnimation'{$ENDIF},
    sg_Graphics_ColorDarkBlue name {$IFDEF DARWIN}'_sg_Graphics_ColorDarkBlue'{$ELSE}'sg_Graphics_ColorDarkBlue'{$ENDIF},
    sg_Geometry_RectangleRight name {$IFDEF DARWIN}'_sg_Geometry_RectangleRight'{$ELSE}'sg_Geometry_RectangleRight'{$ENDIF},
    sg_UserInterface_ListRemoveActiveItemOnPanelWithId name {$IFDEF DARWIN}'_sg_UserInterface_ListRemoveActiveItemOnPanelWithId'{$ELSE}'sg_UserInterface_ListRemoveActiveItemOnPanelWithId'{$ENDIF},
    sg_Graphics_ColorCornsilk name {$IFDEF DARWIN}'_sg_Graphics_ColorCornsilk'{$ELSE}'sg_Graphics_ColorCornsilk'{$ENDIF},
    sg_UserInterface_GUITextBoxOfTextEntered name {$IFDEF DARWIN}'_sg_UserInterface_GUITextBoxOfTextEntered'{$ELSE}'sg_UserInterface_GUITextBoxOfTextEntered'{$ENDIF},
    sg_UserInterface_TextboxSetTextFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_TextboxSetTextFromRegion'{$ELSE}'sg_UserInterface_TextboxSetTextFromRegion'{$ENDIF},
    sg_Graphics_ColorDarkGray name {$IFDEF DARWIN}'_sg_Graphics_ColorDarkGray'{$ELSE}'sg_Graphics_ColorDarkGray'{$ENDIF},
    sg_Input_MouseX name {$IFDEF DARWIN}'_sg_Input_MouseX'{$ELSE}'sg_Input_MouseX'{$ENDIF},
    sg_Geometry_VectorOverLinesFromLines name {$IFDEF DARWIN}'_sg_Geometry_VectorOverLinesFromLines'{$ELSE}'sg_Geometry_VectorOverLinesFromLines'{$ENDIF},
    sg_Images_DrawBitmapCellAtPointOnScreen name {$IFDEF DARWIN}'_sg_Images_DrawBitmapCellAtPointOnScreen'{$ELSE}'sg_Images_DrawBitmapCellAtPointOnScreen'{$ENDIF},
    sg_Graphics_ColorComponents name {$IFDEF DARWIN}'_sg_Graphics_ColorComponents'{$ELSE}'sg_Graphics_ColorComponents'{$ENDIF},
    sg_Input_KeyReleased name {$IFDEF DARWIN}'_sg_Input_KeyReleased'{$ELSE}'sg_Input_KeyReleased'{$ENDIF},
    sg_Images_DrawCell name {$IFDEF DARWIN}'_sg_Images_DrawCell'{$ELSE}'sg_Images_DrawCell'{$ENDIF},
    sg_Physics_BitmapPartRectCollision name {$IFDEF DARWIN}'_sg_Physics_BitmapPartRectCollision'{$ELSE}'sg_Physics_BitmapPartRectCollision'{$ENDIF},
    sg_UserInterface_PanelX name {$IFDEF DARWIN}'_sg_UserInterface_PanelX'{$ELSE}'sg_UserInterface_PanelX'{$ENDIF},
    sg_Sprites_SpritePosition name {$IFDEF DARWIN}'_sg_Sprites_SpritePosition'{$ELSE}'sg_Sprites_SpritePosition'{$ENDIF},
    sg_Graphics_DrawVerticalLineOnScreen name {$IFDEF DARWIN}'_sg_Graphics_DrawVerticalLineOnScreen'{$ELSE}'sg_Graphics_DrawVerticalLineOnScreen'{$ENDIF},
    sg_Graphics_ColorDarkTurquoise name {$IFDEF DARWIN}'_sg_Graphics_ColorDarkTurquoise'{$ELSE}'sg_Graphics_ColorDarkTurquoise'{$ENDIF},
    sg_Geometry_FixRectangle name {$IFDEF DARWIN}'_sg_Geometry_FixRectangle'{$ELSE}'sg_Geometry_FixRectangle'{$ENDIF},
    sg_Resources_RegisterFreeNotifier name {$IFDEF DARWIN}'_sg_Resources_RegisterFreeNotifier'{$ELSE}'sg_Resources_RegisterFreeNotifier'{$ENDIF},
    sg_Sprites_SpriteMass name {$IFDEF DARWIN}'_sg_Sprites_SpriteMass'{$ELSE}'sg_Sprites_SpriteMass'{$ENDIF},
    sg_Geometry_VectorOutOfRectFromRect name {$IFDEF DARWIN}'_sg_Geometry_VectorOutOfRectFromRect'{$ELSE}'sg_Geometry_VectorOutOfRectFromRect'{$ENDIF},
    sg_Geometry_Tangent name {$IFDEF DARWIN}'_sg_Geometry_Tangent'{$ELSE}'sg_Geometry_Tangent'{$ENDIF},
    sg_Images_CreateBitmapNamed name {$IFDEF DARWIN}'_sg_Images_CreateBitmapNamed'{$ELSE}'sg_Images_CreateBitmapNamed'{$ENDIF},
    sg_Sprites_SpriteVelocity name {$IFDEF DARWIN}'_sg_Sprites_SpriteVelocity'{$ELSE}'sg_Sprites_SpriteVelocity'{$ENDIF},
    sg_Graphics_DrawOrFillCircleAtPoint name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillCircleAtPoint'{$ELSE}'sg_Graphics_DrawOrFillCircleAtPoint'{$ENDIF},
    sg_Graphics_DrawPixelOnScreen name {$IFDEF DARWIN}'_sg_Graphics_DrawPixelOnScreen'{$ELSE}'sg_Graphics_DrawPixelOnScreen'{$ENDIF},
    sg_Text_DrawTextLinesWithFontNamed name {$IFDEF DARWIN}'_sg_Text_DrawTextLinesWithFontNamed'{$ELSE}'sg_Text_DrawTextLinesWithFontNamed'{$ENDIF},
    sg_Timers_CreateTimer name {$IFDEF DARWIN}'_sg_Timers_CreateTimer'{$ELSE}'sg_Timers_CreateTimer'{$ENDIF},
    sg_Graphics_ColorHotPink name {$IFDEF DARWIN}'_sg_Graphics_ColorHotPink'{$ELSE}'sg_Graphics_ColorHotPink'{$ENDIF},
    sg_UserInterface_ListStartAt name {$IFDEF DARWIN}'_sg_UserInterface_ListStartAt'{$ELSE}'sg_UserInterface_ListStartAt'{$ENDIF},
    sg_Graphics_ColorAntiqueWhite name {$IFDEF DARWIN}'_sg_Graphics_ColorAntiqueWhite'{$ELSE}'sg_Graphics_ColorAntiqueWhite'{$ENDIF},
    sg_Audio_FadeMusicInWithLoops name {$IFDEF DARWIN}'_sg_Audio_FadeMusicInWithLoops'{$ELSE}'sg_Audio_FadeMusicInWithLoops'{$ENDIF},
    sg_Sprites_SpriteOffscreen name {$IFDEF DARWIN}'_sg_Sprites_SpriteOffscreen'{$ELSE}'sg_Sprites_SpriteOffscreen'{$ENDIF},
    sg_UserInterface_ListFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_ListFromRegion'{$ELSE}'sg_UserInterface_ListFromRegion'{$ENDIF},
    sg_Graphics_ResetClip name {$IFDEF DARWIN}'_sg_Graphics_ResetClip'{$ELSE}'sg_Graphics_ResetClip'{$ENDIF},
    sg_Graphics_ColorLightSkyBlue name {$IFDEF DARWIN}'_sg_Graphics_ColorLightSkyBlue'{$ELSE}'sg_Graphics_ColorLightSkyBlue'{$ENDIF},
    sg_Geometry_UnitVector name {$IFDEF DARWIN}'_sg_Geometry_UnitVector'{$ELSE}'sg_Geometry_UnitVector'{$ENDIF},
    sg_Networking_ReadMessage name {$IFDEF DARWIN}'_sg_Networking_ReadMessage'{$ELSE}'sg_Networking_ReadMessage'{$ENDIF},
    sg_Text_DrawTextLinesOnBitmapWithFontNamedAndSize name {$IFDEF DARWIN}'_sg_Text_DrawTextLinesOnBitmapWithFontNamedAndSize'{$ELSE}'sg_Text_DrawTextLinesOnBitmapWithFontNamedAndSize'{$ENDIF},
    sg_Geometry_VectorOverLinesFromCircle name {$IFDEF DARWIN}'_sg_Geometry_VectorOverLinesFromCircle'{$ELSE}'sg_Geometry_VectorOverLinesFromCircle'{$ENDIF},
    sg_UserInterface_TextboxTextOnPanelWithId name {$IFDEF DARWIN}'_sg_UserInterface_TextboxTextOnPanelWithId'{$ELSE}'sg_UserInterface_TextboxTextOnPanelWithId'{$ENDIF},
    sg_UserInterface_DialogPath name {$IFDEF DARWIN}'_sg_UserInterface_DialogPath'{$ELSE}'sg_UserInterface_DialogPath'{$ENDIF},
    sg_Images_BitmapCellRectangleAtOrigin name {$IFDEF DARWIN}'_sg_Images_BitmapCellRectangleAtOrigin'{$ELSE}'sg_Images_BitmapCellRectangleAtOrigin'{$ENDIF},
    sg_Resources_PathToResourseInSubdir name {$IFDEF DARWIN}'_sg_Resources_PathToResourseInSubdir'{$ELSE}'sg_Resources_PathToResourseInSubdir'{$ENDIF},
    sg_Geometry_TriangleBarycenter name {$IFDEF DARWIN}'_sg_Geometry_TriangleBarycenter'{$ELSE}'sg_Geometry_TriangleBarycenter'{$ENDIF},
    sg_Timers_ResetTimer name {$IFDEF DARWIN}'_sg_Timers_ResetTimer'{$ELSE}'sg_Timers_ResetTimer'{$ENDIF},
    sg_UserInterface_AddItemWithIdByBitmap name {$IFDEF DARWIN}'_sg_UserInterface_AddItemWithIdByBitmap'{$ELSE}'sg_UserInterface_AddItemWithIdByBitmap'{$ENDIF},
    sg_Characters_CharacterValueNames name {$IFDEF DARWIN}'_sg_Characters_CharacterValueNames'{$ELSE}'sg_Characters_CharacterValueNames'{$ENDIF},
    sg_Sprites_StopCallingOnSpriteEvent name {$IFDEF DARWIN}'_sg_Sprites_StopCallingOnSpriteEvent'{$ELSE}'sg_Sprites_StopCallingOnSpriteEvent'{$ENDIF},
    sg_Characters_CharacterType name {$IFDEF DARWIN}'_sg_Characters_CharacterType'{$ELSE}'sg_Characters_CharacterType'{$ENDIF},
    sg_Graphics_ColorMediumPurple name {$IFDEF DARWIN}'_sg_Graphics_ColorMediumPurple'{$ELSE}'sg_Graphics_ColorMediumPurple'{$ENDIF},
    sg_UserInterface_ListStartingAtFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_ListStartingAtFromRegion'{$ELSE}'sg_UserInterface_ListStartingAtFromRegion'{$ENDIF},
    sg_Animations_AssignAnimationWithSound name {$IFDEF DARWIN}'_sg_Animations_AssignAnimationWithSound'{$ELSE}'sg_Animations_AssignAnimationWithSound'{$ENDIF},
    sg_Camera_ToWorld name {$IFDEF DARWIN}'_sg_Camera_ToWorld'{$ELSE}'sg_Camera_ToWorld'{$ENDIF},
    sg_Graphics_ColorFirebrick name {$IFDEF DARWIN}'_sg_Graphics_ColorFirebrick'{$ELSE}'sg_Graphics_ColorFirebrick'{$ENDIF},
    sg_Characters_CharacterValueAt name {$IFDEF DARWIN}'_sg_Characters_CharacterValueAt'{$ELSE}'sg_Characters_CharacterValueAt'{$ENDIF},
    sg_Graphics_DrawHorizontalLine name {$IFDEF DARWIN}'_sg_Graphics_DrawHorizontalLine'{$ELSE}'sg_Graphics_DrawHorizontalLine'{$ENDIF},
    sg_Graphics_ColorLimeGreen name {$IFDEF DARWIN}'_sg_Graphics_ColorLimeGreen'{$ELSE}'sg_Graphics_ColorLimeGreen'{$ENDIF},
    sg_Geometry_TranslationMatrixPt name {$IFDEF DARWIN}'_sg_Geometry_TranslationMatrixPt'{$ELSE}'sg_Geometry_TranslationMatrixPt'{$ENDIF},
    sg_Input_StartReadingTextWithinArea name {$IFDEF DARWIN}'_sg_Input_StartReadingTextWithinArea'{$ELSE}'sg_Input_StartReadingTextWithinArea'{$ENDIF},
    sg_Graphics_ColorRed name {$IFDEF DARWIN}'_sg_Graphics_ColorRed'{$ELSE}'sg_Graphics_ColorRed'{$ENDIF},
    sg_Resources_FilenameToResource name {$IFDEF DARWIN}'_sg_Resources_FilenameToResource'{$ELSE}'sg_Resources_FilenameToResource'{$ENDIF},
    sg_Images_BitmapCellOf name {$IFDEF DARWIN}'_sg_Images_BitmapCellOf'{$ELSE}'sg_Images_BitmapCellOf'{$ENDIF},
    sg_UserInterface_ListItemCountWithId name {$IFDEF DARWIN}'_sg_UserInterface_ListItemCountWithId'{$ELSE}'sg_UserInterface_ListItemCountWithId'{$ENDIF},
    sg_Camera_CenterCameraOnCharacter name {$IFDEF DARWIN}'_sg_Camera_CenterCameraOnCharacter'{$ELSE}'sg_Camera_CenterCameraOnCharacter'{$ENDIF},
    sg_Input_StartReadingTextWithTextAtPt name {$IFDEF DARWIN}'_sg_Input_StartReadingTextWithTextAtPt'{$ELSE}'sg_Input_StartReadingTextWithTextAtPt'{$ENDIF},
    sg_Audio_FadeMusicNamedIn name {$IFDEF DARWIN}'_sg_Audio_FadeMusicNamedIn'{$ELSE}'sg_Audio_FadeMusicNamedIn'{$ENDIF},
    sg_Input_ReadingText name {$IFDEF DARWIN}'_sg_Input_ReadingText'{$ELSE}'sg_Input_ReadingText'{$ENDIF},
    sg_Characters_CharacterSetType name {$IFDEF DARWIN}'_sg_Characters_CharacterSetType'{$ELSE}'sg_Characters_CharacterSetType'{$ENDIF},
    sg_Geometry_PointXYLineDistance name {$IFDEF DARWIN}'_sg_Geometry_PointXYLineDistance'{$ELSE}'sg_Geometry_PointXYLineDistance'{$ENDIF},
    sg_Timers_PauseTimerNamed name {$IFDEF DARWIN}'_sg_Timers_PauseTimerNamed'{$ELSE}'sg_Timers_PauseTimerNamed'{$ENDIF},
    sg_Timers_CreateTimerNamed name {$IFDEF DARWIN}'_sg_Timers_CreateTimerNamed'{$ELSE}'sg_Timers_CreateTimerNamed'{$ENDIF},
    sg_Graphics_ColorLightGreen name {$IFDEF DARWIN}'_sg_Graphics_ColorLightGreen'{$ELSE}'sg_Graphics_ColorLightGreen'{$ENDIF},
    sg_UserInterface_HidePanelNamed name {$IFDEF DARWIN}'_sg_UserInterface_HidePanelNamed'{$ELSE}'sg_UserInterface_HidePanelNamed'{$ENDIF},
    sg_Images_BitmapRectXY name {$IFDEF DARWIN}'_sg_Images_BitmapRectXY'{$ELSE}'sg_Images_BitmapRectXY'{$ENDIF},
    sg_UserInterface_ListClearItemsGivenPanelWithId name {$IFDEF DARWIN}'_sg_UserInterface_ListClearItemsGivenPanelWithId'{$ELSE}'sg_UserInterface_ListClearItemsGivenPanelWithId'{$ENDIF},
    sg_Geometry_RandomScreenPoint name {$IFDEF DARWIN}'_sg_Geometry_RandomScreenPoint'{$ELSE}'sg_Geometry_RandomScreenPoint'{$ENDIF},
    sg_UserInterface_TextboxAlignment name {$IFDEF DARWIN}'_sg_UserInterface_TextboxAlignment'{$ELSE}'sg_UserInterface_TextboxAlignment'{$ENDIF},
    sg_Graphics_ColorLavender name {$IFDEF DARWIN}'_sg_Graphics_ColorLavender'{$ELSE}'sg_Graphics_ColorLavender'{$ENDIF},
    sg_Graphics_ColorOrchid name {$IFDEF DARWIN}'_sg_Graphics_ColorOrchid'{$ELSE}'sg_Graphics_ColorOrchid'{$ENDIF},
    sg_Graphics_ColorCrimson name {$IFDEF DARWIN}'_sg_Graphics_ColorCrimson'{$ELSE}'sg_Graphics_ColorCrimson'{$ENDIF},
    sg_Text_DrawSimpleTextPt name {$IFDEF DARWIN}'_sg_Text_DrawSimpleTextPt'{$ELSE}'sg_Text_DrawSimpleTextPt'{$ENDIF},
    sg_Geometry_DotProduct name {$IFDEF DARWIN}'_sg_Geometry_DotProduct'{$ELSE}'sg_Geometry_DotProduct'{$ENDIF},
    sg_Networking_MyIP name {$IFDEF DARWIN}'_sg_Networking_MyIP'{$ELSE}'sg_Networking_MyIP'{$ENDIF},
    sg_Physics_CellCollision name {$IFDEF DARWIN}'_sg_Physics_CellCollision'{$ELSE}'sg_Physics_CellCollision'{$ENDIF},
    sg_Timers_PauseTimer name {$IFDEF DARWIN}'_sg_Timers_PauseTimer'{$ELSE}'sg_Timers_PauseTimer'{$ENDIF},
    sg_Graphics_DrawTriangleOnScreen name {$IFDEF DARWIN}'_sg_Graphics_DrawTriangleOnScreen'{$ELSE}'sg_Graphics_DrawTriangleOnScreen'{$ENDIF},
    sg_Graphics_CurrentBmpClip name {$IFDEF DARWIN}'_sg_Graphics_CurrentBmpClip'{$ELSE}'sg_Graphics_CurrentBmpClip'{$ENDIF},
    sg_Sprites_SpriteToggleLayerVisible name {$IFDEF DARWIN}'_sg_Sprites_SpriteToggleLayerVisible'{$ELSE}'sg_Sprites_SpriteToggleLayerVisible'{$ENDIF},
    sg_Graphics_ColorBlueViolet name {$IFDEF DARWIN}'_sg_Graphics_ColorBlueViolet'{$ELSE}'sg_Graphics_ColorBlueViolet'{$ENDIF},
    sg_Arduino_ArduinoDeviceNamed name {$IFDEF DARWIN}'_sg_Arduino_ArduinoDeviceNamed'{$ELSE}'sg_Arduino_ArduinoDeviceNamed'{$ENDIF},
    sg_Animations_DrawAnimationOntoDest name {$IFDEF DARWIN}'_sg_Animations_DrawAnimationOntoDest'{$ELSE}'sg_Animations_DrawAnimationOntoDest'{$ENDIF},
    sg_Graphics_ColorLightGray name {$IFDEF DARWIN}'_sg_Graphics_ColorLightGray'{$ELSE}'sg_Graphics_ColorLightGray'{$ENDIF},
    sg_UserInterface_LabelTextWithId name {$IFDEF DARWIN}'_sg_UserInterface_LabelTextWithId'{$ELSE}'sg_UserInterface_LabelTextWithId'{$ENDIF},
    sg_UserInterface_ListBitmapIndex name {$IFDEF DARWIN}'_sg_UserInterface_ListBitmapIndex'{$ELSE}'sg_UserInterface_ListBitmapIndex'{$ENDIF},
    sg_Geometry_PointInRect name {$IFDEF DARWIN}'_sg_Geometry_PointInRect'{$ELSE}'sg_Geometry_PointInRect'{$ENDIF},
    sg_Graphics_ColorGhostWhite name {$IFDEF DARWIN}'_sg_Graphics_ColorGhostWhite'{$ELSE}'sg_Graphics_ColorGhostWhite'{$ENDIF},
    sg_Audio_MusicNamed name {$IFDEF DARWIN}'_sg_Audio_MusicNamed'{$ELSE}'sg_Audio_MusicNamed'{$ENDIF},
    sg_Sprites_SpriteStartAnimationWithSound name {$IFDEF DARWIN}'_sg_Sprites_SpriteStartAnimationWithSound'{$ELSE}'sg_Sprites_SpriteStartAnimationWithSound'{$ENDIF},
    sg_Text_FontNamedWithSize name {$IFDEF DARWIN}'_sg_Text_FontNamedWithSize'{$ELSE}'sg_Text_FontNamedWithSize'{$ENDIF},
    sg_Sprites_SpriteLayerRectangle name {$IFDEF DARWIN}'_sg_Sprites_SpriteLayerRectangle'{$ELSE}'sg_Sprites_SpriteLayerRectangle'{$ENDIF},
    sg_Images_DrawBitmapPartFromRectOnScreen name {$IFDEF DARWIN}'_sg_Images_DrawBitmapPartFromRectOnScreen'{$ELSE}'sg_Images_DrawBitmapPartFromRectOnScreen'{$ENDIF},
    sg_Images_BitmapWidth name {$IFDEF DARWIN}'_sg_Images_BitmapWidth'{$ELSE}'sg_Images_BitmapWidth'{$ENDIF},
    sg_Timers_ReleaseAllTimers name {$IFDEF DARWIN}'_sg_Timers_ReleaseAllTimers'{$ELSE}'sg_Timers_ReleaseAllTimers'{$ENDIF},
    sg_Geometry_CreateLineAsVector name {$IFDEF DARWIN}'_sg_Geometry_CreateLineAsVector'{$ELSE}'sg_Geometry_CreateLineAsVector'{$ENDIF},
    sg_Geometry_TriangleFromPoints name {$IFDEF DARWIN}'_sg_Geometry_TriangleFromPoints'{$ELSE}'sg_Geometry_TriangleFromPoints'{$ENDIF},
    sg_UserInterface_ListItemTextOnPanelWithId name {$IFDEF DARWIN}'_sg_UserInterface_ListItemTextOnPanelWithId'{$ELSE}'sg_UserInterface_ListItemTextOnPanelWithId'{$ENDIF},
    sg_Audio_LoadMusic name {$IFDEF DARWIN}'_sg_Audio_LoadMusic'{$ELSE}'sg_Audio_LoadMusic'{$ENDIF},
    sg_Geometry_DistantPointOnCircle name {$IFDEF DARWIN}'_sg_Geometry_DistantPointOnCircle'{$ELSE}'sg_Geometry_DistantPointOnCircle'{$ENDIF},
    sg_Sprites_SpriteStopCallingOnEvent name {$IFDEF DARWIN}'_sg_Sprites_SpriteStopCallingOnEvent'{$ELSE}'sg_Sprites_SpriteStopCallingOnEvent'{$ENDIF},
    sg_Graphics_DrawOrFillTriangleStructOnto name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillTriangleStructOnto'{$ELSE}'sg_Graphics_DrawOrFillTriangleStructOnto'{$ENDIF},
    sg_Characters_UpdateDirectionAnimation name {$IFDEF DARWIN}'_sg_Characters_UpdateDirectionAnimation'{$ELSE}'sg_Characters_UpdateDirectionAnimation'{$ENDIF},
    sg_UserInterface_PanelHeight name {$IFDEF DARWIN}'_sg_UserInterface_PanelHeight'{$ELSE}'sg_UserInterface_PanelHeight'{$ENDIF},
    sg_Geometry_CircleFromXY name {$IFDEF DARWIN}'_sg_Geometry_CircleFromXY'{$ELSE}'sg_Geometry_CircleFromXY'{$ENDIF},
    sg_Images_ClearSurface name {$IFDEF DARWIN}'_sg_Images_ClearSurface'{$ELSE}'sg_Images_ClearSurface'{$ENDIF},
    sg_Geometry_InvertVector name {$IFDEF DARWIN}'_sg_Geometry_InvertVector'{$ELSE}'sg_Geometry_InvertVector'{$ENDIF},
    sg_Sprites_SpriteLayerWidth name {$IFDEF DARWIN}'_sg_Sprites_SpriteLayerWidth'{$ELSE}'sg_Sprites_SpriteLayerWidth'{$ENDIF},
    sg_Geometry_VectorsEqual name {$IFDEF DARWIN}'_sg_Geometry_VectorsEqual'{$ELSE}'sg_Geometry_VectorsEqual'{$ENDIF},
    sg_Graphics_ColorCadetBlue name {$IFDEF DARWIN}'_sg_Graphics_ColorCadetBlue'{$ELSE}'sg_Graphics_ColorCadetBlue'{$ENDIF},
    sg_Geometry_RectangleCenter name {$IFDEF DARWIN}'_sg_Geometry_RectangleCenter'{$ELSE}'sg_Geometry_RectangleCenter'{$ENDIF},
    sg_Text_DrawSimpleText name {$IFDEF DARWIN}'_sg_Text_DrawSimpleText'{$ELSE}'sg_Text_DrawSimpleText'{$ENDIF},
    sg_Sprites_SpriteCollisionKind name {$IFDEF DARWIN}'_sg_Sprites_SpriteCollisionKind'{$ELSE}'sg_Sprites_SpriteCollisionKind'{$ENDIF},
    sg_Camera_ToScreen name {$IFDEF DARWIN}'_sg_Camera_ToScreen'{$ELSE}'sg_Camera_ToScreen'{$ENDIF},
    sg_Geometry_CreateLineVectorWithStartPoint name {$IFDEF DARWIN}'_sg_Geometry_CreateLineVectorWithStartPoint'{$ELSE}'sg_Geometry_CreateLineVectorWithStartPoint'{$ENDIF},
    sg_Graphics_ChangeScreenSize name {$IFDEF DARWIN}'_sg_Graphics_ChangeScreenSize'{$ELSE}'sg_Graphics_ChangeScreenSize'{$ENDIF},
    sg_Animations_UpdateAnimationPct name {$IFDEF DARWIN}'_sg_Animations_UpdateAnimationPct'{$ELSE}'sg_Animations_UpdateAnimationPct'{$ENDIF},
    sg_UserInterface_RadioGroupOnPanelWidthId name {$IFDEF DARWIN}'_sg_UserInterface_RadioGroupOnPanelWidthId'{$ELSE}'sg_UserInterface_RadioGroupOnPanelWidthId'{$ENDIF},
    sg_Audio_StopSoundEffectNamed name {$IFDEF DARWIN}'_sg_Audio_StopSoundEffectNamed'{$ELSE}'sg_Audio_StopSoundEffectNamed'{$ENDIF},
    sg_UserInterface_ShowPanelDialog name {$IFDEF DARWIN}'_sg_UserInterface_ShowPanelDialog'{$ELSE}'sg_UserInterface_ShowPanelDialog'{$ENDIF},
    sg_Geometry_ClosestPointOnRectFromCircle name {$IFDEF DARWIN}'_sg_Geometry_ClosestPointOnRectFromCircle'{$ELSE}'sg_Geometry_ClosestPointOnRectFromCircle'{$ENDIF},
    sg_Audio_FreeMusic name {$IFDEF DARWIN}'_sg_Audio_FreeMusic'{$ELSE}'sg_Audio_FreeMusic'{$ENDIF},
    sg_Graphics_RandomColor name {$IFDEF DARWIN}'_sg_Graphics_RandomColor'{$ELSE}'sg_Graphics_RandomColor'{$ENDIF},
    sg_Sprites_SpriteLayerOffsets name {$IFDEF DARWIN}'_sg_Sprites_SpriteLayerOffsets'{$ELSE}'sg_Sprites_SpriteLayerOffsets'{$ENDIF},
    sg_Graphics_SetClipXY name {$IFDEF DARWIN}'_sg_Graphics_SetClipXY'{$ELSE}'sg_Graphics_SetClipXY'{$ENDIF},
    sg_UserInterface_ToggleCheckboxStateFromID name {$IFDEF DARWIN}'_sg_UserInterface_ToggleCheckboxStateFromID'{$ELSE}'sg_UserInterface_ToggleCheckboxStateFromID'{$ENDIF},
    sg_Images_BitmapCellRectangle name {$IFDEF DARWIN}'_sg_Images_BitmapCellRectangle'{$ELSE}'sg_Images_BitmapCellRectangle'{$ENDIF},
    sg_UserInterface_ListRemoveActiveItemFromId name {$IFDEF DARWIN}'_sg_UserInterface_ListRemoveActiveItemFromId'{$ELSE}'sg_UserInterface_ListRemoveActiveItemFromId'{$ENDIF},
    sg_Geometry_LineMagnitudeSqFromLine name {$IFDEF DARWIN}'_sg_Geometry_LineMagnitudeSqFromLine'{$ELSE}'sg_Geometry_LineMagnitudeSqFromLine'{$ENDIF},
    sg_UserInterface_ListActiveItemTextFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_ListActiveItemTextFromRegion'{$ELSE}'sg_UserInterface_ListActiveItemTextFromRegion'{$ENDIF},
    sg_Graphics_DrawPixelAtPoint name {$IFDEF DARWIN}'_sg_Graphics_DrawPixelAtPoint'{$ELSE}'sg_Graphics_DrawPixelAtPoint'{$ENDIF},
    sg_Graphics_ColorLinen name {$IFDEF DARWIN}'_sg_Graphics_ColorLinen'{$ELSE}'sg_Graphics_ColorLinen'{$ENDIF},
    sg_UserInterface_HasPanel name {$IFDEF DARWIN}'_sg_UserInterface_HasPanel'{$ELSE}'sg_UserInterface_HasPanel'{$ENDIF},
    sg_Graphics_ColorIndianRed name {$IFDEF DARWIN}'_sg_Graphics_ColorIndianRed'{$ELSE}'sg_Graphics_ColorIndianRed'{$ENDIF},
    sg_Sprites_SpriteLayerNamedRectangle name {$IFDEF DARWIN}'_sg_Sprites_SpriteLayerNamedRectangle'{$ELSE}'sg_Sprites_SpriteLayerNamedRectangle'{$ENDIF},
    sg_Graphics_ColorMediumSeaGreen name {$IFDEF DARWIN}'_sg_Graphics_ColorMediumSeaGreen'{$ELSE}'sg_Graphics_ColorMediumSeaGreen'{$ENDIF},
    sg_UserInterface_TextBoxAlignmentFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_TextBoxAlignmentFromRegion'{$ELSE}'sg_UserInterface_TextBoxAlignmentFromRegion'{$ENDIF},
    sg_UserInterface_ListActiveItemIndexWithId name {$IFDEF DARWIN}'_sg_UserInterface_ListActiveItemIndexWithId'{$ELSE}'sg_UserInterface_ListActiveItemIndexWithId'{$ENDIF},
    sg_Camera_SetCameraX name {$IFDEF DARWIN}'_sg_Camera_SetCameraX'{$ELSE}'sg_Camera_SetCameraX'{$ENDIF},
    sg_Geometry_VectorMagnitudeSq name {$IFDEF DARWIN}'_sg_Geometry_VectorMagnitudeSq'{$ELSE}'sg_Geometry_VectorMagnitudeSq'{$ENDIF},
    sg_Sprites_CreateBasicSpritePt name {$IFDEF DARWIN}'_sg_Sprites_CreateBasicSpritePt'{$ELSE}'sg_Sprites_CreateBasicSpritePt'{$ENDIF},
    sg_Geometry_PointPointDistance name {$IFDEF DARWIN}'_sg_Geometry_PointPointDistance'{$ELSE}'sg_Geometry_PointPointDistance'{$ENDIF},
    sg_Graphics_ScreenWidth name {$IFDEF DARWIN}'_sg_Graphics_ScreenWidth'{$ELSE}'sg_Graphics_ScreenWidth'{$ENDIF},
    sg_Utils_GetTicks name {$IFDEF DARWIN}'_sg_Utils_GetTicks'{$ELSE}'sg_Utils_GetTicks'{$ENDIF},
    sg_Physics_CollideCircleCircle name {$IFDEF DARWIN}'_sg_Physics_CollideCircleCircle'{$ELSE}'sg_Physics_CollideCircleCircle'{$ENDIF},
    sg_Geometry_CreateRectangleLine name {$IFDEF DARWIN}'_sg_Geometry_CreateRectangleLine'{$ELSE}'sg_Geometry_CreateRectangleLine'{$ENDIF},
    sg_Graphics_DrawLineSegments name {$IFDEF DARWIN}'_sg_Graphics_DrawLineSegments'{$ELSE}'sg_Graphics_DrawLineSegments'{$ENDIF},
    sg_Text_DrawTextLinesInRectWithFontNamed name {$IFDEF DARWIN}'_sg_Text_DrawTextLinesInRectWithFontNamed'{$ELSE}'sg_Text_DrawTextLinesInRectWithFontNamed'{$ENDIF},
    sg_Sprites_SpriteValueNamed name {$IFDEF DARWIN}'_sg_Sprites_SpriteValueNamed'{$ELSE}'sg_Sprites_SpriteValueNamed'{$ENDIF},
    sg_Geometry_VectorFromPointToRectangle name {$IFDEF DARWIN}'_sg_Geometry_VectorFromPointToRectangle'{$ELSE}'sg_Geometry_VectorFromPointToRectangle'{$ENDIF},
    sg_Geometry_VectorInRect name {$IFDEF DARWIN}'_sg_Geometry_VectorInRect'{$ELSE}'sg_Geometry_VectorInRect'{$ENDIF},
    sg_Physics_SpriteRectCollision name {$IFDEF DARWIN}'_sg_Physics_SpriteRectCollision'{$ELSE}'sg_Physics_SpriteRectCollision'{$ENDIF},
    sg_Graphics_ColorSeaGreen name {$IFDEF DARWIN}'_sg_Graphics_ColorSeaGreen'{$ELSE}'sg_Graphics_ColorSeaGreen'{$ENDIF},
    sg_Networking_MessageCount name {$IFDEF DARWIN}'_sg_Networking_MessageCount'{$ELSE}'sg_Networking_MessageCount'{$ENDIF},
    sg_Sprites_SpriteSetValueNamed name {$IFDEF DARWIN}'_sg_Sprites_SpriteSetValueNamed'{$ELSE}'sg_Sprites_SpriteSetValueNamed'{$ENDIF},
    sg_Graphics_ColorDarkKhaki name {$IFDEF DARWIN}'_sg_Graphics_ColorDarkKhaki'{$ELSE}'sg_Graphics_ColorDarkKhaki'{$ENDIF},
    sg_Characters_CharacterSetName name {$IFDEF DARWIN}'_sg_Characters_CharacterSetName'{$ELSE}'sg_Characters_CharacterSetName'{$ENDIF},
    sg_Characters_CharacterShownLayersAt name {$IFDEF DARWIN}'_sg_Characters_CharacterShownLayersAt'{$ELSE}'sg_Characters_CharacterShownLayersAt'{$ENDIF},
    sg_UserInterface_ListWithIDAddBitmapWithTextItem name {$IFDEF DARWIN}'_sg_UserInterface_ListWithIDAddBitmapWithTextItem'{$ELSE}'sg_UserInterface_ListWithIDAddBitmapWithTextItem'{$ENDIF},
    sg_Physics_CellBitmapCollisionAtPt name {$IFDEF DARWIN}'_sg_Physics_CellBitmapCollisionAtPt'{$ELSE}'sg_Physics_CellBitmapCollisionAtPt'{$ENDIF},
    sg_UserInterface_ListItemText name {$IFDEF DARWIN}'_sg_UserInterface_ListItemText'{$ELSE}'sg_UserInterface_ListItemText'{$ENDIF},
    sg_Input_DeviceMovedInZAxis name {$IFDEF DARWIN}'_sg_Input_DeviceMovedInZAxis'{$ELSE}'sg_Input_DeviceMovedInZAxis'{$ENDIF},
    sg_UserInterface_ListTextIndex name {$IFDEF DARWIN}'_sg_UserInterface_ListTextIndex'{$ELSE}'sg_UserInterface_ListTextIndex'{$ENDIF},
    sg_UserInterface_ListAddItemWithCellFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_ListAddItemWithCellFromRegion'{$ELSE}'sg_UserInterface_ListAddItemWithCellFromRegion'{$ENDIF},
    sg_Sprites_SpriteCallOnEvent name {$IFDEF DARWIN}'_sg_Sprites_SpriteCallOnEvent'{$ELSE}'sg_Sprites_SpriteCallOnEvent'{$ENDIF},
    sg_Sprites_SpriteCircle name {$IFDEF DARWIN}'_sg_Sprites_SpriteCircle'{$ELSE}'sg_Sprites_SpriteCircle'{$ENDIF},
    sg_Physics_SpriteCircleLineCollision name {$IFDEF DARWIN}'_sg_Physics_SpriteCircleLineCollision'{$ELSE}'sg_Physics_SpriteCircleLineCollision'{$ENDIF},
    sg_Geometry_CircleX name {$IFDEF DARWIN}'_sg_Geometry_CircleX'{$ELSE}'sg_Geometry_CircleX'{$ENDIF},
    sg_Sprites_SpriteLayerCount name {$IFDEF DARWIN}'_sg_Sprites_SpriteLayerCount'{$ELSE}'sg_Sprites_SpriteLayerCount'{$ENDIF},
    sg_Physics_BitmapPointCollision name {$IFDEF DARWIN}'_sg_Physics_BitmapPointCollision'{$ELSE}'sg_Physics_BitmapPointCollision'{$ENDIF},
    sg_Geometry_CreateCircleFromXY name {$IFDEF DARWIN}'_sg_Geometry_CreateCircleFromXY'{$ELSE}'sg_Geometry_CreateCircleFromXY'{$ENDIF},
    sg_Graphics_ColorLightSlateGray name {$IFDEF DARWIN}'_sg_Graphics_ColorLightSlateGray'{$ELSE}'sg_Graphics_ColorLightSlateGray'{$ENDIF},
    sg_Sprites_DrawSpriteOffsetXY name {$IFDEF DARWIN}'_sg_Sprites_DrawSpriteOffsetXY'{$ELSE}'sg_Sprites_DrawSpriteOffsetXY'{$ENDIF},
    sg_Audio_PlaySoundEffectWithLoopAndVolume name {$IFDEF DARWIN}'_sg_Audio_PlaySoundEffectWithLoopAndVolume'{$ELSE}'sg_Audio_PlaySoundEffectWithLoopAndVolume'{$ENDIF},
    sg_Sprites_SpriteStartAnimationNamed name {$IFDEF DARWIN}'_sg_Sprites_SpriteStartAnimationNamed'{$ELSE}'sg_Sprites_SpriteStartAnimationNamed'{$ENDIF},
    sg_Text_HasFont name {$IFDEF DARWIN}'_sg_Text_HasFont'{$ELSE}'sg_Text_HasFont'{$ENDIF},
    sg_Images_DrawBitmapPartFromRectOnto name {$IFDEF DARWIN}'_sg_Images_DrawBitmapPartFromRectOnto'{$ELSE}'sg_Images_DrawBitmapPartFromRectOnto'{$ENDIF},
    sg_Graphics_PushClipRect name {$IFDEF DARWIN}'_sg_Graphics_PushClipRect'{$ELSE}'sg_Graphics_PushClipRect'{$ENDIF},
    sg_Physics_CollideCircles name {$IFDEF DARWIN}'_sg_Physics_CollideCircles'{$ELSE}'sg_Physics_CollideCircles'{$ENDIF},
    sg_Audio_OpenAudio name {$IFDEF DARWIN}'_sg_Audio_OpenAudio'{$ELSE}'sg_Audio_OpenAudio'{$ENDIF},
    sg_Graphics_ColorGreenYellow name {$IFDEF DARWIN}'_sg_Graphics_ColorGreenYellow'{$ELSE}'sg_Graphics_ColorGreenYellow'{$ENDIF},
    sg_Graphics_ClearScreen name {$IFDEF DARWIN}'_sg_Graphics_ClearScreen'{$ELSE}'sg_Graphics_ClearScreen'{$ENDIF},
    sg_Graphics_ClearScreenTo name {$IFDEF DARWIN}'_sg_Graphics_ClearScreenTo'{$ELSE}'sg_Graphics_ClearScreenTo'{$ENDIF},
    sg_Graphics_ColorDarkSlateBlue name {$IFDEF DARWIN}'_sg_Graphics_ColorDarkSlateBlue'{$ELSE}'sg_Graphics_ColorDarkSlateBlue'{$ENDIF},
    sg_Arduino_ArduinoReadLineTimeout name {$IFDEF DARWIN}'_sg_Arduino_ArduinoReadLineTimeout'{$ELSE}'sg_Arduino_ArduinoReadLineTimeout'{$ENDIF},
    sg_Sprites_SpriteSendLayerBackward name {$IFDEF DARWIN}'_sg_Sprites_SpriteSendLayerBackward'{$ELSE}'sg_Sprites_SpriteSendLayerBackward'{$ENDIF},
    sg_UserInterface_LabelFromRegionSetText name {$IFDEF DARWIN}'_sg_UserInterface_LabelFromRegionSetText'{$ELSE}'sg_UserInterface_LabelFromRegionSetText'{$ENDIF},
    sg_Input_MousePosition name {$IFDEF DARWIN}'_sg_Input_MousePosition'{$ELSE}'sg_Input_MousePosition'{$ENDIF},
    sg_UserInterface_TextBoxText name {$IFDEF DARWIN}'_sg_UserInterface_TextBoxText'{$ELSE}'sg_UserInterface_TextBoxText'{$ENDIF},
    sg_Arduino_ArduinoHasData name {$IFDEF DARWIN}'_sg_Arduino_ArduinoHasData'{$ELSE}'sg_Arduino_ArduinoHasData'{$ENDIF},
    sg_Geometry_LinesRectIntersect name {$IFDEF DARWIN}'_sg_Geometry_LinesRectIntersect'{$ELSE}'sg_Geometry_LinesRectIntersect'{$ENDIF},
    sg_Text_DrawTextLinesOnBitmap name {$IFDEF DARWIN}'_sg_Text_DrawTextLinesOnBitmap'{$ELSE}'sg_Text_DrawTextLinesOnBitmap'{$ENDIF},
    sg_UserInterface_LabelFromRegionGetFont name {$IFDEF DARWIN}'_sg_UserInterface_LabelFromRegionGetFont'{$ELSE}'sg_UserInterface_LabelFromRegionGetFont'{$ENDIF},
    sg_Geometry_CreateRectangle name {$IFDEF DARWIN}'_sg_Geometry_CreateRectangle'{$ELSE}'sg_Geometry_CreateRectangle'{$ENDIF},
    sg_UserInterface_ListSetActiveItemIndex name {$IFDEF DARWIN}'_sg_UserInterface_ListSetActiveItemIndex'{$ELSE}'sg_UserInterface_ListSetActiveItemIndex'{$ENDIF},
    sg_Images_HasBitmap name {$IFDEF DARWIN}'_sg_Images_HasBitmap'{$ELSE}'sg_Images_HasBitmap'{$ENDIF},
    sg_Graphics_ColorMaroon name {$IFDEF DARWIN}'_sg_Graphics_ColorMaroon'{$ELSE}'sg_Graphics_ColorMaroon'{$ENDIF},
    sg_Graphics_ColorAliceBlue name {$IFDEF DARWIN}'_sg_Graphics_ColorAliceBlue'{$ELSE}'sg_Graphics_ColorAliceBlue'{$ENDIF},
    sg_Images_DrawCellOntoXY name {$IFDEF DARWIN}'_sg_Images_DrawCellOntoXY'{$ELSE}'sg_Images_DrawCellOntoXY'{$ENDIF},
    sg_Networking_ConnectionPort name {$IFDEF DARWIN}'_sg_Networking_ConnectionPort'{$ELSE}'sg_Networking_ConnectionPort'{$ENDIF},
    sg_Physics_CellRectCollisionAtPt name {$IFDEF DARWIN}'_sg_Physics_CellRectCollisionAtPt'{$ELSE}'sg_Physics_CellRectCollisionAtPt'{$ENDIF},
    sg_Geometry_RectangleFrom name {$IFDEF DARWIN}'_sg_Geometry_RectangleFrom'{$ELSE}'sg_Geometry_RectangleFrom'{$ENDIF},
    sg_Graphics_ColorMistyRose name {$IFDEF DARWIN}'_sg_Graphics_ColorMistyRose'{$ELSE}'sg_Graphics_ColorMistyRose'{$ENDIF},
    sg_Geometry_LineMidPoint name {$IFDEF DARWIN}'_sg_Geometry_LineMidPoint'{$ELSE}'sg_Geometry_LineMidPoint'{$ENDIF},
    sg_Graphics_ColorPurple name {$IFDEF DARWIN}'_sg_Graphics_ColorPurple'{$ELSE}'sg_Graphics_ColorPurple'{$ENDIF},
    sg_Graphics_ColorBisque name {$IFDEF DARWIN}'_sg_Graphics_ColorBisque'{$ELSE}'sg_Graphics_ColorBisque'{$ENDIF},
    sg_Graphics_DrawThickLine name {$IFDEF DARWIN}'_sg_Graphics_DrawThickLine'{$ELSE}'sg_Graphics_DrawThickLine'{$ENDIF},
    sg_UserInterface_ListAddItemWithCellAndTextFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_ListAddItemWithCellAndTextFromRegion'{$ELSE}'sg_UserInterface_ListAddItemWithCellAndTextFromRegion'{$ENDIF},
    sg_Geometry_RectangleBottomRight name {$IFDEF DARWIN}'_sg_Geometry_RectangleBottomRight'{$ELSE}'sg_Geometry_RectangleBottomRight'{$ENDIF},
    sg_UserInterface_SelectRadioButtonWithID name {$IFDEF DARWIN}'_sg_UserInterface_SelectRadioButtonWithID'{$ELSE}'sg_UserInterface_SelectRadioButtonWithID'{$ENDIF},
    sg_Graphics_RandomRGBColor name {$IFDEF DARWIN}'_sg_Graphics_RandomRGBColor'{$ELSE}'sg_Graphics_RandomRGBColor'{$ENDIF},
    sg_Text_DrawFramerateFontNamedSize name {$IFDEF DARWIN}'_sg_Text_DrawFramerateFontNamedSize'{$ELSE}'sg_Text_DrawFramerateFontNamedSize'{$ENDIF},
    sg_Geometry_ApplyMatrixToPoints name {$IFDEF DARWIN}'_sg_Geometry_ApplyMatrixToPoints'{$ELSE}'sg_Geometry_ApplyMatrixToPoints'{$ENDIF},
    sg_Images_BitmapNamed name {$IFDEF DARWIN}'_sg_Images_BitmapNamed'{$ELSE}'sg_Images_BitmapNamed'{$ENDIF},
    sg_Arduino_ArduinoSendByte name {$IFDEF DARWIN}'_sg_Arduino_ArduinoSendByte'{$ELSE}'sg_Arduino_ArduinoSendByte'{$ENDIF},
    sg_Images_DrawCellOnScreen name {$IFDEF DARWIN}'_sg_Images_DrawCellOnScreen'{$ELSE}'sg_Images_DrawCellOnScreen'{$ENDIF},
    sg_Camera_MoveCameraBy name {$IFDEF DARWIN}'_sg_Camera_MoveCameraBy'{$ELSE}'sg_Camera_MoveCameraBy'{$ENDIF},
    sg_Audio_SoundEffectFilename name {$IFDEF DARWIN}'_sg_Audio_SoundEffectFilename'{$ELSE}'sg_Audio_SoundEffectFilename'{$ENDIF},
    sg_UserInterface_FreePanel name {$IFDEF DARWIN}'_sg_UserInterface_FreePanel'{$ELSE}'sg_UserInterface_FreePanel'{$ENDIF},
    sg_UserInterface_PanelNamedWidth name {$IFDEF DARWIN}'_sg_UserInterface_PanelNamedWidth'{$ELSE}'sg_UserInterface_PanelNamedWidth'{$ENDIF},
    sg_Characters_CharacterCurrentDirection name {$IFDEF DARWIN}'_sg_Characters_CharacterCurrentDirection'{$ELSE}'sg_Characters_CharacterCurrentDirection'{$ENDIF},
    sg_Text_FontFontStyle name {$IFDEF DARWIN}'_sg_Text_FontFontStyle'{$ELSE}'sg_Text_FontFontStyle'{$ENDIF},
    sg_Geometry_InsetRectangle name {$IFDEF DARWIN}'_sg_Geometry_InsetRectangle'{$ELSE}'sg_Geometry_InsetRectangle'{$ENDIF},
    sg_Geometry_ApplyMatrix name {$IFDEF DARWIN}'_sg_Geometry_ApplyMatrix'{$ELSE}'sg_Geometry_ApplyMatrix'{$ENDIF},
    sg_UserInterface_LabelText name {$IFDEF DARWIN}'_sg_UserInterface_LabelText'{$ELSE}'sg_UserInterface_LabelText'{$ENDIF},
    sg_Arduino_ArduinoSendStringLine name {$IFDEF DARWIN}'_sg_Arduino_ArduinoSendStringLine'{$ELSE}'sg_Arduino_ArduinoSendStringLine'{$ENDIF},
    sg_Sprites_SpriteSetCollisionBitmap name {$IFDEF DARWIN}'_sg_Sprites_SpriteSetCollisionBitmap'{$ELSE}'sg_Sprites_SpriteSetCollisionBitmap'{$ENDIF},
    sg_Images_DrawCellOnScreenXY name {$IFDEF DARWIN}'_sg_Images_DrawCellOnScreenXY'{$ELSE}'sg_Images_DrawCellOnScreenXY'{$ENDIF},
    sg_Geometry_CalculateAngle name {$IFDEF DARWIN}'_sg_Geometry_CalculateAngle'{$ELSE}'sg_Geometry_CalculateAngle'{$ENDIF},
    sg_UserInterface_CheckboxState name {$IFDEF DARWIN}'_sg_UserInterface_CheckboxState'{$ELSE}'sg_UserInterface_CheckboxState'{$ENDIF},
    sg_Graphics_FillTriangleOnScreen name {$IFDEF DARWIN}'_sg_Graphics_FillTriangleOnScreen'{$ELSE}'sg_Graphics_FillTriangleOnScreen'{$ENDIF},
    sg_UserInterface_GUISetBackgroundColorInactive name {$IFDEF DARWIN}'_sg_UserInterface_GUISetBackgroundColorInactive'{$ELSE}'sg_UserInterface_GUISetBackgroundColorInactive'{$ENDIF},
    sg_Sprites_SpriteLayerHeight name {$IFDEF DARWIN}'_sg_Sprites_SpriteLayerHeight'{$ELSE}'sg_Sprites_SpriteLayerHeight'{$ENDIF},
    sg_UserInterface_IsDragging name {$IFDEF DARWIN}'_sg_UserInterface_IsDragging'{$ELSE}'sg_UserInterface_IsDragging'{$ENDIF},
    sg_Geometry_ScaleMatrix name {$IFDEF DARWIN}'_sg_Geometry_ScaleMatrix'{$ELSE}'sg_Geometry_ScaleMatrix'{$ENDIF},
    sg_Geometry_VectorIsZero name {$IFDEF DARWIN}'_sg_Geometry_VectorIsZero'{$ELSE}'sg_Geometry_VectorIsZero'{$ENDIF},
    sg_Graphics_ColorDarkOrchid name {$IFDEF DARWIN}'_sg_Graphics_ColorDarkOrchid'{$ELSE}'sg_Graphics_ColorDarkOrchid'{$ENDIF},
    sg_Text_DrawTextOnBitmapWithFontNamed name {$IFDEF DARWIN}'_sg_Text_DrawTextOnBitmapWithFontNamed'{$ELSE}'sg_Text_DrawTextOnBitmapWithFontNamed'{$ENDIF},
    sg_Graphics_FillTriangleOnto name {$IFDEF DARWIN}'_sg_Graphics_FillTriangleOnto'{$ELSE}'sg_Graphics_FillTriangleOnto'{$ENDIF},
    sg_Geometry_RectangleForPoints name {$IFDEF DARWIN}'_sg_Geometry_RectangleForPoints'{$ELSE}'sg_Geometry_RectangleForPoints'{$ENDIF},
    sg_Characters_CharacterSetCurrentDirection name {$IFDEF DARWIN}'_sg_Characters_CharacterSetCurrentDirection'{$ELSE}'sg_Characters_CharacterSetCurrentDirection'{$ENDIF},
    sg_UserInterface_ShowOpenDialogWithType name {$IFDEF DARWIN}'_sg_UserInterface_ShowOpenDialogWithType'{$ELSE}'sg_UserInterface_ShowOpenDialogWithType'{$ENDIF},
    sg_Input_KeyName name {$IFDEF DARWIN}'_sg_Input_KeyName'{$ELSE}'sg_Input_KeyName'{$ENDIF},
    sg_Geometry_PointToString name {$IFDEF DARWIN}'_sg_Geometry_PointToString'{$ELSE}'sg_Geometry_PointToString'{$ENDIF},
    sg_Arduino_ReleaseArduinoDevice name {$IFDEF DARWIN}'_sg_Arduino_ReleaseArduinoDevice'{$ELSE}'sg_Arduino_ReleaseArduinoDevice'{$ENDIF},
    sg_Images_MakeOpaque name {$IFDEF DARWIN}'_sg_Images_MakeOpaque'{$ELSE}'sg_Images_MakeOpaque'{$ENDIF},
    sg_Graphics_DrawOrFillTriangleStruct name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillTriangleStruct'{$ELSE}'sg_Graphics_DrawOrFillTriangleStruct'{$ENDIF},
    sg_UserInterface_ListSetStartingAtFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_ListSetStartingAtFromRegion'{$ELSE}'sg_UserInterface_ListSetStartingAtFromRegion'{$ENDIF},
    sg_Networking_AcceptTCPConnection name {$IFDEF DARWIN}'_sg_Networking_AcceptTCPConnection'{$ELSE}'sg_Networking_AcceptTCPConnection'{$ENDIF},
    sg_Audio_MusicVolume name {$IFDEF DARWIN}'_sg_Audio_MusicVolume'{$ELSE}'sg_Audio_MusicVolume'{$ENDIF},
    sg_UserInterface_ButtonNamedClicked name {$IFDEF DARWIN}'_sg_UserInterface_ButtonNamedClicked'{$ELSE}'sg_UserInterface_ButtonNamedClicked'{$ENDIF},
    sg_Camera_MoveCameraToXY name {$IFDEF DARWIN}'_sg_Camera_MoveCameraToXY'{$ELSE}'sg_Camera_MoveCameraToXY'{$ENDIF},
    sg_UserInterface_GUISetActiveTextboxNamed name {$IFDEF DARWIN}'_sg_UserInterface_GUISetActiveTextboxNamed'{$ELSE}'sg_UserInterface_GUISetActiveTextboxNamed'{$ENDIF},
    sg_Graphics_DrawTriangleOnto name {$IFDEF DARWIN}'_sg_Graphics_DrawTriangleOnto'{$ELSE}'sg_Graphics_DrawTriangleOnto'{$ENDIF},
    sg_Input_MouseUp name {$IFDEF DARWIN}'_sg_Input_MouseUp'{$ELSE}'sg_Input_MouseUp'{$ENDIF},
    sg_Resources_PathToOtherResource name {$IFDEF DARWIN}'_sg_Resources_PathToOtherResource'{$ELSE}'sg_Resources_PathToOtherResource'{$ENDIF},
    sg_UserInterface_PanelActive name {$IFDEF DARWIN}'_sg_UserInterface_PanelActive'{$ELSE}'sg_UserInterface_PanelActive'{$ENDIF},
    sg_Graphics_ColorChocolate name {$IFDEF DARWIN}'_sg_Graphics_ColorChocolate'{$ELSE}'sg_Graphics_ColorChocolate'{$ENDIF},
    sg_Networking_ConnectionIP name {$IFDEF DARWIN}'_sg_Networking_ConnectionIP'{$ELSE}'sg_Networking_ConnectionIP'{$ENDIF},
    sg_Text_DrawTextLinesOnScreenWithFontNamedWithSize name {$IFDEF DARWIN}'_sg_Text_DrawTextLinesOnScreenWithFontNamedWithSize'{$ELSE}'sg_Text_DrawTextLinesOnScreenWithFontNamedWithSize'{$ENDIF},
    sg_Physics_CellBitmapPartCollisionAtPt name {$IFDEF DARWIN}'_sg_Physics_CellBitmapPartCollisionAtPt'{$ELSE}'sg_Physics_CellBitmapPartCollisionAtPt'{$ENDIF},
    sg_Geometry_LineFromVector name {$IFDEF DARWIN}'_sg_Geometry_LineFromVector'{$ELSE}'sg_Geometry_LineFromVector'{$ENDIF},
    sg_UserInterface_ListLargestStartIndex name {$IFDEF DARWIN}'_sg_UserInterface_ListLargestStartIndex'{$ELSE}'sg_UserInterface_ListLargestStartIndex'{$ENDIF},
    sg_Input_StartReadingTextWithTextAndColorInArea name {$IFDEF DARWIN}'_sg_Input_StartReadingTextWithTextAndColorInArea'{$ELSE}'sg_Input_StartReadingTextWithTextAndColorInArea'{$ENDIF},
    sg_Geometry_CreateCircle name {$IFDEF DARWIN}'_sg_Geometry_CreateCircle'{$ELSE}'sg_Geometry_CreateCircle'{$ENDIF},
    sg_Physics_CircleCircleCollision name {$IFDEF DARWIN}'_sg_Physics_CircleCircleCollision'{$ELSE}'sg_Physics_CircleCircleCollision'{$ENDIF},
    sg_Networking_ConnectionCount name {$IFDEF DARWIN}'_sg_Networking_ConnectionCount'{$ELSE}'sg_Networking_ConnectionCount'{$ENDIF},
    sg_Geometry_VectorFromPointPtToRectangle name {$IFDEF DARWIN}'_sg_Geometry_VectorFromPointPtToRectangle'{$ELSE}'sg_Geometry_VectorFromPointPtToRectangle'{$ENDIF},
    sg_Animations_AssignAnimationNamed name {$IFDEF DARWIN}'_sg_Animations_AssignAnimationNamed'{$ELSE}'sg_Animations_AssignAnimationNamed'{$ENDIF},
    sg_Audio_HasSoundEffect name {$IFDEF DARWIN}'_sg_Audio_HasSoundEffect'{$ELSE}'sg_Audio_HasSoundEffect'{$ENDIF},
    sg_Geometry_CircleCenterPoint name {$IFDEF DARWIN}'_sg_Geometry_CircleCenterPoint'{$ELSE}'sg_Geometry_CircleCenterPoint'{$ENDIF},
    sg_Timers_StopTimer name {$IFDEF DARWIN}'_sg_Timers_StopTimer'{$ELSE}'sg_Timers_StopTimer'{$ENDIF},
    sg_Geometry_CreateTrianglePoints name {$IFDEF DARWIN}'_sg_Geometry_CreateTrianglePoints'{$ELSE}'sg_Geometry_CreateTrianglePoints'{$ENDIF},
    sg_Animations_DrawAnimation name {$IFDEF DARWIN}'_sg_Animations_DrawAnimation'{$ELSE}'sg_Animations_DrawAnimation'{$ENDIF},
    sg_Input_KeyDown name {$IFDEF DARWIN}'_sg_Input_KeyDown'{$ELSE}'sg_Input_KeyDown'{$ENDIF},
    sg_Images_DrawBitmapPartOnto name {$IFDEF DARWIN}'_sg_Images_DrawBitmapPartOnto'{$ELSE}'sg_Images_DrawBitmapPartOnto'{$ENDIF},
    sg_Graphics_SetBmpClip name {$IFDEF DARWIN}'_sg_Graphics_SetBmpClip'{$ELSE}'sg_Graphics_SetBmpClip'{$ENDIF},
    sg_Images_LoadBitmap name {$IFDEF DARWIN}'_sg_Images_LoadBitmap'{$ELSE}'sg_Images_LoadBitmap'{$ENDIF},
    sg_Audio_PlayMusicWithLoops name {$IFDEF DARWIN}'_sg_Audio_PlayMusicWithLoops'{$ELSE}'sg_Audio_PlayMusicWithLoops'{$ENDIF},
    sg_Graphics_DrawLinePtsOnScreen name {$IFDEF DARWIN}'_sg_Graphics_DrawLinePtsOnScreen'{$ELSE}'sg_Graphics_DrawLinePtsOnScreen'{$ENDIF},
    sg_UserInterface_DialogComplete name {$IFDEF DARWIN}'_sg_UserInterface_DialogComplete'{$ELSE}'sg_UserInterface_DialogComplete'{$ENDIF},
    sg_UserInterface_RegionX name {$IFDEF DARWIN}'_sg_UserInterface_RegionX'{$ELSE}'sg_UserInterface_RegionX'{$ENDIF},
    sg_Images_SameBitmapCell name {$IFDEF DARWIN}'_sg_Images_SameBitmapCell'{$ELSE}'sg_Images_SameBitmapCell'{$ENDIF},
    sg_Animations_AnimationScriptName name {$IFDEF DARWIN}'_sg_Animations_AnimationScriptName'{$ELSE}'sg_Animations_AnimationScriptName'{$ENDIF},
    sg_Geometry_LineAsVector name {$IFDEF DARWIN}'_sg_Geometry_LineAsVector'{$ELSE}'sg_Geometry_LineAsVector'{$ENDIF},
    sg_Sprites_SpriteStartAnimationNamedWithSound name {$IFDEF DARWIN}'_sg_Sprites_SpriteStartAnimationNamedWithSound'{$ELSE}'sg_Sprites_SpriteStartAnimationNamedWithSound'{$ENDIF},
    sg_UserInterface_ShowSaveDialog name {$IFDEF DARWIN}'_sg_UserInterface_ShowSaveDialog'{$ELSE}'sg_UserInterface_ShowSaveDialog'{$ENDIF},
    sg_Graphics_ColorBlue name {$IFDEF DARWIN}'_sg_Graphics_ColorBlue'{$ELSE}'sg_Graphics_ColorBlue'{$ENDIF},
    sg_Geometry_RectangleFromLines name {$IFDEF DARWIN}'_sg_Geometry_RectangleFromLines'{$ELSE}'sg_Geometry_RectangleFromLines'{$ENDIF},
    sg_Characters_CharacterSetCurrentState name {$IFDEF DARWIN}'_sg_Characters_CharacterSetCurrentState'{$ELSE}'sg_Characters_CharacterSetCurrentState'{$ENDIF},
    sg_Text_DrawTextAtPointWithFontNamedAndSize name {$IFDEF DARWIN}'_sg_Text_DrawTextAtPointWithFontNamedAndSize'{$ELSE}'sg_Text_DrawTextAtPointWithFontNamedAndSize'{$ENDIF},
    sg_Graphics_ColorOlive name {$IFDEF DARWIN}'_sg_Graphics_ColorOlive'{$ELSE}'sg_Graphics_ColorOlive'{$ENDIF},
    sg_Camera_CameraY name {$IFDEF DARWIN}'_sg_Camera_CameraY'{$ELSE}'sg_Camera_CameraY'{$ENDIF},
    sg_UserInterface_ListActiveItemIndexOnPanelWithId name {$IFDEF DARWIN}'_sg_UserInterface_ListActiveItemIndexOnPanelWithId'{$ELSE}'sg_UserInterface_ListActiveItemIndexOnPanelWithId'{$ENDIF},
    sg_Images_SaveToPNG name {$IFDEF DARWIN}'_sg_Images_SaveToPNG'{$ELSE}'sg_Images_SaveToPNG'{$ENDIF},
    sg_Text_DrawFramerateWithSimpleFont name {$IFDEF DARWIN}'_sg_Text_DrawFramerateWithSimpleFont'{$ELSE}'sg_Text_DrawFramerateWithSimpleFont'{$ENDIF},
    sg_Graphics_ColorMintCream name {$IFDEF DARWIN}'_sg_Graphics_ColorMintCream'{$ELSE}'sg_Graphics_ColorMintCream'{$ENDIF},
    sg_Physics_SpriteRectLineCollision name {$IFDEF DARWIN}'_sg_Physics_SpriteRectLineCollision'{$ELSE}'sg_Physics_SpriteRectLineCollision'{$ENDIF},
    sg_UserInterface_ListRemoveItemOnPanelWithId name {$IFDEF DARWIN}'_sg_UserInterface_ListRemoveItemOnPanelWithId'{$ELSE}'sg_UserInterface_ListRemoveItemOnPanelWithId'{$ENDIF},
    sg_Graphics_DrawPixelAtPointOnto name {$IFDEF DARWIN}'_sg_Graphics_DrawPixelAtPointOnto'{$ELSE}'sg_Graphics_DrawPixelAtPointOnto'{$ENDIF},
    sg_Sprites_CreateSpriteWithLayer name {$IFDEF DARWIN}'_sg_Sprites_CreateSpriteWithLayer'{$ELSE}'sg_Sprites_CreateSpriteWithLayer'{$ENDIF},
    sg_Text_DrawTextOnScreenWithFontNamedAndSize name {$IFDEF DARWIN}'_sg_Text_DrawTextOnScreenWithFontNamedAndSize'{$ELSE}'sg_Text_DrawTextOnScreenWithFontNamedAndSize'{$ENDIF},
    sg_Graphics_ColorKhaki name {$IFDEF DARWIN}'_sg_Graphics_ColorKhaki'{$ELSE}'sg_Graphics_ColorKhaki'{$ENDIF},
    sg_Sprites_SpriteValueCount name {$IFDEF DARWIN}'_sg_Sprites_SpriteValueCount'{$ELSE}'sg_Sprites_SpriteValueCount'{$ENDIF},
    sg_Sprites_SpriteSetRotation name {$IFDEF DARWIN}'_sg_Sprites_SpriteSetRotation'{$ELSE}'sg_Sprites_SpriteSetRotation'{$ENDIF},
    sg_Geometry_ClosestPointOnLineFromCircle name {$IFDEF DARWIN}'_sg_Geometry_ClosestPointOnLineFromCircle'{$ELSE}'sg_Geometry_ClosestPointOnLineFromCircle'{$ENDIF},
    sg_Graphics_DrawOrFillEllipseInRect name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillEllipseInRect'{$ELSE}'sg_Graphics_DrawOrFillEllipseInRect'{$ENDIF},
    sg_Geometry_RectangleFromCircle name {$IFDEF DARWIN}'_sg_Geometry_RectangleFromCircle'{$ELSE}'sg_Geometry_RectangleFromCircle'{$ENDIF},
    sg_Images_ClearSurfaceToBlack name {$IFDEF DARWIN}'_sg_Images_ClearSurfaceToBlack'{$ELSE}'sg_Images_ClearSurfaceToBlack'{$ENDIF},
    sg_Audio_MusicFilename name {$IFDEF DARWIN}'_sg_Audio_MusicFilename'{$ELSE}'sg_Audio_MusicFilename'{$ENDIF},
    sg_Animations_FreeAnimationScript name {$IFDEF DARWIN}'_sg_Animations_FreeAnimationScript'{$ELSE}'sg_Animations_FreeAnimationScript'{$ENDIF},
    sg_Text_DrawTextOnScreenWithFontNamed name {$IFDEF DARWIN}'_sg_Text_DrawTextOnScreenWithFontNamed'{$ELSE}'sg_Text_DrawTextOnScreenWithFontNamed'{$ENDIF},
    sg_Graphics_DrawLinePtsOnto name {$IFDEF DARWIN}'_sg_Graphics_DrawLinePtsOnto'{$ELSE}'sg_Graphics_DrawLinePtsOnto'{$ENDIF},
    sg_Geometry_PointXYInCircle name {$IFDEF DARWIN}'_sg_Geometry_PointXYInCircle'{$ELSE}'sg_Geometry_PointXYInCircle'{$ENDIF},
    sg_Graphics_DrawOrFillCircleStruct name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillCircleStruct'{$ELSE}'sg_Graphics_DrawOrFillCircleStruct'{$ENDIF},
    sg_UserInterface_RegionWithID name {$IFDEF DARWIN}'_sg_UserInterface_RegionWithID'{$ELSE}'sg_UserInterface_RegionWithID'{$ENDIF},
    sg_Characters_CharacterCharacterName name {$IFDEF DARWIN}'_sg_Characters_CharacterCharacterName'{$ELSE}'sg_Characters_CharacterCharacterName'{$ENDIF},
    sg_UserInterface_ListFontAlignmentFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_ListFontAlignmentFromRegion'{$ELSE}'sg_UserInterface_ListFontAlignmentFromRegion'{$ENDIF},
    sg_Graphics_ColorWhite name {$IFDEF DARWIN}'_sg_Graphics_ColorWhite'{$ELSE}'sg_Graphics_ColorWhite'{$ENDIF},
    sg_Geometry_PointInCirclePt name {$IFDEF DARWIN}'_sg_Geometry_PointInCirclePt'{$ELSE}'sg_Geometry_PointInCirclePt'{$ENDIF},
    sg_UserInterface_ActiveTextIndex name {$IFDEF DARWIN}'_sg_UserInterface_ActiveTextIndex'{$ELSE}'sg_UserInterface_ActiveTextIndex'{$ENDIF},
    sg_Networking_RetreiveConnection name {$IFDEF DARWIN}'_sg_Networking_RetreiveConnection'{$ELSE}'sg_Networking_RetreiveConnection'{$ENDIF},
    sg_Physics_CellRectCollision name {$IFDEF DARWIN}'_sg_Physics_CellRectCollision'{$ELSE}'sg_Physics_CellRectCollision'{$ENDIF},
    sg_Images_BitmapCellHeight name {$IFDEF DARWIN}'_sg_Images_BitmapCellHeight'{$ELSE}'sg_Images_BitmapCellHeight'{$ENDIF},
    sg_Geometry_CreateVectorFromPointToRectangle name {$IFDEF DARWIN}'_sg_Geometry_CreateVectorFromPointToRectangle'{$ELSE}'sg_Geometry_CreateVectorFromPointToRectangle'{$ENDIF},
    sg_Physics_CollideCircleLine name {$IFDEF DARWIN}'_sg_Physics_CollideCircleLine'{$ELSE}'sg_Physics_CollideCircleLine'{$ENDIF},
    sg_UserInterface_AddItemByText name {$IFDEF DARWIN}'_sg_UserInterface_AddItemByText'{$ELSE}'sg_UserInterface_AddItemByText'{$ENDIF},
    sg_Text_DrawFramerateFontNamed name {$IFDEF DARWIN}'_sg_Text_DrawFramerateFontNamed'{$ELSE}'sg_Text_DrawFramerateFontNamed'{$ENDIF},
    sg_Graphics_ColorLightBlue name {$IFDEF DARWIN}'_sg_Graphics_ColorLightBlue'{$ELSE}'sg_Graphics_ColorLightBlue'{$ENDIF},
    sg_Graphics_DrawLineOnto name {$IFDEF DARWIN}'_sg_Graphics_DrawLineOnto'{$ELSE}'sg_Graphics_DrawLineOnto'{$ENDIF},
    sg_Graphics_ColorSnow name {$IFDEF DARWIN}'_sg_Graphics_ColorSnow'{$ELSE}'sg_Graphics_ColorSnow'{$ENDIF},
    sg_Arduino_ArduinoReadByteTimeout name {$IFDEF DARWIN}'_sg_Arduino_ArduinoReadByteTimeout'{$ELSE}'sg_Arduino_ArduinoReadByteTimeout'{$ENDIF},
    sg_Graphics_PopClipScreen name {$IFDEF DARWIN}'_sg_Graphics_PopClipScreen'{$ELSE}'sg_Graphics_PopClipScreen'{$ENDIF},
    sg_Input_ScreenTouched name {$IFDEF DARWIN}'_sg_Input_ScreenTouched'{$ELSE}'sg_Input_ScreenTouched'{$ENDIF},
    sg_Physics_BitmapsPartsCollision name {$IFDEF DARWIN}'_sg_Physics_BitmapsPartsCollision'{$ELSE}'sg_Physics_BitmapsPartsCollision'{$ENDIF},
    sg_Arduino_HasArduinoDevice name {$IFDEF DARWIN}'_sg_Arduino_HasArduinoDevice'{$ELSE}'sg_Arduino_HasArduinoDevice'{$ENDIF},
    sg_Images_DrawBitmapCellOnto name {$IFDEF DARWIN}'_sg_Images_DrawBitmapCellOnto'{$ELSE}'sg_Images_DrawBitmapCellOnto'{$ENDIF},
    sg_Graphics_DrawPixel name {$IFDEF DARWIN}'_sg_Graphics_DrawPixel'{$ELSE}'sg_Graphics_DrawPixel'{$ENDIF},
    sg_Audio_ReleaseMusic name {$IFDEF DARWIN}'_sg_Audio_ReleaseMusic'{$ELSE}'sg_Audio_ReleaseMusic'{$ENDIF},
    sg_Graphics_ColorLightYellow name {$IFDEF DARWIN}'_sg_Graphics_ColorLightYellow'{$ELSE}'sg_Graphics_ColorLightYellow'{$ENDIF},
    sg_Sprites_SpriteVisibleIndexOfLayerNamed name {$IFDEF DARWIN}'_sg_Sprites_SpriteVisibleIndexOfLayerNamed'{$ELSE}'sg_Sprites_SpriteVisibleIndexOfLayerNamed'{$ENDIF},
    sg_Networking_CloseAllUDPSockets name {$IFDEF DARWIN}'_sg_Networking_CloseAllUDPSockets'{$ELSE}'sg_Networking_CloseAllUDPSockets'{$ENDIF},
    sg_Sprites_CreateSpriteWithAnimation name {$IFDEF DARWIN}'_sg_Sprites_CreateSpriteWithAnimation'{$ELSE}'sg_Sprites_CreateSpriteWithAnimation'{$ENDIF},
    sg_Graphics_ColorDarkRed name {$IFDEF DARWIN}'_sg_Graphics_ColorDarkRed'{$ELSE}'sg_Graphics_ColorDarkRed'{$ENDIF},
    sg_Audio_SetMusicVolume name {$IFDEF DARWIN}'_sg_Audio_SetMusicVolume'{$ELSE}'sg_Audio_SetMusicVolume'{$ENDIF},
    sg_Animations_ReleaseAnimationScript name {$IFDEF DARWIN}'_sg_Animations_ReleaseAnimationScript'{$ELSE}'sg_Animations_ReleaseAnimationScript'{$ENDIF},
    sg_Utils_ExceptionMessage name {$IFDEF DARWIN}'_sg_Utils_ExceptionMessage'{$ELSE}'sg_Utils_ExceptionMessage'{$ENDIF},
    sg_UserInterface_TextboxSetTextFromId name {$IFDEF DARWIN}'_sg_UserInterface_TextboxSetTextFromId'{$ELSE}'sg_UserInterface_TextboxSetTextFromId'{$ENDIF},
    sg_Images_BitmapCellRows name {$IFDEF DARWIN}'_sg_Images_BitmapCellRows'{$ELSE}'sg_Images_BitmapCellRows'{$ENDIF},
    sg_UserInterface_ListOnPanelWithIdAddItemWithCell name {$IFDEF DARWIN}'_sg_UserInterface_ListOnPanelWithIdAddItemWithCell'{$ELSE}'sg_UserInterface_ListOnPanelWithIdAddItemWithCell'{$ENDIF},
    sg_Graphics_ScreenHeight name {$IFDEF DARWIN}'_sg_Graphics_ScreenHeight'{$ELSE}'sg_Graphics_ScreenHeight'{$ENDIF},
    sg_UserInterface_CheckboxSetStateOnPanel name {$IFDEF DARWIN}'_sg_UserInterface_CheckboxSetStateOnPanel'{$ELSE}'sg_UserInterface_CheckboxSetStateOnPanel'{$ENDIF},
    sg_Text_ReleaseFont name {$IFDEF DARWIN}'_sg_Text_ReleaseFont'{$ELSE}'sg_Text_ReleaseFont'{$ENDIF},
    sg_Images_DrawCellXY name {$IFDEF DARWIN}'_sg_Images_DrawCellXY'{$ELSE}'sg_Images_DrawCellXY'{$ENDIF},
    sg_UserInterface_GUISetBackgroundColor name {$IFDEF DARWIN}'_sg_UserInterface_GUISetBackgroundColor'{$ELSE}'sg_UserInterface_GUISetBackgroundColor'{$ENDIF},
    sg_Graphics_DrawLinePts name {$IFDEF DARWIN}'_sg_Graphics_DrawLinePts'{$ELSE}'sg_Graphics_DrawLinePts'{$ENDIF},
    sg_Geometry_CreateRectangleLines name {$IFDEF DARWIN}'_sg_Geometry_CreateRectangleLines'{$ELSE}'sg_Geometry_CreateRectangleLines'{$ENDIF},
    sg_Sprites_CreateSpriteWithAnimationPt name {$IFDEF DARWIN}'_sg_Sprites_CreateSpriteWithAnimationPt'{$ELSE}'sg_Sprites_CreateSpriteWithAnimationPt'{$ENDIF},
    sg_UserInterface_ListFontFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_ListFontFromRegion'{$ELSE}'sg_UserInterface_ListFontFromRegion'{$ENDIF},
    sg_Geometry_RectangleCenterTop name {$IFDEF DARWIN}'_sg_Geometry_RectangleCenterTop'{$ELSE}'sg_Geometry_RectangleCenterTop'{$ENDIF},
    sg_UserInterface_TextboxSetTextToSingleOnPanel name {$IFDEF DARWIN}'_sg_UserInterface_TextboxSetTextToSingleOnPanel'{$ELSE}'sg_UserInterface_TextboxSetTextToSingleOnPanel'{$ENDIF},
    sg_Resources_PathToResource name {$IFDEF DARWIN}'_sg_Resources_PathToResource'{$ELSE}'sg_Resources_PathToResource'{$ENDIF},
    sg_Geometry_VectorMultiply name {$IFDEF DARWIN}'_sg_Geometry_VectorMultiply'{$ELSE}'sg_Geometry_VectorMultiply'{$ENDIF},
    sg_UserInterface_CheckBoxSetStateWithId name {$IFDEF DARWIN}'_sg_UserInterface_CheckBoxSetStateWithId'{$ELSE}'sg_UserInterface_CheckBoxSetStateWithId'{$ENDIF},
    sg_Sprites_SpriteToggleLayerNamedVisible name {$IFDEF DARWIN}'_sg_Sprites_SpriteToggleLayerNamedVisible'{$ELSE}'sg_Sprites_SpriteToggleLayerNamedVisible'{$ENDIF},
    sg_Sprites_SpriteLayerOffsetNamed name {$IFDEF DARWIN}'_sg_Sprites_SpriteLayerOffsetNamed'{$ELSE}'sg_Sprites_SpriteLayerOffsetNamed'{$ENDIF},
    sg_Geometry_VectorOutOfCircleFromPoint name {$IFDEF DARWIN}'_sg_Geometry_VectorOutOfCircleFromPoint'{$ELSE}'sg_Geometry_VectorOutOfCircleFromPoint'{$ENDIF},
    sg_Audio_SoundEffectNamedPlaying name {$IFDEF DARWIN}'_sg_Audio_SoundEffectNamedPlaying'{$ELSE}'sg_Audio_SoundEffectNamedPlaying'{$ENDIF},
    sg_Characters_CharacterSprite name {$IFDEF DARWIN}'_sg_Characters_CharacterSprite'{$ELSE}'sg_Characters_CharacterSprite'{$ENDIF},
    sg_UserInterface_RegionHeight name {$IFDEF DARWIN}'_sg_UserInterface_RegionHeight'{$ELSE}'sg_UserInterface_RegionHeight'{$ENDIF},
    sg_Resources_PathToResourceWithBase name {$IFDEF DARWIN}'_sg_Resources_PathToResourceWithBase'{$ELSE}'sg_Resources_PathToResourceWithBase'{$ENDIF},
    sg_Sprites_SpriteWidth name {$IFDEF DARWIN}'_sg_Sprites_SpriteWidth'{$ELSE}'sg_Sprites_SpriteWidth'{$ENDIF},
    sg_Text_DrawTextOnBitmapAtPointWithFontNamed name {$IFDEF DARWIN}'_sg_Text_DrawTextOnBitmapAtPointWithFontNamed'{$ELSE}'sg_Text_DrawTextOnBitmapAtPointWithFontNamed'{$ENDIF},
    sg_Geometry_ClosestPointOnCircle name {$IFDEF DARWIN}'_sg_Geometry_ClosestPointOnCircle'{$ELSE}'sg_Geometry_ClosestPointOnCircle'{$ENDIF},
    sg_Sprites_CreateLayeredSpriteWithAnimationScript name {$IFDEF DARWIN}'_sg_Sprites_CreateLayeredSpriteWithAnimationScript'{$ELSE}'sg_Sprites_CreateLayeredSpriteWithAnimationScript'{$ENDIF},
    sg_Graphics_RefreshScreenRestrictFPS name {$IFDEF DARWIN}'_sg_Graphics_RefreshScreenRestrictFPS'{$ELSE}'sg_Graphics_RefreshScreenRestrictFPS'{$ENDIF},
    sg_UserInterface_TextBoxFromID name {$IFDEF DARWIN}'_sg_UserInterface_TextBoxFromID'{$ELSE}'sg_UserInterface_TextBoxFromID'{$ENDIF},
    sg_Animations_DrawAnimationOntoDestAtPt name {$IFDEF DARWIN}'_sg_Animations_DrawAnimationOntoDestAtPt'{$ELSE}'sg_Animations_DrawAnimationOntoDestAtPt'{$ENDIF},
    sg_Sprites_MoveSpriteTo name {$IFDEF DARWIN}'_sg_Sprites_MoveSpriteTo'{$ELSE}'sg_Sprites_MoveSpriteTo'{$ENDIF},
    sg_Graphics_DrawOrFillRectangleStruct name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillRectangleStruct'{$ELSE}'sg_Graphics_DrawOrFillRectangleStruct'{$ENDIF},
    sg_Graphics_DrawOrFillEllipse name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillEllipse'{$ELSE}'sg_Graphics_DrawOrFillEllipse'{$ENDIF},
    sg_Graphics_PutPixel name {$IFDEF DARWIN}'_sg_Graphics_PutPixel'{$ELSE}'sg_Graphics_PutPixel'{$ENDIF},
    sg_Sprites_CreateSpriteWithBitmapAndAnimationName name {$IFDEF DARWIN}'_sg_Sprites_CreateSpriteWithBitmapAndAnimationName'{$ELSE}'sg_Sprites_CreateSpriteWithBitmapAndAnimationName'{$ENDIF},
    sg_UserInterface_TextboxSetTextToSingle name {$IFDEF DARWIN}'_sg_UserInterface_TextboxSetTextToSingle'{$ELSE}'sg_UserInterface_TextboxSetTextToSingle'{$ENDIF},
    sg_Graphics_ColorMediumOrchid name {$IFDEF DARWIN}'_sg_Graphics_ColorMediumOrchid'{$ELSE}'sg_Graphics_ColorMediumOrchid'{$ENDIF},
    sg_Physics_BitmapCollision name {$IFDEF DARWIN}'_sg_Physics_BitmapCollision'{$ELSE}'sg_Physics_BitmapCollision'{$ENDIF},
    sg_UserInterface_ActiveTextBoxParent name {$IFDEF DARWIN}'_sg_UserInterface_ActiveTextBoxParent'{$ELSE}'sg_UserInterface_ActiveTextBoxParent'{$ENDIF},
    sg_Resources_ReleaseResourceBundle name {$IFDEF DARWIN}'_sg_Resources_ReleaseResourceBundle'{$ELSE}'sg_Resources_ReleaseResourceBundle'{$ENDIF},
    sg_Images_FreeBitmap name {$IFDEF DARWIN}'_sg_Images_FreeBitmap'{$ELSE}'sg_Images_FreeBitmap'{$ENDIF},
    sg_Geometry_ClosestPointOnLinesFromCircle name {$IFDEF DARWIN}'_sg_Geometry_ClosestPointOnLinesFromCircle'{$ELSE}'sg_Geometry_ClosestPointOnLinesFromCircle'{$ENDIF},
    sg_Physics_SpriteRectangleCollision name {$IFDEF DARWIN}'_sg_Physics_SpriteRectangleCollision'{$ELSE}'sg_Physics_SpriteRectangleCollision'{$ENDIF},
    sg_Characters_ToggleLayerVisibility name {$IFDEF DARWIN}'_sg_Characters_ToggleLayerVisibility'{$ELSE}'sg_Characters_ToggleLayerVisibility'{$ENDIF},
    sg_Animations_AnimationEnded name {$IFDEF DARWIN}'_sg_Animations_AnimationEnded'{$ELSE}'sg_Animations_AnimationEnded'{$ENDIF},
    sg_Audio_ReleaseAllSoundEffects name {$IFDEF DARWIN}'_sg_Audio_ReleaseAllSoundEffects'{$ELSE}'sg_Audio_ReleaseAllSoundEffects'{$ENDIF},
    sg_Images_DrawBitmapPartFromRectAtPointOnScreen name {$IFDEF DARWIN}'_sg_Images_DrawBitmapPartFromRectAtPointOnScreen'{$ELSE}'sg_Images_DrawBitmapPartFromRectAtPointOnScreen'{$ENDIF},
    sg_Input_TextReadAsASCII name {$IFDEF DARWIN}'_sg_Input_TextReadAsASCII'{$ELSE}'sg_Input_TextReadAsASCII'{$ENDIF},
    sg_Graphics_ColorPeru name {$IFDEF DARWIN}'_sg_Graphics_ColorPeru'{$ELSE}'sg_Graphics_ColorPeru'{$ENDIF},
    sg_UserInterface_ListWithIdAddItemWithCellAndText name {$IFDEF DARWIN}'_sg_UserInterface_ListWithIdAddItemWithCellAndText'{$ELSE}'sg_UserInterface_ListWithIdAddItemWithCellAndText'{$ENDIF},
    sg_UserInterface_ListSetFont name {$IFDEF DARWIN}'_sg_UserInterface_ListSetFont'{$ELSE}'sg_UserInterface_ListSetFont'{$ENDIF},
    sg_Geometry_LineMagnitudeSq name {$IFDEF DARWIN}'_sg_Geometry_LineMagnitudeSq'{$ELSE}'sg_Geometry_LineMagnitudeSq'{$ENDIF},
    sg_UserInterface_DrawGUIAsVectors name {$IFDEF DARWIN}'_sg_UserInterface_DrawGUIAsVectors'{$ELSE}'sg_UserInterface_DrawGUIAsVectors'{$ENDIF},
    sg_Sprites_CenterPoint name {$IFDEF DARWIN}'_sg_Sprites_CenterPoint'{$ELSE}'sg_Sprites_CenterPoint'{$ENDIF},
    sg_Images_DrawBitmapPart name {$IFDEF DARWIN}'_sg_Images_DrawBitmapPart'{$ELSE}'sg_Images_DrawBitmapPart'{$ENDIF},
    sg_Animations_AnimationEnteredFrame name {$IFDEF DARWIN}'_sg_Animations_AnimationEnteredFrame'{$ELSE}'sg_Animations_AnimationEnteredFrame'{$ENDIF},
    sg_Graphics_ColorDarkGreen name {$IFDEF DARWIN}'_sg_Graphics_ColorDarkGreen'{$ELSE}'sg_Graphics_ColorDarkGreen'{$ENDIF},
    sg_Text_DrawTextLinesOnScreen name {$IFDEF DARWIN}'_sg_Text_DrawTextLinesOnScreen'{$ELSE}'sg_Text_DrawTextLinesOnScreen'{$ENDIF},
    sg_Animations_DrawAnimationOnScreenAtPt name {$IFDEF DARWIN}'_sg_Animations_DrawAnimationOnScreenAtPt'{$ELSE}'sg_Animations_DrawAnimationOnScreenAtPt'{$ENDIF},
    sg_Text_DrawTextLines name {$IFDEF DARWIN}'_sg_Text_DrawTextLines'{$ELSE}'sg_Text_DrawTextLines'{$ENDIF},
    sg_UserInterface_GUITextEntryComplete name {$IFDEF DARWIN}'_sg_UserInterface_GUITextEntryComplete'{$ELSE}'sg_UserInterface_GUITextEntryComplete'{$ENDIF},
    sg_Characters_HasCharacter name {$IFDEF DARWIN}'_sg_Characters_HasCharacter'{$ELSE}'sg_Characters_HasCharacter'{$ENDIF},
    sg_Sprites_SpriteCurrentCellRectangle name {$IFDEF DARWIN}'_sg_Sprites_SpriteCurrentCellRectangle'{$ELSE}'sg_Sprites_SpriteCurrentCellRectangle'{$ENDIF},
    sg_Sprites_SpriteMoveTo name {$IFDEF DARWIN}'_sg_Sprites_SpriteMoveTo'{$ELSE}'sg_Sprites_SpriteMoveTo'{$ENDIF},
    sg_Geometry_ScaleMatrixByPoint name {$IFDEF DARWIN}'_sg_Geometry_ScaleMatrixByPoint'{$ELSE}'sg_Geometry_ScaleMatrixByPoint'{$ENDIF},
    sg_Physics_CollideCircleLines name {$IFDEF DARWIN}'_sg_Physics_CollideCircleLines'{$ELSE}'sg_Physics_CollideCircleLines'{$ENDIF},
    sg_Networking_EnqueueMessage name {$IFDEF DARWIN}'_sg_Networking_EnqueueMessage'{$ELSE}'sg_Networking_EnqueueMessage'{$ENDIF},
    sg_Sprites_SpriteAddLayer name {$IFDEF DARWIN}'_sg_Sprites_SpriteAddLayer'{$ELSE}'sg_Sprites_SpriteAddLayer'{$ENDIF},
    sg_Images_LoadTransparentBitmapNamed name {$IFDEF DARWIN}'_sg_Images_LoadTransparentBitmapNamed'{$ELSE}'sg_Images_LoadTransparentBitmapNamed'{$ENDIF},
    sg_Graphics_ColorLavenderBlush name {$IFDEF DARWIN}'_sg_Graphics_ColorLavenderBlush'{$ELSE}'sg_Graphics_ColorLavenderBlush'{$ENDIF},
    sg_UserInterface_ToggleActivatePanel name {$IFDEF DARWIN}'_sg_UserInterface_ToggleActivatePanel'{$ELSE}'sg_UserInterface_ToggleActivatePanel'{$ENDIF},
    sg_Animations_CreateAnimationNamed name {$IFDEF DARWIN}'_sg_Animations_CreateAnimationNamed'{$ELSE}'sg_Animations_CreateAnimationNamed'{$ENDIF},
    sg_Text_DrawTextLinesInRectOnBitmapWithFontNamedAndSize name {$IFDEF DARWIN}'_sg_Text_DrawTextLinesInRectOnBitmapWithFontNamedAndSize'{$ELSE}'sg_Text_DrawTextLinesInRectOnBitmapWithFontNamedAndSize'{$ENDIF},
    sg_Geometry_CreateLineVectorWithStartXY name {$IFDEF DARWIN}'_sg_Geometry_CreateLineVectorWithStartXY'{$ELSE}'sg_Geometry_CreateLineVectorWithStartXY'{$ENDIF},
    sg_Geometry_VectorNormal name {$IFDEF DARWIN}'_sg_Geometry_VectorNormal'{$ELSE}'sg_Geometry_VectorNormal'{$ENDIF},
    sg_UserInterface_PanelNamed name {$IFDEF DARWIN}'_sg_UserInterface_PanelNamed'{$ELSE}'sg_UserInterface_PanelNamed'{$ENDIF},
    sg_Graphics_ColorDarkMagenta name {$IFDEF DARWIN}'_sg_Graphics_ColorDarkMagenta'{$ELSE}'sg_Graphics_ColorDarkMagenta'{$ENDIF},
    sg_UserInterface_RegionActive name {$IFDEF DARWIN}'_sg_UserInterface_RegionActive'{$ELSE}'sg_UserInterface_RegionActive'{$ENDIF},
    sg_Input_MoveMouse name {$IFDEF DARWIN}'_sg_Input_MoveMouse'{$ELSE}'sg_Input_MoveMouse'{$ENDIF},
    sg_Audio_TryOpenAudio name {$IFDEF DARWIN}'_sg_Audio_TryOpenAudio'{$ELSE}'sg_Audio_TryOpenAudio'{$ENDIF},
    sg_Arduino_ArduinoSendString name {$IFDEF DARWIN}'_sg_Arduino_ArduinoSendString'{$ELSE}'sg_Arduino_ArduinoSendString'{$ENDIF},
    sg_UserInterface_AddItemByBitmap name {$IFDEF DARWIN}'_sg_UserInterface_AddItemByBitmap'{$ELSE}'sg_UserInterface_AddItemByBitmap'{$ENDIF},
    sg_Graphics_BlueOf name {$IFDEF DARWIN}'_sg_Graphics_BlueOf'{$ELSE}'sg_Graphics_BlueOf'{$ENDIF},
    sg_Geometry_RectangleCenterRight name {$IFDEF DARWIN}'_sg_Geometry_RectangleCenterRight'{$ELSE}'sg_Geometry_RectangleCenterRight'{$ENDIF},
    sg_Sprites_CallForAllSprites name {$IFDEF DARWIN}'_sg_Sprites_CallForAllSprites'{$ELSE}'sg_Sprites_CallForAllSprites'{$ENDIF},
    sg_Graphics_ColorViolet name {$IFDEF DARWIN}'_sg_Graphics_ColorViolet'{$ELSE}'sg_Graphics_ColorViolet'{$ENDIF},
    sg_UserInterface_ListRemoveItem name {$IFDEF DARWIN}'_sg_UserInterface_ListRemoveItem'{$ELSE}'sg_UserInterface_ListRemoveItem'{$ENDIF},
    sg_UserInterface_PanelVisible name {$IFDEF DARWIN}'_sg_UserInterface_PanelVisible'{$ELSE}'sg_UserInterface_PanelVisible'{$ENDIF},
    sg_Geometry_CreateLineFromVector name {$IFDEF DARWIN}'_sg_Geometry_CreateLineFromVector'{$ELSE}'sg_Geometry_CreateLineFromVector'{$ENDIF},
    sg_Geometry_CreateRectangleAtPoint name {$IFDEF DARWIN}'_sg_Geometry_CreateRectangleAtPoint'{$ELSE}'sg_Geometry_CreateRectangleAtPoint'{$ENDIF},
    sg_UserInterface_TextBoxFont name {$IFDEF DARWIN}'_sg_UserInterface_TextBoxFont'{$ELSE}'sg_UserInterface_TextBoxFont'{$ENDIF},
    sg_UserInterface_TextboxFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_TextboxFromRegion'{$ELSE}'sg_UserInterface_TextboxFromRegion'{$ENDIF},
    sg_Physics_BitmapRectCollision name {$IFDEF DARWIN}'_sg_Physics_BitmapRectCollision'{$ELSE}'sg_Physics_BitmapRectCollision'{$ENDIF},
    sg_Input_GetAccelerometerThreshold name {$IFDEF DARWIN}'_sg_Input_GetAccelerometerThreshold'{$ELSE}'sg_Input_GetAccelerometerThreshold'{$ENDIF},
    sg_Sprites_SpriteName name {$IFDEF DARWIN}'_sg_Sprites_SpriteName'{$ELSE}'sg_Sprites_SpriteName'{$ENDIF},
    sg_Graphics_DrawOrFillCircleOnScreen name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillCircleOnScreen'{$ELSE}'sg_Graphics_DrawOrFillCircleOnScreen'{$ENDIF},
    sg_Text_DrawTextLinesOnBitmapWithFontNamed name {$IFDEF DARWIN}'_sg_Text_DrawTextLinesOnBitmapWithFontNamed'{$ELSE}'sg_Text_DrawTextLinesOnBitmapWithFontNamed'{$ENDIF},
    sg_Text_DrawTextOnBitmap name {$IFDEF DARWIN}'_sg_Text_DrawTextOnBitmap'{$ELSE}'sg_Text_DrawTextOnBitmap'{$ENDIF},
    sg_Sprites_SpriteBringLayerForward name {$IFDEF DARWIN}'_sg_Sprites_SpriteBringLayerForward'{$ELSE}'sg_Sprites_SpriteBringLayerForward'{$ENDIF},
    sg_Geometry_VectorFromPoints name {$IFDEF DARWIN}'_sg_Geometry_VectorFromPoints'{$ELSE}'sg_Geometry_VectorFromPoints'{$ENDIF},
    sg_UserInterface_TextboxSetTextToInt name {$IFDEF DARWIN}'_sg_UserInterface_TextboxSetTextToInt'{$ELSE}'sg_UserInterface_TextboxSetTextToInt'{$ENDIF},
    sg_Geometry_TriangleRectangleIntersect name {$IFDEF DARWIN}'_sg_Geometry_TriangleRectangleIntersect'{$ELSE}'sg_Geometry_TriangleRectangleIntersect'{$ENDIF},
    sg_Animations_DrawAnimationOnScreen name {$IFDEF DARWIN}'_sg_Animations_DrawAnimationOnScreen'{$ELSE}'sg_Animations_DrawAnimationOnScreen'{$ENDIF},
    sg_UserInterface_LabelTextFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_LabelTextFromRegion'{$ELSE}'sg_UserInterface_LabelTextFromRegion'{$ENDIF},
    sg_Sprites_VectorFromTo name {$IFDEF DARWIN}'_sg_Sprites_VectorFromTo'{$ELSE}'sg_Sprites_VectorFromTo'{$ENDIF},
    sg_Resources_AppPath name {$IFDEF DARWIN}'_sg_Resources_AppPath'{$ELSE}'sg_Resources_AppPath'{$ENDIF},
    sg_Images_BitmapCircle name {$IFDEF DARWIN}'_sg_Images_BitmapCircle'{$ELSE}'sg_Images_BitmapCircle'{$ENDIF},
    sg_Geometry_ScaleRotateTranslateMatrix name {$IFDEF DARWIN}'_sg_Geometry_ScaleRotateTranslateMatrix'{$ELSE}'sg_Geometry_ScaleRotateTranslateMatrix'{$ENDIF},
    sg_Networking_BroadcastUDPMessage name {$IFDEF DARWIN}'_sg_Networking_BroadcastUDPMessage'{$ELSE}'sg_Networking_BroadcastUDPMessage'{$ENDIF},
    sg_Graphics_SetIcon name {$IFDEF DARWIN}'_sg_Graphics_SetIcon'{$ELSE}'sg_Graphics_SetIcon'{$ENDIF},
    sg_Networking_FreeConnection name {$IFDEF DARWIN}'_sg_Networking_FreeConnection'{$ELSE}'sg_Networking_FreeConnection'{$ENDIF},
    sg_Audio_SoundEffectName name {$IFDEF DARWIN}'_sg_Audio_SoundEffectName'{$ELSE}'sg_Audio_SoundEffectName'{$ENDIF},
    sg_Graphics_ColorTeal name {$IFDEF DARWIN}'_sg_Graphics_ColorTeal'{$ELSE}'sg_Graphics_ColorTeal'{$ENDIF},
    sg_Camera_MoveCameraByXY name {$IFDEF DARWIN}'_sg_Camera_MoveCameraByXY'{$ELSE}'sg_Camera_MoveCameraByXY'{$ENDIF},
    sg_Graphics_ColorMoccasin name {$IFDEF DARWIN}'_sg_Graphics_ColorMoccasin'{$ELSE}'sg_Graphics_ColorMoccasin'{$ENDIF},
    sg_Sprites_SpriteSetY name {$IFDEF DARWIN}'_sg_Sprites_SpriteSetY'{$ELSE}'sg_Sprites_SpriteSetY'{$ENDIF},
    sg_Graphics_ColorRosyBrown name {$IFDEF DARWIN}'_sg_Graphics_ColorRosyBrown'{$ELSE}'sg_Graphics_ColorRosyBrown'{$ENDIF},
    sg_UserInterface_ListFontAlignment name {$IFDEF DARWIN}'_sg_UserInterface_ListFontAlignment'{$ELSE}'sg_UserInterface_ListFontAlignment'{$ENDIF},
    sg_Characters_CharacterSetValue name {$IFDEF DARWIN}'_sg_Characters_CharacterSetValue'{$ELSE}'sg_Characters_CharacterSetValue'{$ENDIF},
    sg_Timers_ReleaseTimer name {$IFDEF DARWIN}'_sg_Timers_ReleaseTimer'{$ELSE}'sg_Timers_ReleaseTimer'{$ENDIF},
    sg_Graphics_ColorPeachPuff name {$IFDEF DARWIN}'_sg_Graphics_ColorPeachPuff'{$ELSE}'sg_Graphics_ColorPeachPuff'{$ENDIF},
    sg_Sprites_SpriteLayerNamedHeight name {$IFDEF DARWIN}'_sg_Sprites_SpriteLayerNamedHeight'{$ELSE}'sg_Sprites_SpriteLayerNamedHeight'{$ENDIF},
    sg_Graphics_RGBAColor name {$IFDEF DARWIN}'_sg_Graphics_RGBAColor'{$ELSE}'sg_Graphics_RGBAColor'{$ENDIF},
    sg_Graphics_HSBValuesOf name {$IFDEF DARWIN}'_sg_Graphics_HSBValuesOf'{$ELSE}'sg_Graphics_HSBValuesOf'{$ENDIF},
    sg_Graphics_PopClipBmp name {$IFDEF DARWIN}'_sg_Graphics_PopClipBmp'{$ELSE}'sg_Graphics_PopClipBmp'{$ENDIF},
    sg_Geometry_RectangleCenterBottom name {$IFDEF DARWIN}'_sg_Geometry_RectangleCenterBottom'{$ELSE}'sg_Geometry_RectangleCenterBottom'{$ENDIF},
    sg_Images_DrawBitmapNamed name {$IFDEF DARWIN}'_sg_Images_DrawBitmapNamed'{$ELSE}'sg_Images_DrawBitmapNamed'{$ENDIF},
    sg_Graphics_ColorForestGreen name {$IFDEF DARWIN}'_sg_Graphics_ColorForestGreen'{$ELSE}'sg_Graphics_ColorForestGreen'{$ENDIF},
    sg_UserInterface_PointInRegionWithKind name {$IFDEF DARWIN}'_sg_UserInterface_PointInRegionWithKind'{$ELSE}'sg_UserInterface_PointInRegionWithKind'{$ENDIF},
    sg_Images_DrawBitmapCellAtPointOnto name {$IFDEF DARWIN}'_sg_Images_DrawBitmapCellAtPointOnto'{$ELSE}'sg_Images_DrawBitmapCellAtPointOnto'{$ENDIF},
    sg_Graphics_ToggleWindowBorder name {$IFDEF DARWIN}'_sg_Graphics_ToggleWindowBorder'{$ELSE}'sg_Graphics_ToggleWindowBorder'{$ENDIF},
    sg_Networking_CloseAllSockets name {$IFDEF DARWIN}'_sg_Networking_CloseAllSockets'{$ELSE}'sg_Networking_CloseAllSockets'{$ENDIF},
    sg_UserInterface_TextboxTextWithId name {$IFDEF DARWIN}'_sg_UserInterface_TextboxTextWithId'{$ELSE}'sg_UserInterface_TextboxTextWithId'{$ENDIF},
    sg_Geometry_TriangleFrom name {$IFDEF DARWIN}'_sg_Geometry_TriangleFrom'{$ELSE}'sg_Geometry_TriangleFrom'{$ENDIF},
    sg_Geometry_RectanglesIntersect name {$IFDEF DARWIN}'_sg_Geometry_RectanglesIntersect'{$ELSE}'sg_Geometry_RectanglesIntersect'{$ENDIF},
    sg_Graphics_DrawPixelAtPointOnScreen name {$IFDEF DARWIN}'_sg_Graphics_DrawPixelAtPointOnScreen'{$ELSE}'sg_Graphics_DrawPixelAtPointOnScreen'{$ENDIF},
    sg_Animations_HasAnimationScript name {$IFDEF DARWIN}'_sg_Animations_HasAnimationScript'{$ELSE}'sg_Animations_HasAnimationScript'{$ENDIF},
    sg_Graphics_ColorCyan name {$IFDEF DARWIN}'_sg_Graphics_ColorCyan'{$ELSE}'sg_Graphics_ColorCyan'{$ENDIF},
    sg_Images_BitmapSetCellDetails name {$IFDEF DARWIN}'_sg_Images_BitmapSetCellDetails'{$ELSE}'sg_Images_BitmapSetCellDetails'{$ENDIF},
    sg_Geometry_CircleY name {$IFDEF DARWIN}'_sg_Geometry_CircleY'{$ELSE}'sg_Geometry_CircleY'{$ENDIF},
    sg_Geometry_RectangleTopRight name {$IFDEF DARWIN}'_sg_Geometry_RectangleTopRight'{$ELSE}'sg_Geometry_RectangleTopRight'{$ENDIF},
    sg_Graphics_RGBFloatColor name {$IFDEF DARWIN}'_sg_Graphics_RGBFloatColor'{$ELSE}'sg_Graphics_RGBFloatColor'{$ENDIF},
    sg_Images_BitmapCircleXY name {$IFDEF DARWIN}'_sg_Images_BitmapCircleXY'{$ELSE}'sg_Images_BitmapCircleXY'{$ENDIF},
    sg_Arduino_ReleaseAllArduinoDevices name {$IFDEF DARWIN}'_sg_Arduino_ReleaseAllArduinoDevices'{$ELSE}'sg_Arduino_ReleaseAllArduinoDevices'{$ENDIF},
    sg_Audio_PlaySoundEffectNamedWithLoopAndVolume name {$IFDEF DARWIN}'_sg_Audio_PlaySoundEffectNamedWithLoopAndVolume'{$ELSE}'sg_Audio_PlaySoundEffectNamedWithLoopAndVolume'{$ENDIF},
    sg_Sprites_SpriteShowLayer name {$IFDEF DARWIN}'_sg_Sprites_SpriteShowLayer'{$ELSE}'sg_Sprites_SpriteShowLayer'{$ENDIF},
    sg_Input_ToggleKeyboard name {$IFDEF DARWIN}'_sg_Input_ToggleKeyboard'{$ELSE}'sg_Input_ToggleKeyboard'{$ENDIF},
    sg_Sprites_SpriteSetDX name {$IFDEF DARWIN}'_sg_Sprites_SpriteSetDX'{$ELSE}'sg_Sprites_SpriteSetDX'{$ENDIF},
    sg_Sprites_SpriteSetCollisionKind name {$IFDEF DARWIN}'_sg_Sprites_SpriteSetCollisionKind'{$ELSE}'sg_Sprites_SpriteSetCollisionKind'{$ENDIF},
    sg_Input_MouseY name {$IFDEF DARWIN}'_sg_Input_MouseY'{$ELSE}'sg_Input_MouseY'{$ENDIF},
    sg_Input_ProcessEvents name {$IFDEF DARWIN}'_sg_Input_ProcessEvents'{$ELSE}'sg_Input_ProcessEvents'{$ENDIF},
    sg_Geometry_TranslationMatrix name {$IFDEF DARWIN}'_sg_Geometry_TranslationMatrix'{$ELSE}'sg_Geometry_TranslationMatrix'{$ENDIF},
    sg_Geometry_PointInTriangle name {$IFDEF DARWIN}'_sg_Geometry_PointInTriangle'{$ELSE}'sg_Geometry_PointInTriangle'{$ENDIF},
    sg_Text_TextWidth name {$IFDEF DARWIN}'_sg_Text_TextWidth'{$ELSE}'sg_Text_TextWidth'{$ENDIF},
    sg_UserInterface_RadioGroupFromId name {$IFDEF DARWIN}'_sg_UserInterface_RadioGroupFromId'{$ELSE}'sg_UserInterface_RadioGroupFromId'{$ENDIF},
    sg_UserInterface_ShowPanelNamed name {$IFDEF DARWIN}'_sg_UserInterface_ShowPanelNamed'{$ELSE}'sg_UserInterface_ShowPanelNamed'{$ENDIF},
    sg_Graphics_ColorToString name {$IFDEF DARWIN}'_sg_Graphics_ColorToString'{$ELSE}'sg_Graphics_ColorToString'{$ENDIF},
    sg_Geometry_PointsFromRect name {$IFDEF DARWIN}'_sg_Geometry_PointsFromRect'{$ELSE}'sg_Geometry_PointsFromRect'{$ENDIF},
    sg_Graphics_DrawOrFillEllipseOnto name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillEllipseOnto'{$ELSE}'sg_Graphics_DrawOrFillEllipseOnto'{$ENDIF},
    sg_UserInterface_ListOnPanelWithIdAddItemWithCellAndText name {$IFDEF DARWIN}'_sg_UserInterface_ListOnPanelWithIdAddItemWithCellAndText'{$ELSE}'sg_UserInterface_ListOnPanelWithIdAddItemWithCellAndText'{$ENDIF},
    sg_Images_BitmapsInterchangable name {$IFDEF DARWIN}'_sg_Images_BitmapsInterchangable'{$ELSE}'sg_Images_BitmapsInterchangable'{$ENDIF},
    sg_Input_StartReadingTextWithText name {$IFDEF DARWIN}'_sg_Input_StartReadingTextWithText'{$ELSE}'sg_Input_StartReadingTextWithText'{$ENDIF},
    sg_Characters_CharacterNamed name {$IFDEF DARWIN}'_sg_Characters_CharacterNamed'{$ELSE}'sg_Characters_CharacterNamed'{$ENDIF},
    sg_Geometry_LineSegmentsIntersect name {$IFDEF DARWIN}'_sg_Geometry_LineSegmentsIntersect'{$ELSE}'sg_Geometry_LineSegmentsIntersect'{$ENDIF},
    sg_UserInterface_CheckboxSetState name {$IFDEF DARWIN}'_sg_UserInterface_CheckboxSetState'{$ELSE}'sg_UserInterface_CheckboxSetState'{$ENDIF},
    sg_Networking_CreateUDPConnection name {$IFDEF DARWIN}'_sg_Networking_CreateUDPConnection'{$ELSE}'sg_Networking_CreateUDPConnection'{$ENDIF},
    sg_Text_DrawTextAtPoint name {$IFDEF DARWIN}'_sg_Text_DrawTextAtPoint'{$ELSE}'sg_Text_DrawTextAtPoint'{$ENDIF},
    sg_Sprites_HasSpritePack name {$IFDEF DARWIN}'_sg_Sprites_HasSpritePack'{$ELSE}'sg_Sprites_HasSpritePack'{$ENDIF},
    sg_UserInterface_ListAddBitmapAndTextItemFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_ListAddBitmapAndTextItemFromRegion'{$ELSE}'sg_UserInterface_ListAddBitmapAndTextItemFromRegion'{$ENDIF},
    sg_Graphics_DrawOrFillCircleStructOnScreen name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillCircleStructOnScreen'{$ELSE}'sg_Graphics_DrawOrFillCircleStructOnScreen'{$ENDIF},
    sg_Images_RotateScaleBitmap name {$IFDEF DARWIN}'_sg_Images_RotateScaleBitmap'{$ELSE}'sg_Images_RotateScaleBitmap'{$ENDIF},
    sg_Camera_RectOnScreen name {$IFDEF DARWIN}'_sg_Camera_RectOnScreen'{$ELSE}'sg_Camera_RectOnScreen'{$ENDIF},
    sg_Physics_TriangleLineCollision name {$IFDEF DARWIN}'_sg_Physics_TriangleLineCollision'{$ELSE}'sg_Physics_TriangleLineCollision'{$ENDIF},
    sg_Graphics_ColorSilver name {$IFDEF DARWIN}'_sg_Graphics_ColorSilver'{$ELSE}'sg_Graphics_ColorSilver'{$ENDIF},
    sg_Sprites_SpriteRotation name {$IFDEF DARWIN}'_sg_Sprites_SpriteRotation'{$ELSE}'sg_Sprites_SpriteRotation'{$ENDIF},
    sg_Timers_TimerTicksNamed name {$IFDEF DARWIN}'_sg_Timers_TimerTicksNamed'{$ELSE}'sg_Timers_TimerTicksNamed'{$ENDIF},
    sg_UserInterface_ActiveRadioButtonIndexFromID name {$IFDEF DARWIN}'_sg_UserInterface_ActiveRadioButtonIndexFromID'{$ELSE}'sg_UserInterface_ActiveRadioButtonIndexFromID'{$ENDIF},
    sg_Sprites_SpriteX name {$IFDEF DARWIN}'_sg_Sprites_SpriteX'{$ELSE}'sg_Sprites_SpriteX'{$ENDIF},
    sg_Input_MouseMovement name {$IFDEF DARWIN}'_sg_Input_MouseMovement'{$ELSE}'sg_Input_MouseMovement'{$ENDIF},
    sg_Graphics_ColorWheat name {$IFDEF DARWIN}'_sg_Graphics_ColorWheat'{$ELSE}'sg_Graphics_ColorWheat'{$ENDIF},
    sg_Text_DrawTextOnBitmapWithFontNamedAndSize name {$IFDEF DARWIN}'_sg_Text_DrawTextOnBitmapWithFontNamedAndSize'{$ELSE}'sg_Text_DrawTextOnBitmapWithFontNamedAndSize'{$ENDIF},
    sg_Graphics_SetBmpClipXY name {$IFDEF DARWIN}'_sg_Graphics_SetBmpClipXY'{$ELSE}'sg_Graphics_SetBmpClipXY'{$ENDIF},
    sg_Geometry_FixRect name {$IFDEF DARWIN}'_sg_Geometry_FixRect'{$ELSE}'sg_Geometry_FixRect'{$ENDIF},
    sg_UserInterface_TextboxSetText name {$IFDEF DARWIN}'_sg_UserInterface_TextboxSetText'{$ELSE}'sg_UserInterface_TextboxSetText'{$ENDIF},
    sg_UserInterface_ListItemCount name {$IFDEF DARWIN}'_sg_UserInterface_ListItemCount'{$ELSE}'sg_UserInterface_ListItemCount'{$ENDIF},
    sg_Input_StartReadingText name {$IFDEF DARWIN}'_sg_Input_StartReadingText'{$ELSE}'sg_Input_StartReadingText'{$ENDIF},
    sg_Physics_CircleLinesCollision name {$IFDEF DARWIN}'_sg_Physics_CircleLinesCollision'{$ELSE}'sg_Physics_CircleLinesCollision'{$ENDIF},
    sg_Sprites_SpriteCollisionRectangle name {$IFDEF DARWIN}'_sg_Sprites_SpriteCollisionRectangle'{$ELSE}'sg_Sprites_SpriteCollisionRectangle'{$ENDIF},
    sg_Geometry_CreateVectorToPoint name {$IFDEF DARWIN}'_sg_Geometry_CreateVectorToPoint'{$ELSE}'sg_Geometry_CreateVectorToPoint'{$ENDIF},
    sg_Networking_CreateTCPConnection name {$IFDEF DARWIN}'_sg_Networking_CreateTCPConnection'{$ELSE}'sg_Networking_CreateTCPConnection'{$ENDIF},
    sg_Geometry_PointInCircle name {$IFDEF DARWIN}'_sg_Geometry_PointInCircle'{$ELSE}'sg_Geometry_PointInCircle'{$ENDIF},
    sg_Graphics_DrawVerticalLine name {$IFDEF DARWIN}'_sg_Graphics_DrawVerticalLine'{$ELSE}'sg_Graphics_DrawVerticalLine'{$ENDIF},
    sg_UserInterface_ListItemCountFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_ListItemCountFromRegion'{$ELSE}'sg_UserInterface_ListItemCountFromRegion'{$ENDIF},
    sg_Sprites_SpriteLayerOffset name {$IFDEF DARWIN}'_sg_Sprites_SpriteLayerOffset'{$ELSE}'sg_Sprites_SpriteLayerOffset'{$ENDIF},
    sg_UserInterface_ListSet name {$IFDEF DARWIN}'_sg_UserInterface_ListSet'{$ELSE}'sg_UserInterface_ListSet'{$ENDIF},
    sg_Animations_LoadAnimationScript name {$IFDEF DARWIN}'_sg_Animations_LoadAnimationScript'{$ELSE}'sg_Animations_LoadAnimationScript'{$ENDIF},
    sg_UserInterface_ListActiveItemText name {$IFDEF DARWIN}'_sg_UserInterface_ListActiveItemText'{$ELSE}'sg_UserInterface_ListActiveItemText'{$ENDIF},
    sg_Timers_StartTimerNamed name {$IFDEF DARWIN}'_sg_Timers_StartTimerNamed'{$ELSE}'sg_Timers_StartTimerNamed'{$ENDIF},
    sg_Physics_CellCollisionAtPt name {$IFDEF DARWIN}'_sg_Physics_CellCollisionAtPt'{$ELSE}'sg_Physics_CellCollisionAtPt'{$ENDIF},
    sg_Graphics_ColorSandyBrown name {$IFDEF DARWIN}'_sg_Graphics_ColorSandyBrown'{$ELSE}'sg_Graphics_ColorSandyBrown'{$ENDIF},
    sg_Sprites_SpriteValue name {$IFDEF DARWIN}'_sg_Sprites_SpriteValue'{$ELSE}'sg_Sprites_SpriteValue'{$ENDIF},
    sg_Graphics_TransparencyOf name {$IFDEF DARWIN}'_sg_Graphics_TransparencyOf'{$ELSE}'sg_Graphics_TransparencyOf'{$ENDIF},
    sg_UserInterface_ListAddBitmapAndTextItem name {$IFDEF DARWIN}'_sg_UserInterface_ListAddBitmapAndTextItem'{$ELSE}'sg_UserInterface_ListAddBitmapAndTextItem'{$ENDIF},
    sg_Sprites_SpriteVisibleLayer name {$IFDEF DARWIN}'_sg_Sprites_SpriteVisibleLayer'{$ELSE}'sg_Sprites_SpriteVisibleLayer'{$ENDIF},
    sg_Networking_SendTCPMessage name {$IFDEF DARWIN}'_sg_Networking_SendTCPMessage'{$ELSE}'sg_Networking_SendTCPMessage'{$ENDIF},
    sg_Geometry_RayCircleIntersectDistance name {$IFDEF DARWIN}'_sg_Geometry_RayCircleIntersectDistance'{$ELSE}'sg_Geometry_RayCircleIntersectDistance'{$ENDIF},
    sg_Graphics_DrawOrFillRectangle name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillRectangle'{$ELSE}'sg_Graphics_DrawOrFillRectangle'{$ENDIF},
    sg_Networking_FetchConnection name {$IFDEF DARWIN}'_sg_Networking_FetchConnection'{$ELSE}'sg_Networking_FetchConnection'{$ENDIF},
    sg_Resources_LoadResourceBundle name {$IFDEF DARWIN}'_sg_Resources_LoadResourceBundle'{$ELSE}'sg_Resources_LoadResourceBundle'{$ENDIF},
    sg_Geometry_VectorMagnitude name {$IFDEF DARWIN}'_sg_Geometry_VectorMagnitude'{$ELSE}'sg_Geometry_VectorMagnitude'{$ENDIF},
    sg_UserInterface_TextboxSetFont name {$IFDEF DARWIN}'_sg_UserInterface_TextboxSetFont'{$ELSE}'sg_UserInterface_TextboxSetFont'{$ENDIF},
    sg_UserInterface_MovePanel name {$IFDEF DARWIN}'_sg_UserInterface_MovePanel'{$ELSE}'sg_UserInterface_MovePanel'{$ENDIF},
    sg_Graphics_ColorGrey name {$IFDEF DARWIN}'_sg_Graphics_ColorGrey'{$ELSE}'sg_Graphics_ColorGrey'{$ENDIF},
    sg_Sprites_CreateBasicSpriteXY name {$IFDEF DARWIN}'_sg_Sprites_CreateBasicSpriteXY'{$ELSE}'sg_Sprites_CreateBasicSpriteXY'{$ENDIF},
    sg_Graphics_DrawHorizontalLineOnScreen name {$IFDEF DARWIN}'_sg_Graphics_DrawHorizontalLineOnScreen'{$ELSE}'sg_Graphics_DrawHorizontalLineOnScreen'{$ENDIF},
    sg_UserInterface_TextboxSetTextToIntFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_TextboxSetTextToIntFromRegion'{$ELSE}'sg_UserInterface_TextboxSetTextToIntFromRegion'{$ENDIF},
    sg_Geometry_LineIntersectsCircle name {$IFDEF DARWIN}'_sg_Geometry_LineIntersectsCircle'{$ELSE}'sg_Geometry_LineIntersectsCircle'{$ENDIF},
    sg_Characters_CharacterSetValueByName name {$IFDEF DARWIN}'_sg_Characters_CharacterSetValueByName'{$ELSE}'sg_Characters_CharacterSetValueByName'{$ENDIF},
    sg_Images_BitmapRectAtOrigin name {$IFDEF DARWIN}'_sg_Images_BitmapRectAtOrigin'{$ELSE}'sg_Images_BitmapRectAtOrigin'{$ENDIF},
    sg_Input_TextEntryCancelled name {$IFDEF DARWIN}'_sg_Input_TextEntryCancelled'{$ELSE}'sg_Input_TextEntryCancelled'{$ENDIF},
    sg_Text_TextHeight name {$IFDEF DARWIN}'_sg_Text_TextHeight'{$ELSE}'sg_Text_TextHeight'{$ENDIF},
    sg_Timers_TimerTicks name {$IFDEF DARWIN}'_sg_Timers_TimerTicks'{$ELSE}'sg_Timers_TimerTicks'{$ENDIF},
    sg_Graphics_ColorGainsboro name {$IFDEF DARWIN}'_sg_Graphics_ColorGainsboro'{$ELSE}'sg_Graphics_ColorGainsboro'{$ENDIF},
    sg_Images_CreateBitmap name {$IFDEF DARWIN}'_sg_Images_CreateBitmap'{$ELSE}'sg_Images_CreateBitmap'{$ENDIF},
    sg_Graphics_ColorGold name {$IFDEF DARWIN}'_sg_Graphics_ColorGold'{$ELSE}'sg_Graphics_ColorGold'{$ENDIF},
    sg_UserInterface_RegionY name {$IFDEF DARWIN}'_sg_UserInterface_RegionY'{$ELSE}'sg_UserInterface_RegionY'{$ENDIF},
    sg_Text_TextAlignmentFrom name {$IFDEF DARWIN}'_sg_Text_TextAlignmentFrom'{$ELSE}'sg_Text_TextAlignmentFrom'{$ENDIF},
    sg_Images_BitmapCellCount name {$IFDEF DARWIN}'_sg_Images_BitmapCellCount'{$ELSE}'sg_Images_BitmapCellCount'{$ENDIF},
    sg_Sprites_SpriteDY name {$IFDEF DARWIN}'_sg_Sprites_SpriteDY'{$ELSE}'sg_Sprites_SpriteDY'{$ENDIF},
    sg_Sprites_SpriteLayerCircle name {$IFDEF DARWIN}'_sg_Sprites_SpriteLayerCircle'{$ELSE}'sg_Sprites_SpriteLayerCircle'{$ENDIF},
    sg_UserInterface_DrawInterface name {$IFDEF DARWIN}'_sg_UserInterface_DrawInterface'{$ELSE}'sg_UserInterface_DrawInterface'{$ENDIF},
    sg_UserInterface_GUIClicked name {$IFDEF DARWIN}'_sg_UserInterface_GUIClicked'{$ELSE}'sg_UserInterface_GUIClicked'{$ENDIF},
    sg_Sprites_SpriteValueNames name {$IFDEF DARWIN}'_sg_Sprites_SpriteValueNames'{$ELSE}'sg_Sprites_SpriteValueNames'{$ENDIF},
    sg_Utils_SwinGameVersion name {$IFDEF DARWIN}'_sg_Utils_SwinGameVersion'{$ELSE}'sg_Utils_SwinGameVersion'{$ENDIF},
    sg_Animations_ResetAnimationWithSound name {$IFDEF DARWIN}'_sg_Animations_ResetAnimationWithSound'{$ELSE}'sg_Animations_ResetAnimationWithSound'{$ENDIF},
    sg_Graphics_DrawOrFillRectangleStructOnto name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillRectangleStructOnto'{$ELSE}'sg_Graphics_DrawOrFillRectangleStructOnto'{$ENDIF},
    sg_Sprites_SpriteCollisionCircle name {$IFDEF DARWIN}'_sg_Sprites_SpriteCollisionCircle'{$ELSE}'sg_Sprites_SpriteCollisionCircle'{$ENDIF},
    sg_Graphics_ColorLightSteelBlue name {$IFDEF DARWIN}'_sg_Graphics_ColorLightSteelBlue'{$ELSE}'sg_Graphics_ColorLightSteelBlue'{$ENDIF},
    sg_Geometry_VectorFromPointToRect name {$IFDEF DARWIN}'_sg_Geometry_VectorFromPointToRect'{$ELSE}'sg_Geometry_VectorFromPointToRect'{$ENDIF},
    sg_Arduino_ArduinoReadLine name {$IFDEF DARWIN}'_sg_Arduino_ArduinoReadLine'{$ELSE}'sg_Arduino_ArduinoReadLine'{$ENDIF},
    sg_Graphics_ColorAqua name {$IFDEF DARWIN}'_sg_Graphics_ColorAqua'{$ELSE}'sg_Graphics_ColorAqua'{$ENDIF},
    sg_Camera_ToScreenX name {$IFDEF DARWIN}'_sg_Camera_ToScreenX'{$ELSE}'sg_Camera_ToScreenX'{$ENDIF},
    sg_Images_DrawBitmapPartFromRectAtPointOnto name {$IFDEF DARWIN}'_sg_Images_DrawBitmapPartFromRectAtPointOnto'{$ELSE}'sg_Images_DrawBitmapPartFromRectAtPointOnto'{$ENDIF},
    sg_Physics_CircleTriangleCollision name {$IFDEF DARWIN}'_sg_Physics_CircleTriangleCollision'{$ELSE}'sg_Physics_CircleTriangleCollision'{$ENDIF},
    sg_Geometry_VectorOutOfCircleFromCircle name {$IFDEF DARWIN}'_sg_Geometry_VectorOutOfCircleFromCircle'{$ELSE}'sg_Geometry_VectorOutOfCircleFromCircle'{$ENDIF},
    sg_UserInterface_PanelWasClicked name {$IFDEF DARWIN}'_sg_UserInterface_PanelWasClicked'{$ELSE}'sg_UserInterface_PanelWasClicked'{$ENDIF},
    sg_Images_DrawBitmapPartFromRect name {$IFDEF DARWIN}'_sg_Images_DrawBitmapPartFromRect'{$ELSE}'sg_Images_DrawBitmapPartFromRect'{$ENDIF},
    sg_Geometry_LineFromVectorWithStartPoint name {$IFDEF DARWIN}'_sg_Geometry_LineFromVectorWithStartPoint'{$ELSE}'sg_Geometry_LineFromVectorWithStartPoint'{$ENDIF},
    sg_Physics_SpriteCollision name {$IFDEF DARWIN}'_sg_Physics_SpriteCollision'{$ELSE}'sg_Physics_SpriteCollision'{$ENDIF},
    sg_Sprites_SpriteSendLayerToBack name {$IFDEF DARWIN}'_sg_Sprites_SpriteSendLayerToBack'{$ELSE}'sg_Sprites_SpriteSendLayerToBack'{$ENDIF},
    sg_Geometry_PointAtStartWithOffset name {$IFDEF DARWIN}'_sg_Geometry_PointAtStartWithOffset'{$ELSE}'sg_Geometry_PointAtStartWithOffset'{$ENDIF},
    sg_Graphics_ColorLightCoral name {$IFDEF DARWIN}'_sg_Graphics_ColorLightCoral'{$ELSE}'sg_Graphics_ColorLightCoral'{$ENDIF},
    sg_Graphics_BrightnessOf name {$IFDEF DARWIN}'_sg_Graphics_BrightnessOf'{$ELSE}'sg_Graphics_BrightnessOf'{$ENDIF},
    sg_Sprites_SpriteSetVelocity name {$IFDEF DARWIN}'_sg_Sprites_SpriteSetVelocity'{$ELSE}'sg_Sprites_SpriteSetVelocity'{$ENDIF},
    sg_Geometry_MatrixToString name {$IFDEF DARWIN}'_sg_Geometry_MatrixToString'{$ELSE}'sg_Geometry_MatrixToString'{$ENDIF},
    sg_Sprites_CreateSpriteWithLayerAndAnimationNamed name {$IFDEF DARWIN}'_sg_Sprites_CreateSpriteWithLayerAndAnimationNamed'{$ELSE}'sg_Sprites_CreateSpriteWithLayerAndAnimationNamed'{$ENDIF},
    sg_Sprites_SpriteOnScreenAt name {$IFDEF DARWIN}'_sg_Sprites_SpriteOnScreenAt'{$ELSE}'sg_Sprites_SpriteOnScreenAt'{$ENDIF},
    sg_Graphics_GetPixel name {$IFDEF DARWIN}'_sg_Graphics_GetPixel'{$ELSE}'sg_Graphics_GetPixel'{$ENDIF},
    sg_UserInterface_ListAddItemByBitmapFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_ListAddItemByBitmapFromRegion'{$ELSE}'sg_UserInterface_ListAddItemByBitmapFromRegion'{$ENDIF},
    sg_Geometry_CircleAt name {$IFDEF DARWIN}'_sg_Geometry_CircleAt'{$ELSE}'sg_Geometry_CircleAt'{$ENDIF},
    sg_Sprites_SpriteHeading name {$IFDEF DARWIN}'_sg_Sprites_SpriteHeading'{$ELSE}'sg_Sprites_SpriteHeading'{$ENDIF},
    sg_UserInterface_ListWithIdActiveItemText name {$IFDEF DARWIN}'_sg_UserInterface_ListWithIdActiveItemText'{$ELSE}'sg_UserInterface_ListWithIdActiveItemText'{$ENDIF},
    sg_Geometry_VectorAngle name {$IFDEF DARWIN}'_sg_Geometry_VectorAngle'{$ELSE}'sg_Geometry_VectorAngle'{$ENDIF},
    sg_Sprites_DrawSpriteOffsetPoint name {$IFDEF DARWIN}'_sg_Sprites_DrawSpriteOffsetPoint'{$ELSE}'sg_Sprites_DrawSpriteOffsetPoint'{$ENDIF},
    sg_Sprites_SpriteSetLayerOffsets name {$IFDEF DARWIN}'_sg_Sprites_SpriteSetLayerOffsets'{$ELSE}'sg_Sprites_SpriteSetLayerOffsets'{$ENDIF},
    sg_Images_BitmapCellCircle name {$IFDEF DARWIN}'_sg_Images_BitmapCellCircle'{$ELSE}'sg_Images_BitmapCellCircle'{$ENDIF},
    sg_Graphics_ColorDimGray name {$IFDEF DARWIN}'_sg_Graphics_ColorDimGray'{$ELSE}'sg_Graphics_ColorDimGray'{$ENDIF},
    sg_Audio_LoadSoundEffect name {$IFDEF DARWIN}'_sg_Audio_LoadSoundEffect'{$ELSE}'sg_Audio_LoadSoundEffect'{$ENDIF},
    sg_UserInterface_AddItemOnPanelWithIdByText name {$IFDEF DARWIN}'_sg_UserInterface_AddItemOnPanelWithIdByText'{$ELSE}'sg_UserInterface_AddItemOnPanelWithIdByText'{$ENDIF},
    sg_Sprites_SpriteLayerAtIdx name {$IFDEF DARWIN}'_sg_Sprites_SpriteLayerAtIdx'{$ELSE}'sg_Sprites_SpriteLayerAtIdx'{$ENDIF},
    sg_Geometry_VectorOutOfRectFromPoint name {$IFDEF DARWIN}'_sg_Geometry_VectorOutOfRectFromPoint'{$ELSE}'sg_Geometry_VectorOutOfRectFromPoint'{$ENDIF},
    sg_Graphics_DrawOrFillCircleAtPointOnto name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillCircleAtPointOnto'{$ELSE}'sg_Graphics_DrawOrFillCircleAtPointOnto'{$ENDIF},
    sg_UserInterface_LabelAlignment name {$IFDEF DARWIN}'_sg_UserInterface_LabelAlignment'{$ELSE}'sg_UserInterface_LabelAlignment'{$ENDIF},
    sg_Graphics_DrawVerticalLineOnto name {$IFDEF DARWIN}'_sg_Graphics_DrawVerticalLineOnto'{$ELSE}'sg_Graphics_DrawVerticalLineOnto'{$ENDIF},
    sg_UserInterface_ListActiveItemIndex name {$IFDEF DARWIN}'_sg_UserInterface_ListActiveItemIndex'{$ELSE}'sg_UserInterface_ListActiveItemIndex'{$ENDIF},
    sg_Sprites_UpdateSpritePctWithSound name {$IFDEF DARWIN}'_sg_Sprites_UpdateSpritePctWithSound'{$ELSE}'sg_Sprites_UpdateSpritePctWithSound'{$ENDIF},
    sg_Images_DrawBitmapOnScreen name {$IFDEF DARWIN}'_sg_Images_DrawBitmapOnScreen'{$ELSE}'sg_Images_DrawBitmapOnScreen'{$ENDIF},
    sg_UserInterface_GUISetForegroundColorInactive name {$IFDEF DARWIN}'_sg_UserInterface_GUISetForegroundColorInactive'{$ELSE}'sg_UserInterface_GUISetForegroundColorInactive'{$ENDIF},
    sg_Geometry_CreateLinePointToPoint name {$IFDEF DARWIN}'_sg_Geometry_CreateLinePointToPoint'{$ELSE}'sg_Geometry_CreateLinePointToPoint'{$ENDIF},
    sg_Animations_AnimationFrameTime name {$IFDEF DARWIN}'_sg_Animations_AnimationFrameTime'{$ELSE}'sg_Animations_AnimationFrameTime'{$ENDIF},
    sg_UserInterface_SetRegionActive name {$IFDEF DARWIN}'_sg_UserInterface_SetRegionActive'{$ELSE}'sg_UserInterface_SetRegionActive'{$ENDIF},
    sg_Graphics_ColorSienna name {$IFDEF DARWIN}'_sg_Graphics_ColorSienna'{$ELSE}'sg_Graphics_ColorSienna'{$ENDIF},
    sg_Geometry_LineFromVectorWithStartXY name {$IFDEF DARWIN}'_sg_Geometry_LineFromVectorWithStartXY'{$ELSE}'sg_Geometry_LineFromVectorWithStartXY'{$ENDIF},
    sg_Graphics_GetPixelFromScreen name {$IFDEF DARWIN}'_sg_Graphics_GetPixelFromScreen'{$ELSE}'sg_Graphics_GetPixelFromScreen'{$ENDIF},
    sg_Graphics_OpenGraphicsWindow name {$IFDEF DARWIN}'_sg_Graphics_OpenGraphicsWindow'{$ELSE}'sg_Graphics_OpenGraphicsWindow'{$ENDIF},
    sg_UserInterface_RegionClickedID name {$IFDEF DARWIN}'_sg_UserInterface_RegionClickedID'{$ELSE}'sg_UserInterface_RegionClickedID'{$ENDIF},
    sg_Graphics_ColorPink name {$IFDEF DARWIN}'_sg_Graphics_ColorPink'{$ELSE}'sg_Graphics_ColorPink'{$ENDIF},
    sg_Characters_DrawCharacterSprite name {$IFDEF DARWIN}'_sg_Characters_DrawCharacterSprite'{$ELSE}'sg_Characters_DrawCharacterSprite'{$ENDIF},
    sg_Geometry_VectorsNotEqual name {$IFDEF DARWIN}'_sg_Geometry_VectorsNotEqual'{$ELSE}'sg_Geometry_VectorsNotEqual'{$ENDIF},
    sg_UserInterface_FinishReadingText name {$IFDEF DARWIN}'_sg_UserInterface_FinishReadingText'{$ELSE}'sg_UserInterface_FinishReadingText'{$ENDIF},
    sg_Camera_MoveCameraTo name {$IFDEF DARWIN}'_sg_Camera_MoveCameraTo'{$ELSE}'sg_Camera_MoveCameraTo'{$ENDIF},
    sg_Timers_ResumeTimerNamed name {$IFDEF DARWIN}'_sg_Timers_ResumeTimerNamed'{$ELSE}'sg_Timers_ResumeTimerNamed'{$ENDIF},
    sg_UserInterface_ListActiveItemIndexFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_ListActiveItemIndexFromRegion'{$ELSE}'sg_UserInterface_ListActiveItemIndexFromRegion'{$ENDIF},
    sg_Sprites_SpriteStartAnimation name {$IFDEF DARWIN}'_sg_Sprites_SpriteStartAnimation'{$ELSE}'sg_Sprites_SpriteStartAnimation'{$ENDIF},
    sg_Geometry_Cosine name {$IFDEF DARWIN}'_sg_Geometry_Cosine'{$ELSE}'sg_Geometry_Cosine'{$ENDIF},
    sg_Images_DrawBitmapOnto name {$IFDEF DARWIN}'_sg_Images_DrawBitmapOnto'{$ELSE}'sg_Images_DrawBitmapOnto'{$ENDIF},
    sg_Sprites_DrawAllSprites name {$IFDEF DARWIN}'_sg_Sprites_DrawAllSprites'{$ELSE}'sg_Sprites_DrawAllSprites'{$ENDIF},
    sg_Geometry_LineIntersectionPoint name {$IFDEF DARWIN}'_sg_Geometry_LineIntersectionPoint'{$ELSE}'sg_Geometry_LineIntersectionPoint'{$ENDIF},
    sg_Physics_RectLineCollision name {$IFDEF DARWIN}'_sg_Physics_RectLineCollision'{$ELSE}'sg_Physics_RectLineCollision'{$ENDIF},
    sg_Graphics_ColorFloralWhite name {$IFDEF DARWIN}'_sg_Graphics_ColorFloralWhite'{$ELSE}'sg_Graphics_ColorFloralWhite'{$ENDIF},
    sg_UserInterface_SetLabelAlignmentFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_SetLabelAlignmentFromRegion'{$ELSE}'sg_UserInterface_SetLabelAlignmentFromRegion'{$ENDIF},
    sg_Text_DrawTextLinesInRectOnBitmapWithFontNamed name {$IFDEF DARWIN}'_sg_Text_DrawTextLinesInRectOnBitmapWithFontNamed'{$ELSE}'sg_Text_DrawTextLinesInRectOnBitmapWithFontNamed'{$ENDIF},
    sg_Graphics_ColorTransparent name {$IFDEF DARWIN}'_sg_Graphics_ColorTransparent'{$ELSE}'sg_Graphics_ColorTransparent'{$ENDIF},
    sg_Sprites_SpriteSetSpeed name {$IFDEF DARWIN}'_sg_Sprites_SpriteSetSpeed'{$ELSE}'sg_Sprites_SpriteSetSpeed'{$ENDIF},
    sg_UserInterface_TextboxSetAlignment name {$IFDEF DARWIN}'_sg_UserInterface_TextboxSetAlignment'{$ELSE}'sg_UserInterface_TextboxSetAlignment'{$ENDIF},
    sg_Sprites_SpriteReplayAnimation name {$IFDEF DARWIN}'_sg_Sprites_SpriteReplayAnimation'{$ELSE}'sg_Sprites_SpriteReplayAnimation'{$ENDIF},
    sg_Text_ReleaseAllFonts name {$IFDEF DARWIN}'_sg_Text_ReleaseAllFonts'{$ELSE}'sg_Text_ReleaseAllFonts'{$ENDIF},
    sg_Graphics_ColorBrightGreen name {$IFDEF DARWIN}'_sg_Graphics_ColorBrightGreen'{$ELSE}'sg_Graphics_ColorBrightGreen'{$ENDIF},
    sg_Sprites_SpriteVisibleLayerCount name {$IFDEF DARWIN}'_sg_Sprites_SpriteVisibleLayerCount'{$ELSE}'sg_Sprites_SpriteVisibleLayerCount'{$ENDIF},
    sg_Geometry_RayIntersectionPoint name {$IFDEF DARWIN}'_sg_Geometry_RayIntersectionPoint'{$ELSE}'sg_Geometry_RayIntersectionPoint'{$ENDIF},
    sg_Graphics_ColorBrown name {$IFDEF DARWIN}'_sg_Graphics_ColorBrown'{$ELSE}'sg_Graphics_ColorBrown'{$ENDIF},
    sg_UserInterface_TextboxSetTextToIntOnPanelWithId name {$IFDEF DARWIN}'_sg_UserInterface_TextboxSetTextToIntOnPanelWithId'{$ELSE}'sg_UserInterface_TextboxSetTextToIntOnPanelWithId'{$ENDIF},
    sg_UserInterface_PanelName name {$IFDEF DARWIN}'_sg_UserInterface_PanelName'{$ELSE}'sg_UserInterface_PanelName'{$ENDIF},
    sg_Camera_SetCameraPos name {$IFDEF DARWIN}'_sg_Camera_SetCameraPos'{$ELSE}'sg_Camera_SetCameraPos'{$ENDIF},
    sg_UserInterface_ListSetFontAlignmentFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_ListSetFontAlignmentFromRegion'{$ELSE}'sg_UserInterface_ListSetFontAlignmentFromRegion'{$ENDIF},
    sg_Geometry_CreateVectorFromPoints name {$IFDEF DARWIN}'_sg_Geometry_CreateVectorFromPoints'{$ELSE}'sg_Geometry_CreateVectorFromPoints'{$ENDIF},
    sg_UserInterface_ActiveRadioButton name {$IFDEF DARWIN}'_sg_UserInterface_ActiveRadioButton'{$ELSE}'sg_UserInterface_ActiveRadioButton'{$ENDIF},
    sg_Networking_CloseConnection name {$IFDEF DARWIN}'_sg_Networking_CloseConnection'{$ELSE}'sg_Networking_CloseConnection'{$ENDIF},
    sg_Sprites_CreateSpriteWithAnimationXY name {$IFDEF DARWIN}'_sg_Sprites_CreateSpriteWithAnimationXY'{$ELSE}'sg_Sprites_CreateSpriteWithAnimationXY'{$ENDIF},
    sg_Graphics_ColorLemonChiffon name {$IFDEF DARWIN}'_sg_Graphics_ColorLemonChiffon'{$ELSE}'sg_Graphics_ColorLemonChiffon'{$ENDIF},
    sg_Physics_BitmapPartAtPtRectCollision name {$IFDEF DARWIN}'_sg_Physics_BitmapPartAtPtRectCollision'{$ELSE}'sg_Physics_BitmapPartAtPtRectCollision'{$ENDIF},
    sg_UserInterface_RegionOfLastUpdatedTextBox name {$IFDEF DARWIN}'_sg_UserInterface_RegionOfLastUpdatedTextBox'{$ELSE}'sg_UserInterface_RegionOfLastUpdatedTextBox'{$ENDIF},
    sg_Sprites_CreateLayeredSpriteNamed name {$IFDEF DARWIN}'_sg_Sprites_CreateLayeredSpriteNamed'{$ELSE}'sg_Sprites_CreateLayeredSpriteNamed'{$ENDIF},
    sg_UserInterface_GUISetActiveTextboxFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_GUISetActiveTextboxFromRegion'{$ELSE}'sg_UserInterface_GUISetActiveTextboxFromRegion'{$ENDIF},
    sg_Sprites_ReplayAnimationWithSound name {$IFDEF DARWIN}'_sg_Sprites_ReplayAnimationWithSound'{$ELSE}'sg_Sprites_ReplayAnimationWithSound'{$ENDIF},
    sg_Graphics_ColorPaleVioletRed name {$IFDEF DARWIN}'_sg_Graphics_ColorPaleVioletRed'{$ELSE}'sg_Graphics_ColorPaleVioletRed'{$ENDIF},
    sg_UserInterface_GUISetForegroundColor name {$IFDEF DARWIN}'_sg_UserInterface_GUISetForegroundColor'{$ELSE}'sg_UserInterface_GUISetForegroundColor'{$ENDIF},
    sg_Graphics_ColorFromBitmap name {$IFDEF DARWIN}'_sg_Graphics_ColorFromBitmap'{$ELSE}'sg_Graphics_ColorFromBitmap'{$ENDIF},
    sg_Images_LoadBitmapNamed name {$IFDEF DARWIN}'_sg_Images_LoadBitmapNamed'{$ELSE}'sg_Images_LoadBitmapNamed'{$ENDIF},
    sg_Graphics_RedOf name {$IFDEF DARWIN}'_sg_Graphics_RedOf'{$ELSE}'sg_Graphics_RedOf'{$ENDIF},
    sg_Graphics_ColorFuchsia name {$IFDEF DARWIN}'_sg_Graphics_ColorFuchsia'{$ELSE}'sg_Graphics_ColorFuchsia'{$ENDIF},
    sg_Sprites_SpriteLayerNamed name {$IFDEF DARWIN}'_sg_Sprites_SpriteLayerNamed'{$ELSE}'sg_Sprites_SpriteLayerNamed'{$ENDIF},
    sg_Graphics_ColorLightPink name {$IFDEF DARWIN}'_sg_Graphics_ColorLightPink'{$ELSE}'sg_Graphics_ColorLightPink'{$ENDIF},
    sg_UserInterface_AddItemWithIdByText name {$IFDEF DARWIN}'_sg_UserInterface_AddItemWithIdByText'{$ELSE}'sg_UserInterface_AddItemWithIdByText'{$ENDIF},
    sg_Geometry_TriangleToString name {$IFDEF DARWIN}'_sg_Geometry_TriangleToString'{$ELSE}'sg_Geometry_TriangleToString'{$ENDIF},
    sg_Geometry_RectangleOffset name {$IFDEF DARWIN}'_sg_Geometry_RectangleOffset'{$ELSE}'sg_Geometry_RectangleOffset'{$ENDIF},
    sg_Graphics_ColorOrangeRed name {$IFDEF DARWIN}'_sg_Graphics_ColorOrangeRed'{$ELSE}'sg_Graphics_ColorOrangeRed'{$ENDIF},
    sg_Utils_CalculateFramerate name {$IFDEF DARWIN}'_sg_Utils_CalculateFramerate'{$ELSE}'sg_Utils_CalculateFramerate'{$ENDIF},
    sg_Arduino_CreateArduinoNamed name {$IFDEF DARWIN}'_sg_Arduino_CreateArduinoNamed'{$ELSE}'sg_Arduino_CreateArduinoNamed'{$ENDIF},
    sg_Characters_DrawCharacter name {$IFDEF DARWIN}'_sg_Characters_DrawCharacter'{$ELSE}'sg_Characters_DrawCharacter'{$ENDIF},
    sg_Physics_CircleRectCollision name {$IFDEF DARWIN}'_sg_Physics_CircleRectCollision'{$ELSE}'sg_Physics_CircleRectCollision'{$ENDIF},
    sg_Images_CombineIntoGrid name {$IFDEF DARWIN}'_sg_Images_CombineIntoGrid'{$ELSE}'sg_Images_CombineIntoGrid'{$ENDIF},
    sg_Characters_CharacterDirectionCount name {$IFDEF DARWIN}'_sg_Characters_CharacterDirectionCount'{$ELSE}'sg_Characters_CharacterDirectionCount'{$ENDIF},
    sg_Input_StartReadingTextWithTextInArea name {$IFDEF DARWIN}'_sg_Input_StartReadingTextWithTextInArea'{$ELSE}'sg_Input_StartReadingTextWithTextInArea'{$ENDIF},
    sg_Camera_ToWorldY name {$IFDEF DARWIN}'_sg_Camera_ToWorldY'{$ELSE}'sg_Camera_ToWorldY'{$ENDIF},
    sg_Geometry_PointOnLineXYXY name {$IFDEF DARWIN}'_sg_Geometry_PointOnLineXYXY'{$ELSE}'sg_Geometry_PointOnLineXYXY'{$ENDIF},
    sg_Text_DrawTextLinesWithFontNamedAndSize name {$IFDEF DARWIN}'_sg_Text_DrawTextLinesWithFontNamedAndSize'{$ELSE}'sg_Text_DrawTextLinesWithFontNamedAndSize'{$ENDIF},
    sg_Networking_ClearMessageQueue name {$IFDEF DARWIN}'_sg_Networking_ClearMessageQueue'{$ELSE}'sg_Networking_ClearMessageQueue'{$ENDIF},
    sg_Networking_ReleaseAllConnections name {$IFDEF DARWIN}'_sg_Networking_ReleaseAllConnections'{$ELSE}'sg_Networking_ReleaseAllConnections'{$ENDIF},
    sg_Graphics_ColorDarkCyan name {$IFDEF DARWIN}'_sg_Graphics_ColorDarkCyan'{$ELSE}'sg_Graphics_ColorDarkCyan'{$ENDIF},
    sg_UserInterface_ListItemTextFromId name {$IFDEF DARWIN}'_sg_UserInterface_ListItemTextFromId'{$ELSE}'sg_UserInterface_ListItemTextFromId'{$ENDIF},
    sg_Geometry_Intersection name {$IFDEF DARWIN}'_sg_Geometry_Intersection'{$ELSE}'sg_Geometry_Intersection'{$ENDIF},
    sg_Audio_ReleaseSoundEffect name {$IFDEF DARWIN}'_sg_Audio_ReleaseSoundEffect'{$ELSE}'sg_Audio_ReleaseSoundEffect'{$ENDIF},
    sg_Text_FontSetStyle name {$IFDEF DARWIN}'_sg_Text_FontSetStyle'{$ELSE}'sg_Text_FontSetStyle'{$ENDIF},
    sg_Sprites_VectorFromCenterSpriteToPoint name {$IFDEF DARWIN}'_sg_Sprites_VectorFromCenterSpriteToPoint'{$ELSE}'sg_Sprites_VectorFromCenterSpriteToPoint'{$ENDIF},
    sg_Input_MouseDown name {$IFDEF DARWIN}'_sg_Input_MouseDown'{$ELSE}'sg_Input_MouseDown'{$ENDIF},
    sg_Graphics_ColorDarkSlateGray name {$IFDEF DARWIN}'_sg_Graphics_ColorDarkSlateGray'{$ELSE}'sg_Graphics_ColorDarkSlateGray'{$ENDIF},
    sg_Text_DrawTextLinesInRect name {$IFDEF DARWIN}'_sg_Text_DrawTextLinesInRect'{$ELSE}'sg_Text_DrawTextLinesInRect'{$ENDIF},
    sg_Graphics_ColorBlanchedAlmond name {$IFDEF DARWIN}'_sg_Graphics_ColorBlanchedAlmond'{$ELSE}'sg_Graphics_ColorBlanchedAlmond'{$ENDIF},
    sg_Graphics_ResetClipForBitmap name {$IFDEF DARWIN}'_sg_Graphics_ResetClipForBitmap'{$ELSE}'sg_Graphics_ResetClipForBitmap'{$ENDIF},
    sg_Text_DrawTextOnScreenAtPointWithFontNamedAndSize name {$IFDEF DARWIN}'_sg_Text_DrawTextOnScreenAtPointWithFontNamedAndSize'{$ELSE}'sg_Text_DrawTextOnScreenAtPointWithFontNamedAndSize'{$ENDIF},
    sg_Input_MoveMouseToPoint name {$IFDEF DARWIN}'_sg_Input_MoveMouseToPoint'{$ELSE}'sg_Input_MoveMouseToPoint'{$ENDIF},
    sg_Geometry_PointInRectXY name {$IFDEF DARWIN}'_sg_Geometry_PointInRectXY'{$ELSE}'sg_Geometry_PointInRectXY'{$ENDIF},
    sg_Graphics_TakeScreenshot name {$IFDEF DARWIN}'_sg_Graphics_TakeScreenshot'{$ELSE}'sg_Graphics_TakeScreenshot'{$ENDIF},
    sg_Resources_HasResourceBundle name {$IFDEF DARWIN}'_sg_Resources_HasResourceBundle'{$ELSE}'sg_Resources_HasResourceBundle'{$ENDIF},
    sg_Characters_CharacterCurrentState name {$IFDEF DARWIN}'_sg_Characters_CharacterCurrentState'{$ELSE}'sg_Characters_CharacterCurrentState'{$ENDIF},
    sg_Animations_ReleaseAllAnimationScripts name {$IFDEF DARWIN}'_sg_Animations_ReleaseAllAnimationScripts'{$ELSE}'sg_Animations_ReleaseAllAnimationScripts'{$ENDIF},
    sg_Text_LoadFontNamed name {$IFDEF DARWIN}'_sg_Text_LoadFontNamed'{$ELSE}'sg_Text_LoadFontNamed'{$ENDIF},
    sg_Geometry_MatrixMultiply name {$IFDEF DARWIN}'_sg_Geometry_MatrixMultiply'{$ELSE}'sg_Geometry_MatrixMultiply'{$ENDIF},
    sg_Physics_BitmapRectangleCollision name {$IFDEF DARWIN}'_sg_Physics_BitmapRectangleCollision'{$ELSE}'sg_Physics_BitmapRectangleCollision'{$ENDIF},
    sg_Graphics_ColorDarkSeaGreen name {$IFDEF DARWIN}'_sg_Graphics_ColorDarkSeaGreen'{$ELSE}'sg_Graphics_ColorDarkSeaGreen'{$ENDIF},
    sg_Resources_SetAppPathWithExe name {$IFDEF DARWIN}'_sg_Resources_SetAppPathWithExe'{$ELSE}'sg_Resources_SetAppPathWithExe'{$ENDIF},
    sg_Arduino_CreateArduinoDevice name {$IFDEF DARWIN}'_sg_Arduino_CreateArduinoDevice'{$ELSE}'sg_Arduino_CreateArduinoDevice'{$ENDIF},
    sg_Camera_SetCameraY name {$IFDEF DARWIN}'_sg_Camera_SetCameraY'{$ELSE}'sg_Camera_SetCameraY'{$ENDIF},
    sg_Camera_ToScreenY name {$IFDEF DARWIN}'_sg_Camera_ToScreenY'{$ELSE}'sg_Camera_ToScreenY'{$ENDIF},
    sg_Resources_PathToResourseKindInSubdir name {$IFDEF DARWIN}'_sg_Resources_PathToResourseKindInSubdir'{$ELSE}'sg_Resources_PathToResourseKindInSubdir'{$ENDIF},
    sg_Resources_ReleaseAllResources name {$IFDEF DARWIN}'_sg_Resources_ReleaseAllResources'{$ELSE}'sg_Resources_ReleaseAllResources'{$ENDIF},
    sg_Characters_UpdateDirectionAnimationWithStationary name {$IFDEF DARWIN}'_sg_Characters_UpdateDirectionAnimationWithStationary'{$ELSE}'sg_Characters_UpdateDirectionAnimationWithStationary'{$ENDIF},
    sg_Graphics_ColorMediumSpringGreen name {$IFDEF DARWIN}'_sg_Graphics_ColorMediumSpringGreen'{$ELSE}'sg_Graphics_ColorMediumSpringGreen'{$ENDIF},
    sg_Animations_AnimationName name {$IFDEF DARWIN}'_sg_Animations_AnimationName'{$ELSE}'sg_Animations_AnimationName'{$ENDIF},
    sg_Graphics_ColorTan name {$IFDEF DARWIN}'_sg_Graphics_ColorTan'{$ELSE}'sg_Graphics_ColorTan'{$ENDIF},
    sg_UserInterface_ActiveRadioButtonWithID name {$IFDEF DARWIN}'_sg_UserInterface_ActiveRadioButtonWithID'{$ELSE}'sg_UserInterface_ActiveRadioButtonWithID'{$ENDIF},
    sg_Geometry_RectangleLeft name {$IFDEF DARWIN}'_sg_Geometry_RectangleLeft'{$ELSE}'sg_Geometry_RectangleLeft'{$ENDIF},
    sg_Geometry_RectangleToString name {$IFDEF DARWIN}'_sg_Geometry_RectangleToString'{$ELSE}'sg_Geometry_RectangleToString'{$ENDIF},
    sg_Sprites_MoveSpriteVecPct name {$IFDEF DARWIN}'_sg_Sprites_MoveSpriteVecPct'{$ELSE}'sg_Sprites_MoveSpriteVecPct'{$ENDIF},
    sg_Geometry_CalculateAngleBetweenVectors name {$IFDEF DARWIN}'_sg_Geometry_CalculateAngleBetweenVectors'{$ELSE}'sg_Geometry_CalculateAngleBetweenVectors'{$ENDIF},
    sg_Graphics_GreenOf name {$IFDEF DARWIN}'_sg_Graphics_GreenOf'{$ELSE}'sg_Graphics_GreenOf'{$ENDIF},
    sg_Images_BitmapCellColumns name {$IFDEF DARWIN}'_sg_Images_BitmapCellColumns'{$ELSE}'sg_Images_BitmapCellColumns'{$ENDIF},
    sg_Sprites_SpriteNamed name {$IFDEF DARWIN}'_sg_Sprites_SpriteNamed'{$ELSE}'sg_Sprites_SpriteNamed'{$ENDIF},
    sg_Input_MouseShown name {$IFDEF DARWIN}'_sg_Input_MouseShown'{$ELSE}'sg_Input_MouseShown'{$ENDIF},
    sg_Graphics_FillTriangle name {$IFDEF DARWIN}'_sg_Graphics_FillTriangle'{$ELSE}'sg_Graphics_FillTriangle'{$ENDIF},
    sg_Text_DrawTextWithFontNamed name {$IFDEF DARWIN}'_sg_Text_DrawTextWithFontNamed'{$ELSE}'sg_Text_DrawTextWithFontNamed'{$ENDIF},
    sg_UserInterface_PanelIsDragging name {$IFDEF DARWIN}'_sg_UserInterface_PanelIsDragging'{$ELSE}'sg_UserInterface_PanelIsDragging'{$ENDIF},
    sg_Input_KeyUp name {$IFDEF DARWIN}'_sg_Input_KeyUp'{$ELSE}'sg_Input_KeyUp'{$ENDIF},
    sg_Sprites_SpriteCurrentCell name {$IFDEF DARWIN}'_sg_Sprites_SpriteCurrentCell'{$ELSE}'sg_Sprites_SpriteCurrentCell'{$ENDIF},
    sg_UserInterface_PanelClicked name {$IFDEF DARWIN}'_sg_UserInterface_PanelClicked'{$ELSE}'sg_UserInterface_PanelClicked'{$ENDIF},
    sg_UserInterface_DialogSetPath name {$IFDEF DARWIN}'_sg_UserInterface_DialogSetPath'{$ELSE}'sg_UserInterface_DialogSetPath'{$ENDIF},
    sg_Networking_BroadcastTCPMessage name {$IFDEF DARWIN}'_sg_Networking_BroadcastTCPMessage'{$ELSE}'sg_Networking_BroadcastTCPMessage'{$ENDIF},
    sg_Images_BitmapHeightForCell name {$IFDEF DARWIN}'_sg_Images_BitmapHeightForCell'{$ELSE}'sg_Images_BitmapHeightForCell'{$ENDIF},
    sg_Geometry_LimitVector name {$IFDEF DARWIN}'_sg_Geometry_LimitVector'{$ELSE}'sg_Geometry_LimitVector'{$ENDIF},
    sg_UserInterface_PanelY name {$IFDEF DARWIN}'_sg_UserInterface_PanelY'{$ELSE}'sg_UserInterface_PanelY'{$ENDIF},
    sg_UserInterface_ActiveRadioButtonOnPanelWithId name {$IFDEF DARWIN}'_sg_UserInterface_ActiveRadioButtonOnPanelWithId'{$ELSE}'sg_UserInterface_ActiveRadioButtonOnPanelWithId'{$ENDIF},
    sg_Audio_PlayMusicNamedWithLoops name {$IFDEF DARWIN}'_sg_Audio_PlayMusicNamedWithLoops'{$ELSE}'sg_Audio_PlayMusicNamedWithLoops'{$ENDIF},
    sg_Animations_CreateAnimationNamedWithSound name {$IFDEF DARWIN}'_sg_Animations_CreateAnimationNamedWithSound'{$ELSE}'sg_Animations_CreateAnimationNamedWithSound'{$ENDIF},
    sg_Animations_DrawAnimationAtPoint name {$IFDEF DARWIN}'_sg_Animations_DrawAnimationAtPoint'{$ELSE}'sg_Animations_DrawAnimationAtPoint'{$ENDIF},
    sg_Text_DrawTextLinesInRectOnBitmap name {$IFDEF DARWIN}'_sg_Text_DrawTextLinesInRectOnBitmap'{$ELSE}'sg_Text_DrawTextLinesInRectOnBitmap'{$ENDIF},
    sg_Images_SetOpacity name {$IFDEF DARWIN}'_sg_Images_SetOpacity'{$ELSE}'sg_Images_SetOpacity'{$ENDIF},
    sg_Geometry_CreateTriangle name {$IFDEF DARWIN}'_sg_Geometry_CreateTriangle'{$ELSE}'sg_Geometry_CreateTriangle'{$ENDIF},
    sg_Images_DrawBitmapPartFromRectAtPoint name {$IFDEF DARWIN}'_sg_Images_DrawBitmapPartFromRectAtPoint'{$ELSE}'sg_Images_DrawBitmapPartFromRectAtPoint'{$ENDIF},
    sg_Geometry_LineNormal name {$IFDEF DARWIN}'_sg_Geometry_LineNormal'{$ELSE}'sg_Geometry_LineNormal'{$ENDIF},
    sg_Networking_CreateTCPHost name {$IFDEF DARWIN}'_sg_Networking_CreateTCPHost'{$ELSE}'sg_Networking_CreateTCPHost'{$ENDIF},
    sg_Graphics_ColorGray name {$IFDEF DARWIN}'_sg_Graphics_ColorGray'{$ELSE}'sg_Graphics_ColorGray'{$ENDIF},
    sg_UserInterface_ShowPanel name {$IFDEF DARWIN}'_sg_UserInterface_ShowPanel'{$ELSE}'sg_UserInterface_ShowPanel'{$ENDIF},
    sg_Physics_SideForCollisionTest name {$IFDEF DARWIN}'_sg_Physics_SideForCollisionTest'{$ELSE}'sg_Physics_SideForCollisionTest'{$ENDIF},
    sg_Graphics_DrawLineSegment name {$IFDEF DARWIN}'_sg_Graphics_DrawLineSegment'{$ELSE}'sg_Graphics_DrawLineSegment'{$ENDIF},
    sg_Characters_LoadCharacterNamed name {$IFDEF DARWIN}'_sg_Characters_LoadCharacterNamed'{$ELSE}'sg_Characters_LoadCharacterNamed'{$ENDIF},
    sg_Graphics_ColorAquamarine name {$IFDEF DARWIN}'_sg_Graphics_ColorAquamarine'{$ELSE}'sg_Graphics_ColorAquamarine'{$ENDIF},
    sg_Graphics_ColorDeepPink name {$IFDEF DARWIN}'_sg_Graphics_ColorDeepPink'{$ELSE}'sg_Graphics_ColorDeepPink'{$ENDIF},
    sg_UserInterface_LoadPanel name {$IFDEF DARWIN}'_sg_UserInterface_LoadPanel'{$ELSE}'sg_UserInterface_LoadPanel'{$ENDIF},
    sg_Geometry_AddVectors name {$IFDEF DARWIN}'_sg_Geometry_AddVectors'{$ELSE}'sg_Geometry_AddVectors'{$ENDIF},
    sg_Graphics_ColorSlateGray name {$IFDEF DARWIN}'_sg_Graphics_ColorSlateGray'{$ELSE}'sg_Graphics_ColorSlateGray'{$ENDIF},
    sg_Sprites_SpriteAddValueWithInitialValue name {$IFDEF DARWIN}'_sg_Sprites_SpriteAddValueWithInitialValue'{$ELSE}'sg_Sprites_SpriteAddValueWithInitialValue'{$ENDIF},
    sg_Characters_LoadCharacter name {$IFDEF DARWIN}'_sg_Characters_LoadCharacter'{$ELSE}'sg_Characters_LoadCharacter'{$ENDIF},
    sg_Timers_StopTimerNamed name {$IFDEF DARWIN}'_sg_Timers_StopTimerNamed'{$ELSE}'sg_Timers_StopTimerNamed'{$ENDIF},
    sg_UserInterface_PointInRegion name {$IFDEF DARWIN}'_sg_UserInterface_PointInRegion'{$ELSE}'sg_UserInterface_PointInRegion'{$ENDIF},
    sg_UserInterface_ActiveRadioButtonIndex name {$IFDEF DARWIN}'_sg_UserInterface_ActiveRadioButtonIndex'{$ELSE}'sg_UserInterface_ActiveRadioButtonIndex'{$ENDIF},
    sg_Characters_CharacterFilename name {$IFDEF DARWIN}'_sg_Characters_CharacterFilename'{$ELSE}'sg_Characters_CharacterFilename'{$ENDIF},
    sg_Input_ShowKeyboard name {$IFDEF DARWIN}'_sg_Input_ShowKeyboard'{$ELSE}'sg_Input_ShowKeyboard'{$ENDIF},
    sg_Images_BitmapCellRectangleXY name {$IFDEF DARWIN}'_sg_Images_BitmapCellRectangleXY'{$ELSE}'sg_Images_BitmapCellRectangleXY'{$ENDIF},
    sg_UserInterface_ListSetFontAlignment name {$IFDEF DARWIN}'_sg_UserInterface_ListSetFontAlignment'{$ELSE}'sg_UserInterface_ListSetFontAlignment'{$ENDIF},
    sg_Images_DrawBitmapPartOnScreen name {$IFDEF DARWIN}'_sg_Images_DrawBitmapPartOnScreen'{$ELSE}'sg_Images_DrawBitmapPartOnScreen'{$ENDIF},
    sg_Resources_LoadResourceBundleNamed name {$IFDEF DARWIN}'_sg_Resources_LoadResourceBundleNamed'{$ELSE}'sg_Resources_LoadResourceBundleNamed'{$ENDIF},
    sg_Graphics_ColorMediumBlue name {$IFDEF DARWIN}'_sg_Graphics_ColorMediumBlue'{$ELSE}'sg_Graphics_ColorMediumBlue'{$ENDIF},
    sg_Sprites_SpriteAnimationHasEnded name {$IFDEF DARWIN}'_sg_Sprites_SpriteAnimationHasEnded'{$ELSE}'sg_Sprites_SpriteAnimationHasEnded'{$ENDIF},
    sg_Geometry_IdentityMatrix name {$IFDEF DARWIN}'_sg_Geometry_IdentityMatrix'{$ELSE}'sg_Geometry_IdentityMatrix'{$ENDIF},
    sg_Sprites_SpriteLayerIndex name {$IFDEF DARWIN}'_sg_Sprites_SpriteLayerIndex'{$ELSE}'sg_Sprites_SpriteLayerIndex'{$ENDIF},
    sg_Sprites_SpriteY name {$IFDEF DARWIN}'_sg_Sprites_SpriteY'{$ELSE}'sg_Sprites_SpriteY'{$ENDIF},
    sg_Sprites_SpriteHideLayer name {$IFDEF DARWIN}'_sg_Sprites_SpriteHideLayer'{$ELSE}'sg_Sprites_SpriteHideLayer'{$ENDIF},
    sg_Graphics_DrawTriangle name {$IFDEF DARWIN}'_sg_Graphics_DrawTriangle'{$ELSE}'sg_Graphics_DrawTriangle'{$ENDIF},
    sg_Images_DrawBitmapAtPointOnto name {$IFDEF DARWIN}'_sg_Images_DrawBitmapAtPointOnto'{$ELSE}'sg_Images_DrawBitmapAtPointOnto'{$ENDIF},
    sg_UserInterface_HidePanel name {$IFDEF DARWIN}'_sg_UserInterface_HidePanel'{$ELSE}'sg_UserInterface_HidePanel'{$ENDIF},
    sg_Arduino_ArduinoReadByte name {$IFDEF DARWIN}'_sg_Arduino_ArduinoReadByte'{$ELSE}'sg_Arduino_ArduinoReadByte'{$ENDIF},
    sg_Images_BitmapCellWidth name {$IFDEF DARWIN}'_sg_Images_BitmapCellWidth'{$ELSE}'sg_Images_BitmapCellWidth'{$ENDIF},
    sg_UserInterface_PanelWidth name {$IFDEF DARWIN}'_sg_UserInterface_PanelWidth'{$ELSE}'sg_UserInterface_PanelWidth'{$ENDIF},
    sg_Graphics_ColorIndigo name {$IFDEF DARWIN}'_sg_Graphics_ColorIndigo'{$ELSE}'sg_Graphics_ColorIndigo'{$ENDIF},
    sg_Sprites_SpriteCollisionBitmap name {$IFDEF DARWIN}'_sg_Sprites_SpriteCollisionBitmap'{$ELSE}'sg_Sprites_SpriteCollisionBitmap'{$ENDIF},
    sg_Graphics_ColorSaddleBrown name {$IFDEF DARWIN}'_sg_Graphics_ColorSaddleBrown'{$ELSE}'sg_Graphics_ColorSaddleBrown'{$ENDIF},
    sg_UserInterface_ListRemoveItemFromWithId name {$IFDEF DARWIN}'_sg_UserInterface_ListRemoveItemFromWithId'{$ELSE}'sg_UserInterface_ListRemoveItemFromWithId'{$ENDIF},
    sg_Sprites_CreateSpritePack name {$IFDEF DARWIN}'_sg_Sprites_CreateSpritePack'{$ELSE}'sg_Sprites_CreateSpritePack'{$ENDIF},
    sg_Audio_AudioReady name {$IFDEF DARWIN}'_sg_Audio_AudioReady'{$ELSE}'sg_Audio_AudioReady'{$ENDIF},
    sg_Graphics_DrawOrFillEllipseInRectOnto name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillEllipseInRectOnto'{$ELSE}'sg_Graphics_DrawOrFillEllipseInRectOnto'{$ENDIF},
    sg_Physics_BitmapAtPointsCollision name {$IFDEF DARWIN}'_sg_Physics_BitmapAtPointsCollision'{$ELSE}'sg_Physics_BitmapAtPointsCollision'{$ENDIF},
    sg_Graphics_ColorWhiteSmoke name {$IFDEF DARWIN}'_sg_Graphics_ColorWhiteSmoke'{$ELSE}'sg_Graphics_ColorWhiteSmoke'{$ENDIF},
    sg_Sprites_SpriteSetValue name {$IFDEF DARWIN}'_sg_Sprites_SpriteSetValue'{$ELSE}'sg_Sprites_SpriteSetValue'{$ENDIF},
    sg_UserInterface_ListOnPanelWithIdAddBitmapWithTextItem name {$IFDEF DARWIN}'_sg_UserInterface_ListOnPanelWithIdAddBitmapWithTextItem'{$ELSE}'sg_UserInterface_ListOnPanelWithIdAddBitmapWithTextItem'{$ENDIF},
    sg_Images_PixelDrawnAtPoint name {$IFDEF DARWIN}'_sg_Images_PixelDrawnAtPoint'{$ELSE}'sg_Images_PixelDrawnAtPoint'{$ENDIF},
    sg_Text_DrawTextOnScreen name {$IFDEF DARWIN}'_sg_Text_DrawTextOnScreen'{$ELSE}'sg_Text_DrawTextOnScreen'{$ENDIF},
    sg_UserInterface_ActivatePanel name {$IFDEF DARWIN}'_sg_UserInterface_ActivatePanel'{$ELSE}'sg_UserInterface_ActivatePanel'{$ENDIF},
    sg_Graphics_ColorPowderBlue name {$IFDEF DARWIN}'_sg_Graphics_ColorPowderBlue'{$ELSE}'sg_Graphics_ColorPowderBlue'{$ENDIF},
    sg_UserInterface_LabelOnPanelWithIdSetText name {$IFDEF DARWIN}'_sg_UserInterface_LabelOnPanelWithIdSetText'{$ELSE}'sg_UserInterface_LabelOnPanelWithIdSetText'{$ENDIF},
    sg_UserInterface_TextBoxSetAlignmentFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_TextBoxSetAlignmentFromRegion'{$ELSE}'sg_UserInterface_TextBoxSetAlignmentFromRegion'{$ENDIF},
    sg_UserInterface_ListRemoveActiveItemFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_ListRemoveActiveItemFromRegion'{$ELSE}'sg_UserInterface_ListRemoveActiveItemFromRegion'{$ENDIF},
    sg_Physics_SpriteBitmapCollision name {$IFDEF DARWIN}'_sg_Physics_SpriteBitmapCollision'{$ELSE}'sg_Physics_SpriteBitmapCollision'{$ENDIF},
    sg_Graphics_PushClipXY name {$IFDEF DARWIN}'_sg_Graphics_PushClipXY'{$ELSE}'sg_Graphics_PushClipXY'{$ENDIF},
    sg_Graphics_ColorPlum name {$IFDEF DARWIN}'_sg_Graphics_ColorPlum'{$ELSE}'sg_Graphics_ColorPlum'{$ENDIF},
    sg_Audio_FadeMusicIn name {$IFDEF DARWIN}'_sg_Audio_FadeMusicIn'{$ELSE}'sg_Audio_FadeMusicIn'{$ENDIF},
    sg_Audio_SoundEffectPlaying name {$IFDEF DARWIN}'_sg_Audio_SoundEffectPlaying'{$ELSE}'sg_Audio_SoundEffectPlaying'{$ENDIF},
    sg_UserInterface_PanelAtPoint name {$IFDEF DARWIN}'_sg_UserInterface_PanelAtPoint'{$ELSE}'sg_UserInterface_PanelAtPoint'{$ENDIF},
    sg_UserInterface_CheckboxStateFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_CheckboxStateFromRegion'{$ELSE}'sg_UserInterface_CheckboxStateFromRegion'{$ENDIF},
    sg_Characters_SetActiveLayer name {$IFDEF DARWIN}'_sg_Characters_SetActiveLayer'{$ELSE}'sg_Characters_SetActiveLayer'{$ENDIF},
    sg_Input_HideKeyboard name {$IFDEF DARWIN}'_sg_Input_HideKeyboard'{$ELSE}'sg_Input_HideKeyboard'{$ENDIF},
    sg_Images_DrawBitmapCell name {$IFDEF DARWIN}'_sg_Images_DrawBitmapCell'{$ELSE}'sg_Images_DrawBitmapCell'{$ENDIF},
    sg_Camera_ToWorldX name {$IFDEF DARWIN}'_sg_Camera_ToWorldX'{$ELSE}'sg_Camera_ToWorldX'{$ENDIF},
    sg_Input_MousePositionAsVector name {$IFDEF DARWIN}'_sg_Input_MousePositionAsVector'{$ELSE}'sg_Input_MousePositionAsVector'{$ENDIF},
    sg_Sprites_SpriteOnScreenAtPoint name {$IFDEF DARWIN}'_sg_Sprites_SpriteOnScreenAtPoint'{$ELSE}'sg_Sprites_SpriteOnScreenAtPoint'{$ENDIF},
    sg_UserInterface_ListclearItemsWithId name {$IFDEF DARWIN}'_sg_UserInterface_ListclearItemsWithId'{$ELSE}'sg_UserInterface_ListclearItemsWithId'{$ENDIF},
    sg_Characters_CharacterValueCount name {$IFDEF DARWIN}'_sg_Characters_CharacterValueCount'{$ELSE}'sg_Characters_CharacterValueCount'{$ENDIF},
    sg_Geometry_LinesFromRect name {$IFDEF DARWIN}'_sg_Geometry_LinesFromRect'{$ELSE}'sg_Geometry_LinesFromRect'{$ENDIF},
    sg_UserInterface_TextboxSetTextToSingleFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_TextboxSetTextToSingleFromRegion'{$ELSE}'sg_UserInterface_TextboxSetTextToSingleFromRegion'{$ENDIF},
    sg_Networking_DecToHex name {$IFDEF DARWIN}'_sg_Networking_DecToHex'{$ELSE}'sg_Networking_DecToHex'{$ENDIF},
    sg_UserInterface_ListClearItems name {$IFDEF DARWIN}'_sg_UserInterface_ListClearItems'{$ELSE}'sg_UserInterface_ListClearItems'{$ENDIF},
    sg_Geometry_LineCircleHit name {$IFDEF DARWIN}'_sg_Geometry_LineCircleHit'{$ELSE}'sg_Geometry_LineCircleHit'{$ENDIF},
    sg_Sprites_CreateBasicSprite name {$IFDEF DARWIN}'_sg_Sprites_CreateBasicSprite'{$ELSE}'sg_Sprites_CreateBasicSprite'{$ENDIF},
    sg_Graphics_ColorCoral name {$IFDEF DARWIN}'_sg_Graphics_ColorCoral'{$ELSE}'sg_Graphics_ColorCoral'{$ENDIF},
    sg_UserInterface_ListItemTextFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_ListItemTextFromRegion'{$ELSE}'sg_UserInterface_ListItemTextFromRegion'{$ENDIF},
    sg_Images_BitmapName name {$IFDEF DARWIN}'_sg_Images_BitmapName'{$ELSE}'sg_Images_BitmapName'{$ENDIF},
    sg_Geometry_TrianglesRectangleIntersect name {$IFDEF DARWIN}'_sg_Geometry_TrianglesRectangleIntersect'{$ELSE}'sg_Geometry_TrianglesRectangleIntersect'{$ENDIF},
    sg_Characters_CharacterAngleMaxAt name {$IFDEF DARWIN}'_sg_Characters_CharacterAngleMaxAt'{$ELSE}'sg_Characters_CharacterAngleMaxAt'{$ENDIF},
    sg_Sprites_SpriteSetHeading name {$IFDEF DARWIN}'_sg_Sprites_SpriteSetHeading'{$ELSE}'sg_Sprites_SpriteSetHeading'{$ENDIF},
    sg_Sprites_UpdateAllSpritesPct name {$IFDEF DARWIN}'_sg_Sprites_UpdateAllSpritesPct'{$ELSE}'sg_Sprites_UpdateAllSpritesPct'{$ENDIF},
    sg_Images_DrawBitmapNamedAtPoint name {$IFDEF DARWIN}'_sg_Images_DrawBitmapNamedAtPoint'{$ELSE}'sg_Images_DrawBitmapNamedAtPoint'{$ENDIF},
    sg_Graphics_ColorLime name {$IFDEF DARWIN}'_sg_Graphics_ColorLime'{$ELSE}'sg_Graphics_ColorLime'{$ENDIF},
    sg_Timers_FreeTimer name {$IFDEF DARWIN}'_sg_Timers_FreeTimer'{$ELSE}'sg_Timers_FreeTimer'{$ENDIF},
    sg_Geometry_CreateRectangleForPoints name {$IFDEF DARWIN}'_sg_Geometry_CreateRectangleForPoints'{$ELSE}'sg_Geometry_CreateRectangleForPoints'{$ENDIF},
    sg_UserInterface_ListAddItemBitmap name {$IFDEF DARWIN}'_sg_UserInterface_ListAddItemBitmap'{$ELSE}'sg_UserInterface_ListAddItemBitmap'{$ENDIF},
    sg_Audio_StopMusic name {$IFDEF DARWIN}'_sg_Audio_StopMusic'{$ELSE}'sg_Audio_StopMusic'{$ENDIF},
    sg_Geometry_PointsFromLine name {$IFDEF DARWIN}'_sg_Geometry_PointsFromLine'{$ELSE}'sg_Geometry_PointsFromLine'{$ENDIF},
    sg_Images_MakeTransparent name {$IFDEF DARWIN}'_sg_Images_MakeTransparent'{$ELSE}'sg_Images_MakeTransparent'{$ENDIF},
    sg_Geometry_LineIntersectsLines name {$IFDEF DARWIN}'_sg_Geometry_LineIntersectsLines'{$ELSE}'sg_Geometry_LineIntersectsLines'{$ENDIF},
    sg_Input_DeviceMovedInYAxis name {$IFDEF DARWIN}'_sg_Input_DeviceMovedInYAxis'{$ELSE}'sg_Input_DeviceMovedInYAxis'{$ENDIF},
    sg_Networking_SendUDPMessage name {$IFDEF DARWIN}'_sg_Networking_SendUDPMessage'{$ELSE}'sg_Networking_SendUDPMessage'{$ENDIF},
    sg_Graphics_ColorMediumVioletRed name {$IFDEF DARWIN}'_sg_Graphics_ColorMediumVioletRed'{$ELSE}'sg_Graphics_ColorMediumVioletRed'{$ENDIF},
    sg_Networking_CloseAllConnections name {$IFDEF DARWIN}'_sg_Networking_CloseAllConnections'{$ELSE}'sg_Networking_CloseAllConnections'{$ENDIF},
    sg_Graphics_ColorRoyalBlue name {$IFDEF DARWIN}'_sg_Graphics_ColorRoyalBlue'{$ELSE}'sg_Graphics_ColorRoyalBlue'{$ENDIF},
    sg_Sprites_SpriteSetLayerOffsetNamed name {$IFDEF DARWIN}'_sg_Sprites_SpriteSetLayerOffsetNamed'{$ELSE}'sg_Sprites_SpriteSetLayerOffsetNamed'{$ENDIF},
    sg_UserInterface_RegionClicked name {$IFDEF DARWIN}'_sg_UserInterface_RegionClicked'{$ELSE}'sg_UserInterface_RegionClicked'{$ENDIF},
    sg_Input_WindowCloseRequested name {$IFDEF DARWIN}'_sg_Input_WindowCloseRequested'{$ELSE}'sg_Input_WindowCloseRequested'{$ENDIF},
    sg_UserInterface_ListClearItemsFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_ListClearItemsFromRegion'{$ELSE}'sg_UserInterface_ListClearItemsFromRegion'{$ENDIF},
    sg_Graphics_ColorLightGoldenrodYellow name {$IFDEF DARWIN}'_sg_Graphics_ColorLightGoldenrodYellow'{$ELSE}'sg_Graphics_ColorLightGoldenrodYellow'{$ENDIF},
    sg_Graphics_ColorMediumTurquoise name {$IFDEF DARWIN}'_sg_Graphics_ColorMediumTurquoise'{$ELSE}'sg_Graphics_ColorMediumTurquoise'{$ENDIF},
    sg_Characters_CharacterName name {$IFDEF DARWIN}'_sg_Characters_CharacterName'{$ELSE}'sg_Characters_CharacterName'{$ENDIF},
    sg_Sprites_CreateSpriteWithLayerNamed name {$IFDEF DARWIN}'_sg_Sprites_CreateSpriteWithLayerNamed'{$ELSE}'sg_Sprites_CreateSpriteWithLayerNamed'{$ENDIF},
    sg_Utils_Rnd name {$IFDEF DARWIN}'_sg_Utils_Rnd'{$ELSE}'sg_Utils_Rnd'{$ENDIF},
    sg_Animations_CreateAnimationWithSound name {$IFDEF DARWIN}'_sg_Animations_CreateAnimationWithSound'{$ELSE}'sg_Animations_CreateAnimationWithSound'{$ENDIF},
    sg_Characters_FreeCharacter name {$IFDEF DARWIN}'_sg_Characters_FreeCharacter'{$ELSE}'sg_Characters_FreeCharacter'{$ENDIF},
    sg_Input_SetMouseVisible name {$IFDEF DARWIN}'_sg_Input_SetMouseVisible'{$ELSE}'sg_Input_SetMouseVisible'{$ENDIF},
    sg_Graphics_SaturationOf name {$IFDEF DARWIN}'_sg_Graphics_SaturationOf'{$ELSE}'sg_Graphics_SaturationOf'{$ENDIF},
    sg_Animations_RestartAnimation name {$IFDEF DARWIN}'_sg_Animations_RestartAnimation'{$ELSE}'sg_Animations_RestartAnimation'{$ENDIF},
    sg_UserInterface_GlobalRegionWithID name {$IFDEF DARWIN}'_sg_UserInterface_GlobalRegionWithID'{$ELSE}'sg_UserInterface_GlobalRegionWithID'{$ENDIF},
    sg_Graphics_DrawOrFillRectangleOnScreen name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillRectangleOnScreen'{$ELSE}'sg_Graphics_DrawOrFillRectangleOnScreen'{$ENDIF},
    sg_Sprites_HasSprite name {$IFDEF DARWIN}'_sg_Sprites_HasSprite'{$ELSE}'sg_Sprites_HasSprite'{$ENDIF},
    sg_Geometry_PointXYInRect name {$IFDEF DARWIN}'_sg_Geometry_PointXYInRect'{$ELSE}'sg_Geometry_PointXYInRect'{$ENDIF},
    sg_Resources_PathToOtherResourceWithBase name {$IFDEF DARWIN}'_sg_Resources_PathToOtherResourceWithBase'{$ELSE}'sg_Resources_PathToOtherResourceWithBase'{$ENDIF},
    sg_Geometry_PointLineDistance name {$IFDEF DARWIN}'_sg_Geometry_PointLineDistance'{$ELSE}'sg_Geometry_PointLineDistance'{$ENDIF},
    sg_Geometry_VectorFromAngle name {$IFDEF DARWIN}'_sg_Geometry_VectorFromAngle'{$ELSE}'sg_Geometry_VectorFromAngle'{$ENDIF},
    sg_UserInterface_ButtonClicked name {$IFDEF DARWIN}'_sg_UserInterface_ButtonClicked'{$ELSE}'sg_UserInterface_ButtonClicked'{$ENDIF},
    sg_Images_SetTransparentColor name {$IFDEF DARWIN}'_sg_Images_SetTransparentColor'{$ELSE}'sg_Images_SetTransparentColor'{$ENDIF},
    sg_Graphics_RefreshScreen name {$IFDEF DARWIN}'_sg_Graphics_RefreshScreen'{$ELSE}'sg_Graphics_RefreshScreen'{$ENDIF},
    sg_Utils_GetFramerate name {$IFDEF DARWIN}'_sg_Utils_GetFramerate'{$ELSE}'sg_Utils_GetFramerate'{$ENDIF},
    sg_Resources_PathToResourceWithSubPaths name {$IFDEF DARWIN}'_sg_Resources_PathToResourceWithSubPaths'{$ELSE}'sg_Resources_PathToResourceWithSubPaths'{$ENDIF},
    sg_Graphics_ColorYellow name {$IFDEF DARWIN}'_sg_Graphics_ColorYellow'{$ELSE}'sg_Graphics_ColorYellow'{$ENDIF},
    sg_Utils_ExceptionOccured name {$IFDEF DARWIN}'_sg_Utils_ExceptionOccured'{$ELSE}'sg_Utils_ExceptionOccured'{$ENDIF},
    sg_Geometry_CreateLine name {$IFDEF DARWIN}'_sg_Geometry_CreateLine'{$ELSE}'sg_Geometry_CreateLine'{$ENDIF},
    sg_Graphics_ColorGoldenrod name {$IFDEF DARWIN}'_sg_Graphics_ColorGoldenrod'{$ELSE}'sg_Graphics_ColorGoldenrod'{$ENDIF},
    sg_Graphics_ColorLightSeaGreen name {$IFDEF DARWIN}'_sg_Graphics_ColorLightSeaGreen'{$ELSE}'sg_Graphics_ColorLightSeaGreen'{$ENDIF},
    sg_UserInterface_PanelNamedHeight name {$IFDEF DARWIN}'_sg_UserInterface_PanelNamedHeight'{$ELSE}'sg_UserInterface_PanelNamedHeight'{$ENDIF},
    sg_Images_ReleaseBitmap name {$IFDEF DARWIN}'_sg_Images_ReleaseBitmap'{$ELSE}'sg_Images_ReleaseBitmap'{$ENDIF},
    sg_Sprites_SpriteSetScale name {$IFDEF DARWIN}'_sg_Sprites_SpriteSetScale'{$ELSE}'sg_Sprites_SpriteSetScale'{$ENDIF},
    sg_Text_DrawSimpleTextOnBitmap name {$IFDEF DARWIN}'_sg_Text_DrawSimpleTextOnBitmap'{$ELSE}'sg_Text_DrawSimpleTextOnBitmap'{$ENDIF},
    sg_UserInterface_TextboxTextFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_TextboxTextFromRegion'{$ELSE}'sg_UserInterface_TextboxTextFromRegion'{$ENDIF},
    sg_Networking_ConnectionQueueSize name {$IFDEF DARWIN}'_sg_Networking_ConnectionQueueSize'{$ELSE}'sg_Networking_ConnectionQueueSize'{$ENDIF},
    sg_UserInterface_RadioGroupFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_RadioGroupFromRegion'{$ELSE}'sg_UserInterface_RadioGroupFromRegion'{$ENDIF},
    sg_Networking_CloseAllTCPHostSockets name {$IFDEF DARWIN}'_sg_Networking_CloseAllTCPHostSockets'{$ELSE}'sg_Networking_CloseAllTCPHostSockets'{$ENDIF},
    sg_Graphics_ColorAzure name {$IFDEF DARWIN}'_sg_Graphics_ColorAzure'{$ELSE}'sg_Graphics_ColorAzure'{$ENDIF},
    sg_Graphics_ColorSalmon name {$IFDEF DARWIN}'_sg_Graphics_ColorSalmon'{$ELSE}'sg_Graphics_ColorSalmon'{$ENDIF},
    sg_Text_DrawTextOnBitmapAtPointWithFontNamedAndSize name {$IFDEF DARWIN}'_sg_Text_DrawTextOnBitmapAtPointWithFontNamedAndSize'{$ELSE}'sg_Text_DrawTextOnBitmapAtPointWithFontNamedAndSize'{$ENDIF},
    sg_Sprites_MoveSpritePct name {$IFDEF DARWIN}'_sg_Sprites_MoveSpritePct'{$ELSE}'sg_Sprites_MoveSpritePct'{$ENDIF},
    sg_Text_LoadFont name {$IFDEF DARWIN}'_sg_Text_LoadFont'{$ELSE}'sg_Text_LoadFont'{$ENDIF},
    sg_UserInterface_RegionID name {$IFDEF DARWIN}'_sg_UserInterface_RegionID'{$ELSE}'sg_UserInterface_RegionID'{$ENDIF},
    sg_Audio_LoadMusicNamed name {$IFDEF DARWIN}'_sg_Audio_LoadMusicNamed'{$ELSE}'sg_Audio_LoadMusicNamed'{$ENDIF},
    sg_Sprites_CreateLayeredSpriteWithLayerNamesNamed name {$IFDEF DARWIN}'_sg_Sprites_CreateLayeredSpriteWithLayerNamesNamed'{$ELSE}'sg_Sprites_CreateLayeredSpriteWithLayerNamesNamed'{$ENDIF},
    sg_Graphics_ColorGreen name {$IFDEF DARWIN}'_sg_Graphics_ColorGreen'{$ELSE}'sg_Graphics_ColorGreen'{$ENDIF},
    sg_Audio_ReleaseAllMusic name {$IFDEF DARWIN}'_sg_Audio_ReleaseAllMusic'{$ELSE}'sg_Audio_ReleaseAllMusic'{$ENDIF},
    sg_Graphics_ColorSpringGreen name {$IFDEF DARWIN}'_sg_Graphics_ColorSpringGreen'{$ELSE}'sg_Graphics_ColorSpringGreen'{$ENDIF},
    sg_Timers_ResetTimerNamed name {$IFDEF DARWIN}'_sg_Timers_ResetTimerNamed'{$ELSE}'sg_Timers_ResetTimerNamed'{$ENDIF},
    sg_UserInterface_ListAddItemWithCellAndText name {$IFDEF DARWIN}'_sg_UserInterface_ListAddItemWithCellAndText'{$ELSE}'sg_UserInterface_ListAddItemWithCellAndText'{$ENDIF},
    sg_Graphics_DrawLineOnScreen name {$IFDEF DARWIN}'_sg_Graphics_DrawLineOnScreen'{$ELSE}'sg_Graphics_DrawLineOnScreen'{$ENDIF},
    sg_Geometry_PointOnLine name {$IFDEF DARWIN}'_sg_Geometry_PointOnLine'{$ELSE}'sg_Geometry_PointOnLine'{$ENDIF},
    sg_Geometry_PointOnPoint name {$IFDEF DARWIN}'_sg_Geometry_PointOnPoint'{$ELSE}'sg_Geometry_PointOnPoint'{$ENDIF},
    sg_Networking_CloseUDPSocket name {$IFDEF DARWIN}'_sg_Networking_CloseUDPSocket'{$ELSE}'sg_Networking_CloseUDPSocket'{$ENDIF},
    sg_Geometry_LinesFromTriangle name {$IFDEF DARWIN}'_sg_Geometry_LinesFromTriangle'{$ELSE}'sg_Geometry_LinesFromTriangle'{$ENDIF},
    sg_Geometry_WidestPoints name {$IFDEF DARWIN}'_sg_Geometry_WidestPoints'{$ELSE}'sg_Geometry_WidestPoints'{$ENDIF},
    sg_Sprites_SpriteLayers name {$IFDEF DARWIN}'_sg_Sprites_SpriteLayers'{$ELSE}'sg_Sprites_SpriteLayers'{$ENDIF},
    sg_UserInterface_SelectRadioButtonFromRadioGroupAndIndex name {$IFDEF DARWIN}'_sg_UserInterface_SelectRadioButtonFromRadioGroupAndIndex'{$ELSE}'sg_UserInterface_SelectRadioButtonFromRadioGroupAndIndex'{$ENDIF},
    sg_UserInterface_LabelSetFont name {$IFDEF DARWIN}'_sg_UserInterface_LabelSetFont'{$ELSE}'sg_UserInterface_LabelSetFont'{$ENDIF},
    sg_UserInterface_LabelWithIdSetText name {$IFDEF DARWIN}'_sg_UserInterface_LabelWithIdSetText'{$ELSE}'sg_UserInterface_LabelWithIdSetText'{$ENDIF},
    sg_Animations_UpdateAnimation name {$IFDEF DARWIN}'_sg_Animations_UpdateAnimation'{$ELSE}'sg_Animations_UpdateAnimation'{$ENDIF},
    sg_Sprites_SpriteAnimationName name {$IFDEF DARWIN}'_sg_Sprites_SpriteAnimationName'{$ELSE}'sg_Sprites_SpriteAnimationName'{$ENDIF},
    sg_Text_DrawTextToBitmapAtPointWithFontNamedAndSize name {$IFDEF DARWIN}'_sg_Text_DrawTextToBitmapAtPointWithFontNamedAndSize'{$ELSE}'sg_Text_DrawTextToBitmapAtPointWithFontNamedAndSize'{$ENDIF},
    sg_Animations_AnimationScriptNamed name {$IFDEF DARWIN}'_sg_Animations_AnimationScriptNamed'{$ELSE}'sg_Animations_AnimationScriptNamed'{$ENDIF},
    sg_Input_NumberOfFingersOnScreen name {$IFDEF DARWIN}'_sg_Input_NumberOfFingersOnScreen'{$ELSE}'sg_Input_NumberOfFingersOnScreen'{$ENDIF},
    sg_Sprites_SpriteScreenRectangle name {$IFDEF DARWIN}'_sg_Sprites_SpriteScreenRectangle'{$ELSE}'sg_Sprites_SpriteScreenRectangle'{$ENDIF},
    sg_Audio_StopSoundEffect name {$IFDEF DARWIN}'_sg_Audio_StopSoundEffect'{$ELSE}'sg_Audio_StopSoundEffect'{$ENDIF},
    sg_Geometry_RectangleTop name {$IFDEF DARWIN}'_sg_Geometry_RectangleTop'{$ELSE}'sg_Geometry_RectangleTop'{$ENDIF},
    sg_Images_BitmapRectangleOfCell name {$IFDEF DARWIN}'_sg_Images_BitmapRectangleOfCell'{$ELSE}'sg_Images_BitmapRectangleOfCell'{$ENDIF},
    sg_UserInterface_SetLabelAlignment name {$IFDEF DARWIN}'_sg_UserInterface_SetLabelAlignment'{$ELSE}'sg_UserInterface_SetLabelAlignment'{$ENDIF},
    sg_Sprites_FreeSprite name {$IFDEF DARWIN}'_sg_Sprites_FreeSprite'{$ELSE}'sg_Sprites_FreeSprite'{$ENDIF},
    sg_Geometry_RectangleBottomLeft name {$IFDEF DARWIN}'_sg_Geometry_RectangleBottomLeft'{$ELSE}'sg_Geometry_RectangleBottomLeft'{$ENDIF},
    sg_Graphics_ColorMidnightBlue name {$IFDEF DARWIN}'_sg_Graphics_ColorMidnightBlue'{$ELSE}'sg_Graphics_ColorMidnightBlue'{$ENDIF},
    sg_Graphics_ColorSwinburneRed name {$IFDEF DARWIN}'_sg_Graphics_ColorSwinburneRed'{$ELSE}'sg_Graphics_ColorSwinburneRed'{$ENDIF},
    sg_Graphics_ShowSwinGameSplashScreen name {$IFDEF DARWIN}'_sg_Graphics_ShowSwinGameSplashScreen'{$ELSE}'sg_Graphics_ShowSwinGameSplashScreen'{$ENDIF},
    sg_Graphics_ColorBurlyWood name {$IFDEF DARWIN}'_sg_Graphics_ColorBurlyWood'{$ELSE}'sg_Graphics_ColorBurlyWood'{$ENDIF},
    sg_Graphics_ColorDarkOliveGreen name {$IFDEF DARWIN}'_sg_Graphics_ColorDarkOliveGreen'{$ELSE}'sg_Graphics_ColorDarkOliveGreen'{$ENDIF},
    sg_UserInterface_CheckboxFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_CheckboxFromRegion'{$ELSE}'sg_UserInterface_CheckboxFromRegion'{$ENDIF},
    sg_Geometry_RectangleBottom name {$IFDEF DARWIN}'_sg_Geometry_RectangleBottom'{$ELSE}'sg_Geometry_RectangleBottom'{$ENDIF},
    sg_Sprites_SpriteScale name {$IFDEF DARWIN}'_sg_Sprites_SpriteScale'{$ELSE}'sg_Sprites_SpriteScale'{$ENDIF},
    sg_Sprites_ReleaseAllSprites name {$IFDEF DARWIN}'_sg_Sprites_ReleaseAllSprites'{$ELSE}'sg_Sprites_ReleaseAllSprites'{$ENDIF},
    sg_UserInterface_PanelDraggable name {$IFDEF DARWIN}'_sg_UserInterface_PanelDraggable'{$ELSE}'sg_UserInterface_PanelDraggable'{$ENDIF},
    sg_Geometry_LineFrom name {$IFDEF DARWIN}'_sg_Geometry_LineFrom'{$ELSE}'sg_Geometry_LineFrom'{$ENDIF},
    sg_Networking_IPv4ToDec name {$IFDEF DARWIN}'_sg_Networking_IPv4ToDec'{$ELSE}'sg_Networking_IPv4ToDec'{$ENDIF},
    sg_Geometry_CreateRectangleTriangle name {$IFDEF DARWIN}'_sg_Geometry_CreateRectangleTriangle'{$ELSE}'sg_Geometry_CreateRectangleTriangle'{$ENDIF},
    sg_Images_DrawCellOnto name {$IFDEF DARWIN}'_sg_Images_DrawCellOnto'{$ELSE}'sg_Images_DrawCellOnto'{$ENDIF},
    sg_Sprites_CurrentSpritePack name {$IFDEF DARWIN}'_sg_Sprites_CurrentSpritePack'{$ELSE}'sg_Sprites_CurrentSpritePack'{$ENDIF},
    sg_Geometry_CircleRadius name {$IFDEF DARWIN}'_sg_Geometry_CircleRadius'{$ELSE}'sg_Geometry_CircleRadius'{$ENDIF},
    sg_Graphics_ColorIvory name {$IFDEF DARWIN}'_sg_Graphics_ColorIvory'{$ELSE}'sg_Graphics_ColorIvory'{$ENDIF},
    sg_Text_DrawTextLinesOnScreenWithFontNamed name {$IFDEF DARWIN}'_sg_Text_DrawTextLinesOnScreenWithFontNamed'{$ELSE}'sg_Text_DrawTextLinesOnScreenWithFontNamed'{$ENDIF},
    sg_Sprites_SpriteSetLayerOffset name {$IFDEF DARWIN}'_sg_Sprites_SpriteSetLayerOffset'{$ELSE}'sg_Sprites_SpriteSetLayerOffset'{$ENDIF},
    sg_UserInterface_ListFont name {$IFDEF DARWIN}'_sg_UserInterface_ListFont'{$ELSE}'sg_UserInterface_ListFont'{$ENDIF},
    sg_Sprites_SpriteVisibleIndexOfLayer name {$IFDEF DARWIN}'_sg_Sprites_SpriteVisibleIndexOfLayer'{$ELSE}'sg_Sprites_SpriteVisibleIndexOfLayer'{$ENDIF},
    sg_Characters_ReleaseCharacter name {$IFDEF DARWIN}'_sg_Characters_ReleaseCharacter'{$ELSE}'sg_Characters_ReleaseCharacter'{$ENDIF},
    sg_Graphics_ColorYellowGreen name {$IFDEF DARWIN}'_sg_Graphics_ColorYellowGreen'{$ELSE}'sg_Graphics_ColorYellowGreen'{$ENDIF},
    sg_UserInterface_LabelFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_LabelFromRegion'{$ELSE}'sg_UserInterface_LabelFromRegion'{$ENDIF},
    sg_UserInterface_DeactivateTextBox name {$IFDEF DARWIN}'_sg_UserInterface_DeactivateTextBox'{$ELSE}'sg_UserInterface_DeactivateTextBox'{$ENDIF},
    sg_Geometry_ClosestPointOnLineXY name {$IFDEF DARWIN}'_sg_Geometry_ClosestPointOnLineXY'{$ELSE}'sg_Geometry_ClosestPointOnLineXY'{$ENDIF},
    sg_Input_KeyboardShown name {$IFDEF DARWIN}'_sg_Input_KeyboardShown'{$ELSE}'sg_Input_KeyboardShown'{$ENDIF},
    sg_Graphics_ColorDarkOrange name {$IFDEF DARWIN}'_sg_Graphics_ColorDarkOrange'{$ELSE}'sg_Graphics_ColorDarkOrange'{$ENDIF},
    sg_Sprites_SpriteShowLayerNamed name {$IFDEF DARWIN}'_sg_Sprites_SpriteShowLayerNamed'{$ELSE}'sg_Sprites_SpriteShowLayerNamed'{$ENDIF},
    sg_Graphics_ColorLightCyan name {$IFDEF DARWIN}'_sg_Graphics_ColorLightCyan'{$ELSE}'sg_Graphics_ColorLightCyan'{$ENDIF},
    sg_Camera_CenterCameraOn name {$IFDEF DARWIN}'_sg_Camera_CenterCameraOn'{$ELSE}'sg_Camera_CenterCameraOn'{$ENDIF},
    sg_Graphics_DrawHorizontalLineOnto name {$IFDEF DARWIN}'_sg_Graphics_DrawHorizontalLineOnto'{$ELSE}'sg_Graphics_DrawHorizontalLineOnto'{$ENDIF},
    sg_Geometry_LineIntersectsRect name {$IFDEF DARWIN}'_sg_Geometry_LineIntersectsRect'{$ELSE}'sg_Geometry_LineIntersectsRect'{$ENDIF},
    sg_Text_DrawSimpleTextOnScreen name {$IFDEF DARWIN}'_sg_Text_DrawSimpleTextOnScreen'{$ELSE}'sg_Text_DrawSimpleTextOnScreen'{$ENDIF},
    sg_Graphics_ColorCornflowerBlue name {$IFDEF DARWIN}'_sg_Graphics_ColorCornflowerBlue'{$ELSE}'sg_Graphics_ColorCornflowerBlue'{$ENDIF},
    sg_Animations_AssignAnimation name {$IFDEF DARWIN}'_sg_Animations_AssignAnimation'{$ELSE}'sg_Animations_AssignAnimation'{$ENDIF},
    sg_Input_ShowMouse name {$IFDEF DARWIN}'_sg_Input_ShowMouse'{$ELSE}'sg_Input_ShowMouse'{$ENDIF},
    sg_Images_OptimiseBitmap name {$IFDEF DARWIN}'_sg_Images_OptimiseBitmap'{$ELSE}'sg_Images_OptimiseBitmap'{$ENDIF},
    sg_Graphics_ColorPaleTurquoise name {$IFDEF DARWIN}'_sg_Graphics_ColorPaleTurquoise'{$ELSE}'sg_Graphics_ColorPaleTurquoise'{$ENDIF},
    sg_Animations_AnimationScriptAnimationName name {$IFDEF DARWIN}'_sg_Animations_AnimationScriptAnimationName'{$ELSE}'sg_Animations_AnimationScriptAnimationName'{$ENDIF},
    sg_Geometry_RectangleFromTriangle name {$IFDEF DARWIN}'_sg_Geometry_RectangleFromTriangle'{$ELSE}'sg_Geometry_RectangleFromTriangle'{$ENDIF},
    sg_UserInterface_CheckboxSetStateFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_CheckboxSetStateFromRegion'{$ELSE}'sg_UserInterface_CheckboxSetStateFromRegion'{$ENDIF},
    sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScript name {$IFDEF DARWIN}'_sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScript'{$ELSE}'sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationScript'{$ENDIF},
    sg_Sprites_CreateBasicSpriteNamed name {$IFDEF DARWIN}'_sg_Sprites_CreateBasicSpriteNamed'{$ELSE}'sg_Sprites_CreateBasicSpriteNamed'{$ENDIF},
    sg_Geometry_PointXYInRectXY name {$IFDEF DARWIN}'_sg_Geometry_PointXYInRectXY'{$ELSE}'sg_Geometry_PointXYInRectXY'{$ENDIF},
    sg_Geometry_CreateVectorFromAngle name {$IFDEF DARWIN}'_sg_Geometry_CreateVectorFromAngle'{$ELSE}'sg_Geometry_CreateVectorFromAngle'{$ENDIF},
    sg_Sprites_SpriteDX name {$IFDEF DARWIN}'_sg_Sprites_SpriteDX'{$ELSE}'sg_Sprites_SpriteDX'{$ENDIF},
    sg_Graphics_DrawOrFillRectangleOnto name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillRectangleOnto'{$ELSE}'sg_Graphics_DrawOrFillRectangleOnto'{$ENDIF},
    sg_Text_DrawTextOnBitmapAtPoint name {$IFDEF DARWIN}'_sg_Text_DrawTextOnBitmapAtPoint'{$ELSE}'sg_Text_DrawTextOnBitmapAtPoint'{$ENDIF},
    sg_Text_DrawTextOnScreenAtPoint name {$IFDEF DARWIN}'_sg_Text_DrawTextOnScreenAtPoint'{$ELSE}'sg_Text_DrawTextOnScreenAtPoint'{$ENDIF},
    sg_Geometry_MatrixMultiplyVector name {$IFDEF DARWIN}'_sg_Geometry_MatrixMultiplyVector'{$ELSE}'sg_Geometry_MatrixMultiplyVector'{$ENDIF},
    sg_Images_DrawBitmapAtPoint name {$IFDEF DARWIN}'_sg_Images_DrawBitmapAtPoint'{$ELSE}'sg_Images_DrawBitmapAtPoint'{$ENDIF},
    sg_Characters_CharacterStateCount name {$IFDEF DARWIN}'_sg_Characters_CharacterStateCount'{$ELSE}'sg_Characters_CharacterStateCount'{$ENDIF},
    sg_Animations_AssignAnimationNamedWithSound name {$IFDEF DARWIN}'_sg_Animations_AssignAnimationNamedWithSound'{$ELSE}'sg_Animations_AssignAnimationNamedWithSound'{$ENDIF},
    sg_Geometry_LineToString name {$IFDEF DARWIN}'_sg_Geometry_LineToString'{$ELSE}'sg_Geometry_LineToString'{$ENDIF},
    sg_Audio_PauseMusic name {$IFDEF DARWIN}'_sg_Audio_PauseMusic'{$ELSE}'sg_Audio_PauseMusic'{$ENDIF},
    sg_Geometry_VectorToPoint name {$IFDEF DARWIN}'_sg_Geometry_VectorToPoint'{$ELSE}'sg_Geometry_VectorToPoint'{$ENDIF},
    sg_Text_DrawText name {$IFDEF DARWIN}'_sg_Text_DrawText'{$ELSE}'sg_Text_DrawText'{$ENDIF},
    sg_Audio_SoundEffectNamed name {$IFDEF DARWIN}'_sg_Audio_SoundEffectNamed'{$ELSE}'sg_Audio_SoundEffectNamed'{$ENDIF},
    sg_Characters_ReleaseAllCharacters name {$IFDEF DARWIN}'_sg_Characters_ReleaseAllCharacters'{$ELSE}'sg_Characters_ReleaseAllCharacters'{$ENDIF},
    sg_UserInterface_SelectRadioButtonFromRadioGroupAndRegion name {$IFDEF DARWIN}'_sg_UserInterface_SelectRadioButtonFromRadioGroupAndRegion'{$ELSE}'sg_UserInterface_SelectRadioButtonFromRadioGroupAndRegion'{$ENDIF},
    sg_Graphics_ColorTurquoise name {$IFDEF DARWIN}'_sg_Graphics_ColorTurquoise'{$ELSE}'sg_Graphics_ColorTurquoise'{$ENDIF},
    sg_Graphics_DrawOrFillCircleStructOnto name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillCircleStructOnto'{$ELSE}'sg_Graphics_DrawOrFillCircleStructOnto'{$ENDIF},
    sg_UserInterface_TextboxSetTextToIntWithId name {$IFDEF DARWIN}'_sg_UserInterface_TextboxSetTextToIntWithId'{$ELSE}'sg_UserInterface_TextboxSetTextToIntWithId'{$ENDIF},
    sg_Audio_HasMusic name {$IFDEF DARWIN}'_sg_Audio_HasMusic'{$ELSE}'sg_Audio_HasMusic'{$ENDIF},
    sg_Characters_CharacterAnglesLength name {$IFDEF DARWIN}'_sg_Characters_CharacterAnglesLength'{$ELSE}'sg_Characters_CharacterAnglesLength'{$ENDIF},
    sg_Text_DrawTextLinesInRectOnScreenWithFontNamed name {$IFDEF DARWIN}'_sg_Text_DrawTextLinesInRectOnScreenWithFontNamed'{$ELSE}'sg_Text_DrawTextLinesInRectOnScreenWithFontNamed'{$ENDIF},
    sg_Animations_AnimationCurrentVector name {$IFDEF DARWIN}'_sg_Animations_AnimationCurrentVector'{$ELSE}'sg_Animations_AnimationCurrentVector'{$ENDIF},
    sg_Sprites_ReleaseSprite name {$IFDEF DARWIN}'_sg_Sprites_ReleaseSprite'{$ELSE}'sg_Sprites_ReleaseSprite'{$ENDIF},
    sg_UserInterface_ToggleRegionActive name {$IFDEF DARWIN}'_sg_UserInterface_ToggleRegionActive'{$ELSE}'sg_UserInterface_ToggleRegionActive'{$ENDIF},
    sg_Characters_CharacterStates name {$IFDEF DARWIN}'_sg_Characters_CharacterStates'{$ELSE}'sg_Characters_CharacterStates'{$ENDIF},
    sg_Graphics_ColorDeepSkyBlue name {$IFDEF DARWIN}'_sg_Graphics_ColorDeepSkyBlue'{$ELSE}'sg_Graphics_ColorDeepSkyBlue'{$ENDIF},
    sg_Animations_AnimationCurrentCell name {$IFDEF DARWIN}'_sg_Animations_AnimationCurrentCell'{$ELSE}'sg_Animations_AnimationCurrentCell'{$ENDIF},
    sg_UserInterface_TextBoxFontFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_TextBoxFontFromRegion'{$ELSE}'sg_UserInterface_TextBoxFontFromRegion'{$ENDIF},
    sg_Characters_CharacterDirections name {$IFDEF DARWIN}'_sg_Characters_CharacterDirections'{$ELSE}'sg_Characters_CharacterDirections'{$ENDIF},
    sg_Geometry_RectangleTopLeft name {$IFDEF DARWIN}'_sg_Geometry_RectangleTopLeft'{$ELSE}'sg_Geometry_RectangleTopLeft'{$ENDIF},
    sg_UserInterface_SelectRadioButton name {$IFDEF DARWIN}'_sg_UserInterface_SelectRadioButton'{$ELSE}'sg_UserInterface_SelectRadioButton'{$ENDIF},
    sg_UserInterface_ReleaseAllPanels name {$IFDEF DARWIN}'_sg_UserInterface_ReleaseAllPanels'{$ELSE}'sg_UserInterface_ReleaseAllPanels'{$ENDIF},
    sg_UserInterface_ReleasePanel name {$IFDEF DARWIN}'_sg_UserInterface_ReleasePanel'{$ELSE}'sg_UserInterface_ReleasePanel'{$ENDIF},
    sg_Networking_HexStrToIPv4 name {$IFDEF DARWIN}'_sg_Networking_HexStrToIPv4'{$ELSE}'sg_Networking_HexStrToIPv4'{$ENDIF},
    sg_UserInterface_LabelFont name {$IFDEF DARWIN}'_sg_UserInterface_LabelFont'{$ELSE}'sg_UserInterface_LabelFont'{$ENDIF},
    sg_Input_KeyTyped name {$IFDEF DARWIN}'_sg_Input_KeyTyped'{$ELSE}'sg_Input_KeyTyped'{$ENDIF},
    sg_Graphics_ToggleFullScreen name {$IFDEF DARWIN}'_sg_Graphics_ToggleFullScreen'{$ELSE}'sg_Graphics_ToggleFullScreen'{$ENDIF},
    sg_Timers_StartTimer name {$IFDEF DARWIN}'_sg_Timers_StartTimer'{$ELSE}'sg_Timers_StartTimer'{$ENDIF},
    sg_UserInterface_TextboxSetTextOnPanelAndId name {$IFDEF DARWIN}'_sg_UserInterface_TextboxSetTextOnPanelAndId'{$ELSE}'sg_UserInterface_TextboxSetTextOnPanelAndId'{$ENDIF},
    sg_Camera_PointOnScreen name {$IFDEF DARWIN}'_sg_Camera_PointOnScreen'{$ELSE}'sg_Camera_PointOnScreen'{$ENDIF},
    sg_Input_EndReadingText name {$IFDEF DARWIN}'_sg_Input_EndReadingText'{$ELSE}'sg_Input_EndReadingText'{$ENDIF},
    sg_UserInterface_ListAddItemWithCell name {$IFDEF DARWIN}'_sg_UserInterface_ListAddItemWithCell'{$ELSE}'sg_UserInterface_ListAddItemWithCell'{$ENDIF},
    sg_Graphics_ColorSlateBlue name {$IFDEF DARWIN}'_sg_Graphics_ColorSlateBlue'{$ELSE}'sg_Graphics_ColorSlateBlue'{$ENDIF},
    sg_UserInterface_IndexOfLastUpdatedTextBox name {$IFDEF DARWIN}'_sg_UserInterface_IndexOfLastUpdatedTextBox'{$ELSE}'sg_UserInterface_IndexOfLastUpdatedTextBox'{$ENDIF},
    sg_Graphics_DrawOrFillCircle name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillCircle'{$ELSE}'sg_Graphics_DrawOrFillCircle'{$ENDIF},
    sg_Graphics_HSBColor name {$IFDEF DARWIN}'_sg_Graphics_HSBColor'{$ELSE}'sg_Graphics_HSBColor'{$ENDIF},
    sg_Graphics_ColorPaleGoldenrod name {$IFDEF DARWIN}'_sg_Graphics_ColorPaleGoldenrod'{$ELSE}'sg_Graphics_ColorPaleGoldenrod'{$ENDIF},
    sg_Text_DrawFramerate name {$IFDEF DARWIN}'_sg_Text_DrawFramerate'{$ELSE}'sg_Text_DrawFramerate'{$ENDIF},
    sg_UserInterface_RegionAtPoint name {$IFDEF DARWIN}'_sg_UserInterface_RegionAtPoint'{$ELSE}'sg_UserInterface_RegionAtPoint'{$ENDIF},
    sg_Graphics_DrawOrFillRectangleStructOnScreen name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillRectangleStructOnScreen'{$ELSE}'sg_Graphics_DrawOrFillRectangleStructOnScreen'{$ENDIF},
    sg_Arduino_FreeArduinoDevice name {$IFDEF DARWIN}'_sg_Arduino_FreeArduinoDevice'{$ELSE}'sg_Arduino_FreeArduinoDevice'{$ENDIF},
    sg_Geometry_RectangleAtPoint name {$IFDEF DARWIN}'_sg_Geometry_RectangleAtPoint'{$ELSE}'sg_Geometry_RectangleAtPoint'{$ENDIF},
    sg_UserInterface_LabelSetText name {$IFDEF DARWIN}'_sg_UserInterface_LabelSetText'{$ELSE}'sg_UserInterface_LabelSetText'{$ENDIF},
    sg_Sprites_UpdateAllSprites name {$IFDEF DARWIN}'_sg_Sprites_UpdateAllSprites'{$ELSE}'sg_Sprites_UpdateAllSprites'{$ENDIF},
    sg_Graphics_SetClip name {$IFDEF DARWIN}'_sg_Graphics_SetClip'{$ELSE}'sg_Graphics_SetClip'{$ENDIF},
    sg_Graphics_CurrentScreenClip name {$IFDEF DARWIN}'_sg_Graphics_CurrentScreenClip'{$ELSE}'sg_Graphics_CurrentScreenClip'{$ENDIF},
    sg_Text_FreeFont name {$IFDEF DARWIN}'_sg_Text_FreeFont'{$ELSE}'sg_Text_FreeFont'{$ENDIF},
    sg_Text_FontNameFor name {$IFDEF DARWIN}'_sg_Text_FontNameFor'{$ELSE}'sg_Text_FontNameFor'{$ENDIF},
    sg_UserInterface_RegisterEventCallback name {$IFDEF DARWIN}'_sg_UserInterface_RegisterEventCallback'{$ELSE}'sg_UserInterface_RegisterEventCallback'{$ENDIF},
    sg_Geometry_RotationMatrix name {$IFDEF DARWIN}'_sg_Geometry_RotationMatrix'{$ELSE}'sg_Geometry_RotationMatrix'{$ENDIF},
    sg_Physics_BitmapPartPointCollision name {$IFDEF DARWIN}'_sg_Physics_BitmapPartPointCollision'{$ELSE}'sg_Physics_BitmapPartPointCollision'{$ENDIF},
    sg_Geometry_CreateRectangleCircle name {$IFDEF DARWIN}'_sg_Geometry_CreateRectangleCircle'{$ELSE}'sg_Geometry_CreateRectangleCircle'{$ENDIF},
    sg_Physics_SpriteBitmapAtPointCollision name {$IFDEF DARWIN}'_sg_Physics_SpriteBitmapAtPointCollision'{$ELSE}'sg_Physics_SpriteBitmapAtPointCollision'{$ENDIF},
    sg_Animations_LoadAnimationScriptNamed name {$IFDEF DARWIN}'_sg_Animations_LoadAnimationScriptNamed'{$ELSE}'sg_Animations_LoadAnimationScriptNamed'{$ENDIF},
    sg_Physics_CellBitmapPartCollision name {$IFDEF DARWIN}'_sg_Physics_CellBitmapPartCollision'{$ELSE}'sg_Physics_CellBitmapPartCollision'{$ENDIF},
    sg_Sprites_SpriteLayerNamedWidth name {$IFDEF DARWIN}'_sg_Sprites_SpriteLayerNamedWidth'{$ELSE}'sg_Sprites_SpriteLayerNamedWidth'{$ENDIF},
    sg_Graphics_HueOf name {$IFDEF DARWIN}'_sg_Graphics_HueOf'{$ELSE}'sg_Graphics_HueOf'{$ENDIF},
    sg_UserInterface_RegionWidth name {$IFDEF DARWIN}'_sg_UserInterface_RegionWidth'{$ELSE}'sg_UserInterface_RegionWidth'{$ENDIF},
    sg_Sprites_SpriteAddValue name {$IFDEF DARWIN}'_sg_Sprites_SpriteAddValue'{$ELSE}'sg_Sprites_SpriteAddValue'{$ENDIF},
    sg_Geometry_CircleWithinRect name {$IFDEF DARWIN}'_sg_Geometry_CircleWithinRect'{$ELSE}'sg_Geometry_CircleWithinRect'{$ENDIF},
    sg_Camera_ToScreenRect name {$IFDEF DARWIN}'_sg_Camera_ToScreenRect'{$ELSE}'sg_Camera_ToScreenRect'{$ENDIF},
    sg_Sprites_CreateSpriteWithLayerAndAnimation name {$IFDEF DARWIN}'_sg_Sprites_CreateSpriteWithLayerAndAnimation'{$ELSE}'sg_Sprites_CreateSpriteWithLayerAndAnimation'{$ENDIF},
    sg_Audio_FadeMusicNamedInWithLoops name {$IFDEF DARWIN}'_sg_Audio_FadeMusicNamedInWithLoops'{$ELSE}'sg_Audio_FadeMusicNamedInWithLoops'{$ENDIF},
    sg_Graphics_ColorOliveDrab name {$IFDEF DARWIN}'_sg_Graphics_ColorOliveDrab'{$ELSE}'sg_Graphics_ColorOliveDrab'{$ENDIF},
    sg_Images_BitmapFilename name {$IFDEF DARWIN}'_sg_Images_BitmapFilename'{$ELSE}'sg_Images_BitmapFilename'{$ENDIF},
    sg_Camera_CenterCameraOnWithXYOffset name {$IFDEF DARWIN}'_sg_Camera_CenterCameraOnWithXYOffset'{$ELSE}'sg_Camera_CenterCameraOnWithXYOffset'{$ENDIF},
    sg_Sprites_SpriteSetPosition name {$IFDEF DARWIN}'_sg_Sprites_SpriteSetPosition'{$ELSE}'sg_Sprites_SpriteSetPosition'{$ENDIF},
    sg_Input_FingersOnScreen name {$IFDEF DARWIN}'_sg_Input_FingersOnScreen'{$ELSE}'sg_Input_FingersOnScreen'{$ENDIF},
    sg_Resources_SetAppPath name {$IFDEF DARWIN}'_sg_Resources_SetAppPath'{$ELSE}'sg_Resources_SetAppPath'{$ENDIF},
    sg_Graphics_ColorPaleGreen name {$IFDEF DARWIN}'_sg_Graphics_ColorPaleGreen'{$ELSE}'sg_Graphics_ColorPaleGreen'{$ENDIF},
    sg_Sprites_SpriteSetX name {$IFDEF DARWIN}'_sg_Sprites_SpriteSetX'{$ELSE}'sg_Sprites_SpriteSetX'{$ENDIF},
    sg_Geometry_VectorTo name {$IFDEF DARWIN}'_sg_Geometry_VectorTo'{$ELSE}'sg_Geometry_VectorTo'{$ENDIF},
    sg_Graphics_ColorDodgerBlue name {$IFDEF DARWIN}'_sg_Graphics_ColorDodgerBlue'{$ELSE}'sg_Graphics_ColorDodgerBlue'{$ENDIF},
    sg_UserInterface_NewPanel name {$IFDEF DARWIN}'_sg_UserInterface_NewPanel'{$ELSE}'sg_UserInterface_NewPanel'{$ENDIF},
    sg_Graphics_ColorDarkViolet name {$IFDEF DARWIN}'_sg_Graphics_ColorDarkViolet'{$ELSE}'sg_Graphics_ColorDarkViolet'{$ENDIF},
    sg_Graphics_ColorBlack name {$IFDEF DARWIN}'_sg_Graphics_ColorBlack'{$ELSE}'sg_Graphics_ColorBlack'{$ENDIF},
    sg_Geometry_VectorOutOfRectFromCircle name {$IFDEF DARWIN}'_sg_Geometry_VectorOutOfRectFromCircle'{$ELSE}'sg_Geometry_VectorOutOfRectFromCircle'{$ENDIF},
    sg_UserInterface_LabelAlignementFromRegion name {$IFDEF DARWIN}'_sg_UserInterface_LabelAlignementFromRegion'{$ELSE}'sg_UserInterface_LabelAlignementFromRegion'{$ENDIF},
    sg_Geometry_Sine name {$IFDEF DARWIN}'_sg_Geometry_Sine'{$ELSE}'sg_Geometry_Sine'{$ENDIF},
    sg_Audio_ResumeMusic name {$IFDEF DARWIN}'_sg_Audio_ResumeMusic'{$ELSE}'sg_Audio_ResumeMusic'{$ENDIF},
    sg_UserInterface_UpdateInterface name {$IFDEF DARWIN}'_sg_UserInterface_UpdateInterface'{$ELSE}'sg_UserInterface_UpdateInterface'{$ENDIF},
    sg_UserInterface_ListWithIdAddItemWithCell name {$IFDEF DARWIN}'_sg_UserInterface_ListWithIdAddItemWithCell'{$ELSE}'sg_UserInterface_ListWithIdAddItemWithCell'{$ENDIF},
    sg_Graphics_DrawOrFillCircleAtPointOnScreen name {$IFDEF DARWIN}'_sg_Graphics_DrawOrFillCircleAtPointOnScreen'{$ELSE}'sg_Graphics_DrawOrFillCircleAtPointOnScreen'{$ENDIF},
    sg_Animations_UpdateAnimationPctAndSound name {$IFDEF DARWIN}'_sg_Animations_UpdateAnimationPctAndSound'{$ELSE}'sg_Animations_UpdateAnimationPctAndSound'{$ENDIF},
    sg_Networking_EnqueueNewConnection name {$IFDEF DARWIN}'_sg_Networking_EnqueueNewConnection'{$ELSE}'sg_Networking_EnqueueNewConnection'{$ENDIF},
    sg_Networking_HexToDecString name {$IFDEF DARWIN}'_sg_Networking_HexToDecString'{$ELSE}'sg_Networking_HexToDecString'{$ENDIF},
    sg_UserInterface_ListActiveItemTextOnPanelWithId name {$IFDEF DARWIN}'_sg_UserInterface_ListActiveItemTextOnPanelWithId'{$ELSE}'sg_UserInterface_ListActiveItemTextOnPanelWithId'{$ENDIF},
    sg_Graphics_ColorMagenta name {$IFDEF DARWIN}'_sg_Graphics_ColorMagenta'{$ELSE}'sg_Graphics_ColorMagenta'{$ENDIF},
    sg_UserInterface_SelectRadioButtonOnPanelWithId name {$IFDEF DARWIN}'_sg_UserInterface_SelectRadioButtonOnPanelWithId'{$ELSE}'sg_UserInterface_SelectRadioButtonOnPanelWithId'{$ENDIF},
    sg_Graphics_ColorLightGrey name {$IFDEF DARWIN}'_sg_Graphics_ColorLightGrey'{$ELSE}'sg_Graphics_ColorLightGrey'{$ENDIF},
    sg_Graphics_ColorTomato name {$IFDEF DARWIN}'_sg_Graphics_ColorTomato'{$ELSE}'sg_Graphics_ColorTomato'{$ENDIF},
    sg_Images_DrawBitmapCellOnScreen name {$IFDEF DARWIN}'_sg_Images_DrawBitmapCellOnScreen'{$ELSE}'sg_Images_DrawBitmapCellOnScreen'{$ENDIF},
    sg_Input_DeviceMovedInXAxis name {$IFDEF DARWIN}'_sg_Input_DeviceMovedInXAxis'{$ELSE}'sg_Input_DeviceMovedInXAxis'{$ENDIF},
    sg_Networking_TCPMessageReceived name {$IFDEF DARWIN}'_sg_Networking_TCPMessageReceived'{$ELSE}'sg_Networking_TCPMessageReceived'{$ENDIF},
    sg_Camera_CameraScreenRect name {$IFDEF DARWIN}'_sg_Camera_CameraScreenRect'{$ELSE}'sg_Camera_CameraScreenRect'{$ENDIF},
    sg_UserInterface_ShowOpenDialog name {$IFDEF DARWIN}'_sg_UserInterface_ShowOpenDialog'{$ELSE}'sg_UserInterface_ShowOpenDialog'{$ENDIF},
    sg_Images_DrawBitmapAtPointOnScreen name {$IFDEF DARWIN}'_sg_Images_DrawBitmapAtPointOnScreen'{$ELSE}'sg_Images_DrawBitmapAtPointOnScreen'{$ENDIF},
    sg_Text_DrawTextLinesInRectWithFontNamedAndSize name {$IFDEF DARWIN}'_sg_Text_DrawTextLinesInRectWithFontNamedAndSize'{$ELSE}'sg_Text_DrawTextLinesInRectWithFontNamedAndSize'{$ENDIF},
    sg_UserInterface_ToggleCheckboxState name {$IFDEF DARWIN}'_sg_UserInterface_ToggleCheckboxState'{$ELSE}'sg_UserInterface_ToggleCheckboxState'{$ENDIF},
    sg_Sprites_CreateSpriteWithAnimationNamed name {$IFDEF DARWIN}'_sg_Sprites_CreateSpriteWithAnimationNamed'{$ELSE}'sg_Sprites_CreateSpriteWithAnimationNamed'{$ENDIF},
    sg_Graphics_ColorChartreuse name {$IFDEF DARWIN}'_sg_Graphics_ColorChartreuse'{$ELSE}'sg_Graphics_ColorChartreuse'{$ENDIF},
    sg_UserInterface_RegionPanel name {$IFDEF DARWIN}'_sg_UserInterface_RegionPanel'{$ELSE}'sg_UserInterface_RegionPanel'{$ENDIF},
    sg_UserInterface_DialogCancelled name {$IFDEF DARWIN}'_sg_UserInterface_DialogCancelled'{$ELSE}'sg_UserInterface_DialogCancelled'{$ENDIF},
    sg_UserInterface_GUISetActiveTextbox name {$IFDEF DARWIN}'_sg_UserInterface_GUISetActiveTextbox'{$ELSE}'sg_UserInterface_GUISetActiveTextbox'{$ENDIF};end.
